{
  "type": "libraries",
  "id": "ThinkParticle",
  "links": {
    "download": "https://api.particle.io/v1/libraries/ThinkParticle/archive/0.2.6.tar.gz"
  },
  "attributes": {
    "name": "ThinkParticle",
    "version": "0.2.6",
    "installs": 207,
    "license": "MIT",
    "author": "Steve Harris <steve@thinkautomatic.io>",
    "sentence": "Particle library for integration with Think Automatic machine learning platform.",
    "url": "https://github.com/thinkautomatic/thinkparticle",
    "repository": "https://github.com/thinkautomatic/thinkparticle.git",
    "architectures": [],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "t",
  "cardUrl": "/reference/device-os/libraries/t/ThinkParticle",
  "versions": {
    "0.2.6": {
      "builds": {
        "2.0.1": {
          "photon": {
            "application": true
          },
          "electron": {
            "application": false
          },
          "argon": {
            "application": true
          },
          "boron": {
            "application": false
          }
        },
        "1.5.2": {
          "photon": {
            "application": true
          },
          "electron": {
            "application": false
          },
          "argon": {
            "application": true
          },
          "boron": {
            "application": false
          }
        }
      }
    }
  },
  "readme": "# ThinkParticle\nParticle library for integration with Think Automatic machine learning platform\n\n## Getting Started\n\nThis library enables Particle.io devices such as the Photon to easily integrate with the Think Automatic machine learning platform. In order to keep this library small, simple and secure it communicates with the platform though a Node.js proxy called ThinkHub running on a machine on the same local network as the Particle device using this library. \n\n### Prerequisite\n\nInstall and run the ThinkHub proxy on any machine on the same LAN as your Particle device. The ThinkHub project can be found <a href=\"https://github.com/ThinkAutomatic/ThinkHub\" target=\"_blank\">here</a>.\n\n### Using the ThinkParticle library\n\nThe ThinkParticle library is published through the Particle.io library publishing system. Simply search the community libraries for ThinkParticle. The provided example looks like the following and is designed to work with a modified Staples Easy Button although it will also work with any button input.\n```\n#include \"application.h\"\n#include \"ThinkParticle/ThinkParticle.h\"\n\nint led = D7; \n\nint button = D6; \nbool buttonPressed = FALSE;\n\nvoid postCallback(String name, String value)\n{\n    if (name == \"LED\") \n    {\n        if (value == \"on\")\n        {\n            digitalWrite(led, HIGH);\n        }\n        if (value == \"off\")\n        {\n            digitalWrite(led, LOW);\n        }\n    }\n}\n\n// This sets the name of the device, type of device (by guid), and callback for processing\n// commands from the platform. To browse existing device types or to create a new one\n// go to https://app.thinkautomatic.io/devicetypes\nThinkDevice thinkDevice(\"Easy Button\", \"51c68fea-2d6f-46e9-b4d7-0cf772a10920\", postCallback);\n\nvoid defaultCmd(WebServer &server, WebServer::ConnectionType type, char *, bool)\n{\n  /* this line sends the standard \"we're all OK\" headers back to the\n     browser */\n  server.httpSuccess();\n\n  /* if we're handling a GET or POST, we can output our data here.\n     For a HEAD request, we just stop after outputting headers. */\n  if (type != WebServer::HEAD)\n  {\n    /* this defines some HTML text in read-only memory aka PROGMEM.\n     * This is needed to avoid having the string copied to our limited\n     * amount of RAM. */\n    P(message) = \n\"<!DOCTYPE>\"\n\"<html>\"\n  \"<body>\"\n  \"<center>\"\n  \"<br>\"\n  \"<br>\"\n  \"<br>\"\n  \"<form action=\\\"/think\\\" method=\\\"POST\\\">\"\n    \"Tell your device what to do!<br>\"\n    \"<br>\"\n    \"<input type=\\\"radio\\\" name=\\\"LED\\\" value=\\\"on\\\">Turn the LED on.\"\n    \"<br>\"\n    \"<input type=\\\"radio\\\" name=\\\"LED\\\" value=\\\"off\\\">Turn the LED off.\"\n    \"<br>\"\n    \"<br>\"\n    \"<input type=\\\"submit\\\" value=\\\"Do it!\\\">\"\n  \"</form>\"\n  \"</center>\"\n  \"</body>\"\n\"</html>\";\n    server.printP(message);\n  }\n}\n\nvoid setup()\n{\n  pinMode(led, OUTPUT);\n  pinMode(button, INPUT_PULLUP);\n\n   // For good measure, let's also make sure LED is off when we start:\n  digitalWrite(led, LOW);\n\n  thinkDevice.setDefaultCommand(&defaultCmd);\n\n  thinkDevice.begin();\n}\n\nvoid loop()\n{\n  thinkDevice.process();\n  \n  if ((digitalRead(button) == LOW) && !buttonPressed) \n  {\n      buttonPressed = TRUE;\n      thinkDevice.patch(\"Button\", \"activate\");\n  }\n  else if ((digitalRead(button) == HIGH) && buttonPressed)\n  {\n      buttonPressed = FALSE;\n  }\n}\n```\n### Thanks\n\nSpecial thanks to Matthew (m-mcgowan) and all the contributers to the Webduino webserver library which is included as part of this module. And thanks to Nils Mattisson (nmattisson) and all the contributers to the HttpClient library which served as a valuable reference.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details\n",
  "allVersions": [
    "0.2.6",
    "0.2.5",
    "0.2.3"
  ]
}
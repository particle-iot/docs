{
  "type": "libraries",
  "id": "NCD16Relay",
  "links": {
    "download": "https://api.particle.io/v1/libraries/NCD16Relay/archive/0.0.1.tar.gz"
  },
  "attributes": {
    "name": "NCD16Relay",
    "version": "0.0.1",
    "installs": 8784,
    "license": "GNU",
    "author": "Travis Elliott <travis@controlanything.com>",
    "sentence": "Library intended for the operation of NCD 16 channel Spark compatible Relay Controller",
    "url": "https://github.com/controleverythingcom/ncd16relay",
    "repository": "https://github.com/controleverythingcom/ncd16relay.git",
    "architectures": [],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "n",
  "cardUrl": "/cards/libraries/n/NCD16Relay",
  "versions": {
    "0.0.1": {
      "builds": {
        "2.0.1": {
          "photon": {
            "CloudControl": false,
            "Loop_Test": false
          },
          "electron": {
            "CloudControl": false,
            "Loop_Test": false
          },
          "argon": {
            "CloudControl": false,
            "Loop_Test": false
          },
          "boron": {
            "CloudControl": false,
            "Loop_Test": false
          }
        },
        "1.5.2": {
          "photon": {
            "CloudControl": false,
            "Loop_Test": false
          },
          "electron": {
            "CloudControl": false,
            "Loop_Test": false
          },
          "argon": {
            "CloudControl": false,
            "Loop_Test": false
          },
          "boron": {
            "CloudControl": false,
            "Loop_Test": false
          }
        }
      }
    }
  },
  "readme": "# About\n\nThis Library is intended for use with the NCD 16 Channel Particle compatible relay controller.\n\nThe intention of this library is to make use of the NCD 16 channel relay controller with Particle development web IDE as simple as possible for users.\n###Developer information\nNCD has been designing and manufacturing computer control products since 1995.  We have specialized in hardware design and manufacturing of Relay controllers for 20 years.  We pride ourselves as being the industry leader of computer control relay products.  Our products are proven reliable and we are very excited to support Particle.  For more information on NCD please visit www.controlanything.com \n\n###Requirements\n- NCD 16 Channel Particle Compatible Relay board\n- Particle Core/Photon module\n- Knowledge base for developing and programming with Particle modules.\n\n### Version\n1.0.0\n\n### How to use this library\n\nThe libary must be imported into your application.  This can be done through the Particle WEB IDE by selecting Libraries, then select the NCD16Relay.  Click Include in App button.  Select the App you want to include the library in.  Finally click Add to this app.  For more information see [Particle's documentation] [ParticleIncludeLibrary] \n\n### Example use\n\nOnce the Library is included in your applicaiton you should see an include statement at the top like this:\n```cpp\n//This #include statement was automatically added by the Particle IDE.\n#include \"NCD16Relay/NCD16Relay.h\"\n```\nNow you need to instanciate an object of the library for use in your application like this:\n```cpp\nNCD16Relay relayController;\n```\n\nHere is an example use case for the class\n```cpp\n// This #include statement was automatically added by the Particle IDE.\n#include \"NCD16Relay/NCD16Relay.h\"\nNCD16Relay relayController;\n\nvoid setup() {\nrelayController.setAddress(0, 0, 0);\n}\n\nvoid loop() {\nrelayController.turnOnAllRelays();\ndelay(500);\nrelayController.turnOffAllRelays();\ndelay(500);\nrelayController.turnOnAllRelays(1);\ndelay(500);\nrelayController.turnOnAllRelays(2);\ndelay(500);\nrelayController.turnOffAllRelays(1);\ndelay(500);\nrelayController.turnOffAllRelays(2);\n}\n```\n\n###Public accessible methods\n```cpp\nvoid setAddress(int a0, int a1, int a2);\n```\n>Must be called first before using the object.  This method should also be called any time communication with\n>the controller is lost or broken to recover communication  This method accepts three int arguments.  This\n>tells the Library what address to direct commands to.  a0, a1, and a2 ints are representations of the three\n>jumpers on the 16 channel relay controller which are labeled on the board A0, A1, and A2.  If the jumper is\n>installed then that int in this call should be set to 1.  If it is not installed then the int should be set to \n>0.  So if I have A0 and A1 installed I would call relayController.setAddress(1, 0, 1).\n\n\n```cpp\nvoid turnOnRelay(int Relay);\n```\n>This method accepts one int argument.  Valid int arguments 1-16.  A call to this method will turn off the\n>relay indicated by the passed int argument.\n\n\n```cpp\nvoid turnOffRelay(int Relay);\n```\n>This method accepts one int argument.  Valid int arguments 1-16.  A call to this method will turn on the relay\n>indicated by the passed int argument.\n\n\n```cpp\nvoid turnOnAllRelays();\n```\n>This method does not accept any arguments.  A call to this method will turn on all 16 relays on the\n>controller.\n\n\n```cpp\nvoid turnOffAllRelays();\n```\n>This method does not accept any arguments.  A call to this method will turn off all 16 relays on the\n>controller.\n\n\n```cpp\nvoid turnOnAllRelays(int bank);\n```\n>This method accepts one int argument.  Valid ints are 1 or 2 for relay banks 1 and 2 respectively.  If 1 is\n>passed relays 1-8 will be turned on.  If 2 is passed relays 9-16 will be turned on.\n\n\n```cpp\nvoid turnOffAllRelays(int bank);\n```\n>This method accepts one int argument.  Valid ints are 1 or 2 for relay banks 1 and 2 respectively.  If 1 is\n>passed relays 1-8 will be turned off.  If 2 is passed relays 9-16 will be turned off.\n\n\n```cpp\nvoid toggleRelay(int relay);\n```\n>This method accepts one int argument.  Valid int arguments are 1-16.  A call to this method will toggle the\n>status of the relay indicated by the passed int argument.  If the relay was previously off before the method\n>call the relay will turn on and vice versa.\n\n\n```cpp\nvoid setBankStatus(int status, int bank);\n```\n>This method accepts two int arguments.  Valid status int arguments 0-255.  Valid bank arguments 1-2.  A call\n>to this method will set the status of all relays in the specified bank(1 or 2) to the status byte passed in>\nthe second argument(status).  Each relay in the bank(total of 8) are represented as bits in the status\n>argument.\n\n\n```cpp\nvoid setAllRelayStatus(int bank1, int bank2);\n```\n>This method accepts two int arguments.  Valid bank1 int arguments 0-255.  Valid bank2 int arguments 0-255.  A\n>call to this method will set the status of all relays in banks 1(total of 8) and bank 2(total of 8) to the\n>status ints passed in the bank1 and bank2 arguments.  Each relay in the bank are represented in bits in the\n>bank1/2 argument.\n\n\n```cpp\nint readRelayStatus(int relay);\n```\n>This method accepts one int argument and returns one int.  Valid relay int arguments 1-16.  A call to this\n>method will read the status of the given relay passed by the relay argument and return the current on/off\n>status of the given relay.  1 will be returned if the relay is on and 2 will be returned if the relay is off. \n>256 will be returned if an error has occured(generally due to lack of communication with the controller).\n\n\n```cpp\nint readBankStatus(int bank);\n```\n>This method accepts one int argument and returns one int.  Valid bank int arguments 1-2.  A call to this\n>method will read and return the status of all relays in the given bank(passed to method as bank int argument). \n>Each relay in the bank is represented in a bit in the returned int.  Valid returns are 0-255.  256 will be\n>returned if an error has occured(generally due to lack of communciation with controller).\n\n\n###Public accessible variables\n```cpp\nbool initialized;\n```\n>This boolean indicates the current status of the interface connection to the controller.  This variable should\n>be checked often throughout your application.  If communication to the board is lost for any reason this\n>boolean variable will return false.  If all is well it will return true.\n\n\n```cpp\nbyte bankOneStatus;\n```\n>This byte will indicate the current status of relays in bank 1.  This byte can be checked at any point during\n>the application rather than making method calls to read relay status.  Reading relay status through methods\n>however is more accurate so use the methods when possible.\n\n\n```cpp\nbyte bankTwoStatus;\n```\n>This byte will indicate the current status of relays in bank 2.  This byte can be checked at any point during\n>the application rather than making method calls to read relay status.  Reading relay status through methods\n>however is more accurate so use the methods when possible.\n\n\nLicense\n----\n\nGNU\n[ParticleIncludeLibrary]:https://docs.particle.io/guide/getting-started/build/photon/\n",
  "allVersions": [
    "0.0.1"
  ]
}
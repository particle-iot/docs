{
  "type": "libraries",
  "id": "MB85RC256V-FRAM-RK",
  "links": {
    "download": "https://api.particle.io/v1/libraries/MB85RC256V-FRAM-RK/archive/0.0.5.tar.gz"
  },
  "attributes": {
    "name": "MB85RC256V-FRAM-RK",
    "version": "0.0.5",
    "installs": 6694,
    "license": "MIT",
    "author": "rickkas7@rickkas7.com",
    "sentence": "Particle driver for DS75 temperature sensor",
    "url": "https://github.com/rickkas7/MB85RC256V-FRAM-RK",
    "repository": "https://github.com/rickkas7/MB85RC256V-FRAM-RK.git",
    "architectures": [
      "*"
    ],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "m",
  "cardUrl": "/reference/device-os/libraries/m/MB85RC256V-FRAM-RK",
  "versions": {
    "0.0.5": {
      "builds": {
        "2.0.1": {
          "photon": {
            "simple": true,
            "test1m": true
          },
          "electron": {
            "simple": true,
            "test1m": true
          },
          "argon": {
            "simple": true,
            "test1m": true
          },
          "boron": {
            "simple": true,
            "test1m": true
          }
        },
        "1.5.2": {
          "photon": {
            "simple": true,
            "test1m": true
          },
          "electron": {
            "simple": true,
            "test1m": true
          },
          "argon": {
            "simple": true,
            "test1m": true
          },
          "boron": {
            "simple": true,
            "test1m": true
          }
        },
        "3.3.0": {
          "photon": {
            "simple": true,
            "test1m": true
          },
          "electron": {
            "simple": true,
            "test1m": true
          },
          "argon": {
            "simple": true,
            "test1m": true
          },
          "boron": {
            "simple": true,
            "test1m": true
          }
        },
        "5.0.1": {
          "argon": {
            "simple": true,
            "test1m": true
          },
          "boron": {
            "simple": true,
            "test1m": true
          },
          "bsom": {
            "simple": true,
            "test1m": true
          },
          "b5som": {
            "simple": true,
            "test1m": true
          },
          "tracker": {
            "simple": true,
            "test1m": true
          },
          "p2": {
            "simple": true,
            "test1m": true
          }
        },
        "4.0.0": {
          "argon": {
            "simple": true,
            "test1m": true
          },
          "boron": {
            "simple": true,
            "test1m": true
          },
          "bsom": {
            "simple": true,
            "test1m": true
          },
          "b5som": {
            "simple": true,
            "test1m": true
          },
          "tracker": {
            "simple": true,
            "test1m": true
          },
          "esomx": {
            "simple": true,
            "test1m": true
          }
        },
        "5.6.0": {
          "argon": {
            "simple": true,
            "test1m": true
          },
          "boron": {
            "simple": true,
            "test1m": true
          },
          "bsom": {
            "simple": true,
            "test1m": true
          },
          "b5som": {
            "simple": true,
            "test1m": true
          },
          "tracker": {
            "simple": true,
            "test1m": true
          },
          "p2": {
            "simple": true,
            "test1m": true
          }
        },
        "4.2.0": {
          "argon": {
            "simple": true,
            "test1m": true
          },
          "boron": {
            "simple": true,
            "test1m": true
          },
          "bsom": {
            "simple": true,
            "test1m": true
          },
          "b5som": {
            "simple": true,
            "test1m": true
          },
          "tracker": {
            "simple": true,
            "test1m": true
          },
          "esomx": {
            "simple": true,
            "test1m": true
          }
        }
      },
      "added": "2022-06-17T10:16:53.802Z"
    }
  },
  "readme": "# MB85RC256V-FRAM-RK\n\n*Particle driver for MB85RC FRAMs (64, 256, 512, and 1M)*\n\nThis little board is a FRAM (Ferroelectric RAM). I got mine from [Adafruit](https://www.adafruit.com/products/1895).\n\nIt's 32 Kbytes in size, and the main benefit is that it's non-volatile like EEPROM so the contents are preserved if you remove power, but it's also very fast and doesn't have the limited wear cycles of EEPROM.\n\nThere are also a bunch of other variations in different sizes for just the chip part:\n\n| Device | Size (bytes) | DigiKey | Price |\n| :--- | ---: | :--- | ---: |\n| MB85RC64 | 8K | [865-1274-1-ND](https://www.digikey.com/product-detail/en/fujitsu-electronics-america-inc/MB85RC64TAPNF-G-BDERE1/865-1274-1-ND/6802280) | $1.58 |\n| MB85RC256 | 32K | [865-1249-1-ND](https://www.digikey.com/product-detail/en/fujitsu-electronics-america-inc/MB85RC256VPF-G-JNERE2/865-1249-1-ND/4022672) | $4.22 |\n| MB85RC512 | 64K | [865-1269-1-ND](https://www.digikey.com/product-detail/en/fujitsu-electronics-america-inc/MB85RC512TPNF-G-JNERE1/865-1269-1-ND/5456443) | $5.28 |\n| MB85RC1M | 128K | [865-1268-1-ND](https://www.digikey.com/product-detail/en/fujitsu-electronics-america-inc/MB85RC1MTPNF-G-JNERE1/865-1268-1-ND/5456442) | $5.65 |\n\n\n## Circuit\n\nThe pins on the Adafruit breakout connect as typical for an I2C device:\n\n- VCC to 3V3 (can also use VIN for a 5V I2C bus)\n- GND to GND\n- WP not connected (connect to VCC to prevent writes to the memory)\n- SCL connect to D1 (SCL) (blue in the picture)\n- SDA connect to D0 (SDA) (green in the picture)\n- A2 not connected. Connect to VCC to change the I2C address. \n- A1 not connected. Connect to VCC to change the I2C address. \n- A0 not connected. Connect to VCC to change the I2C address. \n\nCircuit (image removed)\n\nThe Adafruit board has built-in pull-ups on SDA and SCL so you don't need to add them. You will need pull-ups with a bare chip.\n \nIt also has pull-downs on A2, A1, and A0, so you can leave them unconnected.\n\n## Using the code\n\nTypically you create a global variable for the FRAM:\n\n```\nMB85RC256V fram(Wire, 0);\n```\n\nThe first parameter is the Wire interface to use, typically Wire (D0/D1). On the Electron you can also use Wire1 (C4/C5).\n\nThe second parameter is the address. Pass 0 if you left the A0-A3 pins unconnected. It can be 0-7 depending on the value set on A0-A3.\n\nFrom setup you typically call:\n\n```\nfram.begin();\n```\n\nTo read and write data you use the readData and writeData methods:\n\n```\nbool readData(size_t framAddr, uint8_t *data, size_t dataLen);\nbool writeData(size_t framAddr, const uint8_t *data, size_t dataLen);\n```\n\nYou can also use get and put like the [EEPROM API](https://docs.particle.io/reference/firmware/photon/#eeprom). This makes it easy to convert code between using the built-in EEPROM and FRAM as you can use the calls nearly identically.\n\nThis also works with other chips:\n\n```\nMB85RC64 fram(Wire, 0);\nMB85RC512 fram(Wire, 0);\nMB85RC1M fram(Wire, 0);\n```\n\nNote that with the MB85RC1M chip, the A0 pin is N/C. You can leave it unconnected, or connect it to VCC or GND. Because of this, the only acceptable address values for the MB85RC1M are 0, 2, 4, and 6.\n\n## Version History\n\n#### 0.0.5 (2020-03-10)\n\n- Fix compile error for ambiguous receiveFrom() with 1.5.0.rc.2.\n\n#### 0.0.4 (2019-11-18)\n\n- Added moveData() method to efficiently move data. Supports overlap.\n\n#### 0.0.3 (2019-11-18)\n\n- Added support for MB85RC64, MB85RC512, MB85RC1M\n- Now surrounds transactions with WITH_LOCK(wire) for thread safety\n- Minimum support Device OS version is now 1.0.0\n\n",
  "allVersions": [
    "0.0.5",
    "0.0.4",
    "0.0.2",
    "0.0.1"
  ]
}
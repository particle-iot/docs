{
  "type": "libraries",
  "id": "LocalTimeRK",
  "links": {
    "download": "https://api.particle.io/v1/libraries/LocalTimeRK/archive/0.0.9.tar.gz"
  },
  "attributes": {
    "name": "LocalTimeRK",
    "version": "0.0.9",
    "installs": 6993,
    "license": "MIT",
    "author": "Rick Kaseguma <rickkas7@rickkas7.com>",
    "sentence": "Timezone and DST handling for Particle devices",
    "url": "https://github.com/rickkas7/LocalTimeRK",
    "repository": "https://github.com/rickkas7/LocalTimeRK.git",
    "architectures": [
      "*"
    ],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "l",
  "cardUrl": "/reference/device-os/libraries/l/LocalTimeRK",
  "versions": {
    "0.0.4": {
      "builds": {
        "2.0.1": {
          "photon": {
            "1-simple": true
          },
          "electron": {
            "1-simple": true
          },
          "argon": {
            "1-simple": true
          },
          "boron": {
            "1-simple": true
          }
        },
        "1.5.2": {
          "photon": {
            "1-simple": true
          },
          "electron": {
            "1-simple": true
          },
          "argon": {
            "1-simple": true
          },
          "boron": {
            "1-simple": true
          }
        }
      }
    },
    "0.0.5": {
      "builds": {
        "2.0.1": {
          "photon": {
            "1-simple": true
          },
          "electron": {
            "1-simple": true
          },
          "argon": {
            "1-simple": true
          },
          "boron": {
            "1-simple": true
          }
        },
        "1.5.2": {
          "photon": {
            "1-simple": true
          },
          "electron": {
            "1-simple": true
          },
          "argon": {
            "1-simple": true
          },
          "boron": {
            "1-simple": true
          }
        }
      }
    },
    "0.0.9": {
      "builds": {
        "2.0.1": {
          "photon": {
            "1-simple": true,
            "2-schedule": true
          },
          "electron": {
            "1-simple": true,
            "2-schedule": true
          },
          "argon": {
            "1-simple": true,
            "2-schedule": true
          },
          "boron": {
            "1-simple": true,
            "2-schedule": true
          }
        },
        "1.5.2": {
          "photon": {
            "1-simple": true,
            "2-schedule": true
          },
          "electron": {
            "1-simple": true,
            "2-schedule": true
          },
          "argon": {
            "1-simple": true,
            "2-schedule": true
          },
          "boron": {
            "1-simple": true,
            "2-schedule": true
          }
        },
        "3.3.0": {
          "photon": {
            "1-simple": true,
            "2-schedule": true
          },
          "electron": {
            "1-simple": true,
            "2-schedule": true
          },
          "argon": {
            "1-simple": true,
            "2-schedule": true
          },
          "boron": {
            "1-simple": true,
            "2-schedule": true
          }
        },
        "5.0.1": {
          "argon": {
            "1-simple": true,
            "2-schedule": true
          },
          "boron": {
            "1-simple": true,
            "2-schedule": true
          },
          "bsom": {
            "1-simple": true,
            "2-schedule": true
          },
          "b5som": {
            "1-simple": true,
            "2-schedule": true
          },
          "tracker": {
            "1-simple": true,
            "2-schedule": true
          },
          "p2": {
            "1-simple": true,
            "2-schedule": true
          }
        },
        "4.0.0": {
          "argon": {
            "1-simple": true,
            "2-schedule": true
          },
          "boron": {
            "1-simple": true,
            "2-schedule": true
          },
          "bsom": {
            "1-simple": true,
            "2-schedule": true
          },
          "b5som": {
            "1-simple": true,
            "2-schedule": true
          },
          "tracker": {
            "1-simple": true,
            "2-schedule": true
          },
          "esomx": {
            "1-simple": true,
            "2-schedule": true
          }
        }
      },
      "added": "2022-06-17T10:16:53.831Z"
    }
  },
  "readme": "# LocalTimeRK\n\n*Timezone and DST handling for Particle devices*\n\nThis library is designed for specific local time and daylight saving time scenarios on Particle devices. It is not intended to solve all problems in all situations, however it will work well in certain scenarios:\n\n- [Full API docs](https://rickkas7.github.io/LocalTimeRK/)\n- Github repository: [https://github.com/rickkas7/LocalTimeRK/](https://github.com/rickkas7/LocalTimeRK/)\n- License: MIT\n\n**What it's good for:**\n\n- Managing local time, and daylight saving time, if needed, on devices in a known location\n- Mostly intended for devices in your own home\n- Managing scheduling of tasks at a specific local time\n- Displaying local time\n\n**What it's not intended for:**\n\n- Mobile devices that may change locations\n- Customer devices that could be in any timezone\n\n## Features\n\n- Timezone configuration using a POSIX timezone rule string\n- Does not require network access to determine timezone and daylight saving transitions\n- Good for displaying local time, such as on clock-like devices\n- Good for scheduling operations at a specific local time. For example, every day at 8:00 AM regardless of timezone and DST\n- Support for locations with DST and without DST (timezone only)\n- Should work in the southern hemisphere were DST is opposite on the calendar\n- Should work in any country as long as a compatible POSIX timezone configuration string can be generated\n\n## What is a POSIX timezone configuration?\n\nFor the United States east coast, the configuration string is:\n\n```\nEST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00\"\n```\n\nWhat this means is:\n\n- \"EST\" is the standard time timezone name\n- 5 is the offset from UTC in hours. Actually -5, as the sign is backwards from the way it's normally expressed. And it could be hours and minutes.\n- \"EDT\" is the daylight saving time timezone name\n- \"M3.2.0\" is when DST starts. Month 3 (March), 2nd week, 0 = Sunday\n- \"2:00:00\" transition to DST at 2:00 AM local time\n- \"M11.1.0\" transition back to standard time November, 1st week, on Sunday\n- \"2:00:00\" transition back to standard time at 2:00 AM local time\n\nThere are a bunch of supported formats, including for locations that don't have DST (such as Arizona, \"MST7\") and southern hemisphere where daylight saving is on the opposite part of the year, such as Eastern Australian time used in Sydney, Australia \"AEST-10AEDT,M10.1.0/02:00:00,M4.1.0/03:00:00\".\n\n## Using for scheduling\n\nThis library does not modify the `Time` class timezone! This has the potential to disrupt all sorts of things that depend on `Time`, and should be avoided. A new class and methods provide access to local time when needed.\n\nAdditionally, it's designed to handle scheduling. For example, say you want to perform an operation at 3:00 AM every day, local time. The class can find the UTC time corresponding to this, taking into account timezones and DST changes. Using `Time.now()` comparisons (at UTC) is fast and efficient. It's also good when you want to store the desired time in EEPROM, retained memory, or the file system.\n\nThe library also handles weird transition scenarios that occur on spring forward (in the north hemisphere) where the hour from 2:00 AM local time to 2:59:59 doesn't exist, and in the fall back where the hour from 1:00:00 to 1:59:59 local time occurs twice.\n\nIt also handles other common scheduling scenarios:\n\n- Tomorrow (same time)\n- Tomorrow (at a specific local time)\n- On a specific day of week at a specific time (\"every Saturday at 3:00 AM\")\n- On a day of week with an ordinal (\"on the 2nd Saturday of the month\")\n- On a specific day of month at a specific time\n- Also the last day of the month, the second to last day of the month, ...\n- On the next weekday (Monday - Friday)\n- On the next weekend day (Saturday - Sunday)\n\n## Clock Example\n\nThere is an example of using the library to use an Adafruit FeatherWing OLED Display 128x32 as a clock.\n\nThe display is available at [Adafruit](https://www.adafruit.com/product/2900). You can find more technical information [at Adafruit](https://learn.adafruit.com/adafruit-oled-featherwing/overview). The library is available in the Web IDE as [oled-wing-adafruit](https://build.particle.io/libs/oled-wing-adafruit/0.0.4/tab/oled-wing-adafruit.cpp). You can find additional documentation [here](https://github.com/rickkas7/oled-wing-adafruit).\n\nThe code example is in the more-examples directory in the Clock directory and is quite simple:\n\n```cpp\n#include \"Particle.h\"\n\n#include \"LocalTimeRK.h\"\n#include \"oled-wing-adafruit.h\"\n\nSerialLogHandler logHandler;\n\nSYSTEM_THREAD(ENABLED);\n\nOledWingAdafruit display;\n\nvoid setup() {\n    // Set timezone to the Eastern United States\n    LocalTime::instance().withConfig(LocalTimePosixTimezone(\"EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00\"));\n\n\tdisplay.setup();\n\n\tdisplay.clearDisplay();\n\tdisplay.display();\n}\n\nvoid loop() {\n    static unsigned long lastUpdate = 0;\n    if (millis() - lastUpdate >= 1000 && Time.isValid()) {\n        lastUpdate = millis();\n\n        LocalTimeConvert conv;\n        conv.withCurrentTime().convert();\n\n        // Log.info(\"local time: %s\", conv.format(TIME_FORMAT_ISO8601_FULL).c_str());\n        \n        // Room for 11 characters at text size 2\n        display.clearDisplay();\n        display.setTextColor(WHITE);\n        display.setTextSize(2);\n        display.setFont(NULL);\n        display.setCursor(0, 1);\n\n        String msg;\n\n        msg = conv.format(\"%Y-%m-%d\"); // 2021-06-07\n        display.println(msg);\n\n        msg = conv.format(\"%I:%M:%S%p\"); // 10:00:00AM\n        display.println(msg);\n\n        display.display();\n    }\n}\n```\n\n(image removed)\n\n\n## Using the library\n\n\n### Configure the timezone\n\n- Determine the POSIX timezone string for your location. For example, the US eastern timezone is shown in the example\n\n- At setup, configure the timezone:\n\n```cpp\nLocalTime::instance().withConfig(LocalTimePosixTimezone(\"EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00\"));\n```\n\nSome configuration strings:\n\n| Location | Timezone Configuration |\n| :--- | :--- |\n| New York | \"EST5EDT,M3.2.0/02:00:00,M11.1.0/02:00:00\" |\n| Chicago | \"CST6CDT,M3.2.0/2:00:00,M11.1.0/2:00:00\" |\n| Denver | \"MST7MDT,M3.2.0/2:00:00,M11.1.0/2:00:00\" |\n| Phoenix | \"MST7\" |\n| Los Angeles | \"PST8PDT,M3.2.0/2:00:00,M11.1.0/2:00:00\" |\n| London | \"BST0GMT,M3.5.0/1:00:00,M10.5.0/2:00:00\" |\n| Sydney, Australia | \"AEST-10AEDT,M10.1.0/02:00:00,M4.1.0/03:00:00\" | \n| Adelaide, Australia | \"ACST-9:30ACDT,M10.1.0/02:00:00,M4.1.0/03:00:00\" |\n| UTC | \"UTC\" |\n\n### Getting the current local time\n\nUse the `LocalTimeConvert` class like this to get the current time:\n\n```cpp\nLocalTimeConvert conv;\nconv.withCurrentTime().convert();\n```\n\nThis will initialize the `conv` object with information about the current local time in the timezone you have configured.\n\nAdditional useful LocalTimeConvert methods:\n\n<details>\n\n#### bool LocalTimeConvert::isDST() const \n\nReturns true if the current time is in daylight saving time.\n\n```\nbool isDST() const\n```\n\n---\n\n#### bool LocalTimeConvert::isStandardTime() const \n\nReturns true of the current time in in standard time.\n\n```\nbool isStandardTime() const\n```\n\n\n---\n\n#### String LocalTimeConvert::timeStr() \n\nWorks like Time.timeStr() to generate a readable string of the local time.\n\n```\nString timeStr()\n```\n\nUses asctime formatting, which looks like \"Fri Jan  1 18:45:56 2021\". The strings are not localized; they're always in English.\n\n---\n\n#### String LocalTimeConvert::format(const char * formatSpec) \n\nWorks like Time.format()\n\n```\nString format(const char * formatSpec)\n```\n\n##### Parameters\n* `formatSpec` the format specifies, which can be\n\n* TIME_FORMAT_DEFAULT (example: \"Thu Apr  1 12:00:00 2021\")\n\n* TIME_FORMAT_ISO8601_FULL (example: \"2021-04-01T12:00:00-04:00\")\n\n* custom format based on strftime()\n\nThere are many options to strftime described here: [https://www.cplusplus.com/reference/ctime/strftime/?kw=strftime](https://www.cplusplus.com/reference/ctime/strftime/?kw=strftime)\n\nUnlike Time.format(), you can use Z to output the timezone abbreviation, for example \"EDT\" for the Eastern United States, daylight saving instead of -04:00.\n\nThe z formatting matches that of Time.format(), which is wrong. The correct output should be \"-400\" but the output will be \"-04:00\" for compatibility.\n\nIf you want to make a US-style AM/PM clock display, the formatting string \"%I:%M %p\" will produce something like \"12:30 PM\".\n\n---\n\n#### String LocalTimeConvert::zoneName() const \n\nReturns the abbreviated time zone name for the current time.\n\n```\nString zoneName() const\n```\n\nFor example, for the United States east coast, EST or EDT depending on whether the current time is DST or not. See also isDST().\n\nThis string comes from the LocalTimePosixTimezone object.\n\n\n### Converting UTC to local time\n\nUse the `LocalTimeConvert` class like this to get the current time:\n\n```cpp\ntime_t timeVal = 1612393852; // Wednesday, February 3, 2021 11:10:52 PM\n\nLocalTimeConvert conv;\nconv.withTime(timeVal).convert();\n```\n\n</details>\n\n\n## Advanced scheduling\n\nAn advanced scheduling mode was added in version 0.0.8. This allows complex schedules such as:\n\n- Every 15 minutes in the hour, between 9:00 AM and 5:00 PM local time, Monday - Friday, except on 2022-03-21\n- Every 4 hours of the day starting at 00:00:00 (midnight) other times\n\nThis can either be specified in code, or it can be expressed in JSON. JSON allows the schedule to be updating using a Particle.function, for example. \n\nThis is a compact representation of that schedule in 77 bytes of JSON data:\n\n```\n[{\"mh\":15,\"y\":62,\"s\":\"09:00:00\",\"e\":\"16:59:59\",\"x\":[\"2022-03-21\"]},{\"hd\":4}]\n```\n\nWhile scheduling is designed to work with local time, each schedule calculator can optionally have a time zone override, which makes it possible to do some calculations at UTC if you prefer to do that.\n\n### Using a schedule\n\nThis is the code in examples/2-schedule:\n\n```cpp\n#include \"LocalTimeRK.h\"\n\nSerialLogHandler logHandler;\nSYSTEM_THREAD(ENABLED);\n\nLocalTimeSchedule publishSchedule;\n\nvoid setup() {\n    // Set timezone to the Eastern United States\n    LocalTime::instance().withConfig(LocalTimePosixTimezone(\"EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00\"));\n\n    // Publish every 5 minutes at :00, :05, :10, ...\n    publishSchedule.withMinuteOfHour(5);\n}\n\nvoid loop() {\n    if (publishSchedule.isScheduledTime() && Particle.connected()) {\n        Particle.publish(\"testEvent\", \"scheduled publish!\");\n    }\n}\n```\n\nThis is a simple example that publishes at :00, :05, :10, .... Note that these are clock times, not rolling times.\n\nTechnically you don't need a timezone for this example since it doesn't do any hour-based calculations, but it's set using `withConfig()` when you need to use one.\n\nThe part in loop() tests to see if it's time to publish and then publishes. As shown in the example, if you are not connected to the cloud at the scheduled time, that scheduled time is skipped.\n\nIf you reverse the order in the if statement, then if you are not connected to the cloud, it's possible to get publish immediately after reconnecting to the cloud to make up for the one that was missed.\n\n```cpp\n    // Allow one out-of-schedule publish to catch up for a missed publish in this order\n    if (Particle.connected() && publishSchedule.isScheduledTime())\n```\n\nThe real benefit is when you start to make more complex schedules, such as:\n\n```cpp\n// Every 15 minutes between 9:00 AM and 5:00 PM local time Monday - Friday\npublishSchedule.withMinuteOfHour(15, LocalTimeRange(LocalTimeHMS(\"09:00:00\"), LocalTimeHMS(\"16:59:59\"), LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_WEEKDAY)));\n\n// Every hour otherwise\npublishSchedule.withMinuteOfHour(60);\n```\n\nYou can exclude dates from a schedule. For example, the every 15 minutes on weekdays schedule excludes Monday, April 11, 2022 with this schedule:\n\n```cpp\npublishSchedule.withMinuteOfHour(15, LocalTimeRange(LocalTimeHMS(\"09:00:00\"), LocalTimeHMS(\"16:59:59\"), \n    LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_WEEKDAY, {}, {\"2022-04-11\"})));\npublishSchedule.withMinuteOfHour(60);\n```\n\n### LocalTimeSchedule items\n\nLocalTimeSchedule include things like every n minutes, every n hours, as well as day of week and day of month multiples. Each multiple has a type, an increment, in some cases additional data, and a `LocalTimeRange` that determines when the multiple is used.\n\n`LocalTimeRange` is itself composed of a `TimeRange`, and a `LocalTimeRestrictedDate`. This specifies both the time of day, as well as an optional restriction on the dates it applies. See above for for an explanation of these types.\n\n#### Minute of hour\n\nThis schedule item is used for \"every n minutes.\" For example, if you want to publish an event every 15 minutes.\n\n```cpp\n// PROTOTYPE (class LocalTimeSchedule)\nLocalTimeSchedule &withMinuteOfHour(int increment, LocalTimeRange timeRange = LocalTimeRange());\n```\n\n- Minute multiples are relative to the hour, so you typically want to use an increment that 60 is evenly divisible by in order to keep the period constant (2, 3, 4, 5, 6, 10, 12, 15, 20, 30).\n- The `LocalTimeRange` can restrict this to certain hours of the day, and certain days of the week. It can also handle exception dates, both only on date, or to exclude dates.\n- The minute of the start of the time range specifies the offset relative to the hour to start the increment from (modulo the increment).\n- The second of the start of the time range specifies the second offset.\n\nFor example, every 15 minutes all day, at 05:00, 20:00, 35:00, 50:00:\n\n```cpp\nschedule.withMinuteOfHour(15, LocalTimeRange(LocalTimeHMS(\"00:05:00\")));\n```\n\nEvery 5 minutes from 9:00 AM to 5:00 PM local time every day:\n\n```cpp\nschedule.withMinuteOfHour(5, LocalTimeRange(LocalTimeHMS(\"09:00:00\"), LocalTimeHMS(\"16:59:59\")))\n```\n\nEvery 5 minutes from 9:00 AM to 5:00 PM local time on weekdays (not Saturday or Sunday):\n\n```cpp\nschedule.withMinuteOfHour(5, LocalTimeRange(LocalTimeHMS(\"09:00:00\"), LocalTimeHMS(\"16:59:59\"), LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_WEEKDAY)));\n```\n\nIn generating from JSON:\n\n| Key | Type | Description | Default |\n| :--- | :--- | :--- | :--- |\n| \"mh\" | integer | Minute of hour multiple | |\n| \"f\" | integer | Flag bits (optional) | 0 |\n| \"s\" | string | The start time (HH:MM:SS format, can omit MM or SS) | \"00:00:00\" |\n| \"e\" | string | The end time (HH:MM:SS format, can omit MM or SS) | \"23:59:59\" |\n| \"y\" | integer | Mask value for days of the week (optional) |\n| \"a\" | Array of string | Array of strings of the form YYYY-MM-DD to allow specific dates (optional) |\n| \"x\" | Array of string | Array of strings of the form YYYY-MM-DD to exclude specific dates (optional) |\n\n\n#### Hour of day multiples\n\nThis schedule is used for \"every n hours.\" For example, if you want to wake and publish every 4 hours.\n\n```cpp\n// PROTOTYPE (class LocalTimeSchedule)\nLocalTimeSchedule &withHourOfDay(int hourMultiple, LocalTimeRange timeRange = LocalTimeRange());\n```\n\n- Hour multiples are relative to the day, so you typically want to use a value that 24 is evenly divisible by (2, 3, 4, 6, 8, 12).\n- The `LocalTimeRange` can restrict this to certain hours of the day, and certain days of the week. It can also handle exception dates, both only on date, or to exclude dates.\n- The hour of the start of the time range specifies the offset relative to the day to start the increment from (modulo the increment)\n- The minute and second of the start of the time range specifies the minute and second offset\n\nFor example, every 2 hours (00:00, 02:00, 04:00) local time.\n\n```cpp\nschedule.withHourOfDay(2);\n```\n\nEvery 2 hours, but starting at 01:30 local time (01:30, 03:30, 05:03, ...).\n\n```cpp\nschedule.withHourOfDay(2, LocalTimeRange(LocalTimeHMS(\"01:30:00\"), LocalTimeHMS(\"23:59:59\")));\n```\n\nEvery 15 minutes between 9:00 AM and 5:00 PM local time, otherwise every 2 hours (00:00, 02:00, 04:00 local time)\n\n```cpp\nschedule.withMinuteOfHour(15, LocalTimeRange(LocalTimeHMS(\"09:00:00\"), LocalTimeHMS(\"16:59:59\")));\nschedule.withHourOfDay(2);\n```\n\nIf configuring by JSON:\n\n| Key | Type | Description | Default |\n| :--- | :--- | :--- | :--- |\n| \"hd\" | integer | Hour of day multiple | |\n| \"f\" | integer | Flag bits (optional) | 0 |\n| \"s\" | string | The start time (HH:MM:SS format, can omit MM or SS) | \"00:00:00\" |\n| \"e\" | string | The end time (HH:MM:SS format, can omit MM or SS) | \"23:59:59\" |\n| \"y\" | integer | Mask value for days of the week (optional) |\n| \"a\" | Array of string | Array of strings of the form YYYY-MM-DD to allow specific dates (optional) |\n| \"x\" | Array of string | Array of strings of the form YYYY-MM-DD to exclude specific dates (optional) |\n\n\n#### Day of week of the month \n\nThis is used for things like: \"Every first Monday of the month,\" \"Every second Tuesday of the month,\" or \"Last Friday of the month.\"\n\n```cpp\n// PROTOTYPE (class LocalTimeSchedule)\nLocalTimeSchedule &withDayOfWeekOfMonth(int dayOfWeek, int instance, LocalTimeRange timeRange = LocalTimeRange());\n```\n\n- The dayOfWeek specifies the day of the week (Sunday = 0, Monday = 1, Tuesday = 2, ..., Saturday = 6).\n- The instance specifies which instance (1 = first, 2 = second, ... Or -1 = last, -2 = second to last, ...)\n- The `LocalTimeRange` can restrict this to certain hours of the day, and certain days of the week. It can also handle exception dates, both only on date, or to exclude dates.\n- The start of the time range specifies the hour, minute, and second (local time)\n- Use a time of day with day of week restriction instead if you want to do \"Every Monday\"\n\nFirst Saturday of the month at midnight local time:\n\n```cpp\nschedule.withDayOfWeekOfMonth(LocalTimeDayOfWeek::DAY_SATURDAY, 1);\n```\n\nFirst Monday of the month at 9:00 AM local time:\n\n```cpp\nschedule.withDayOfWeekOfMonth(LocalTimeDayOfWeek::DAY_MONDAY, 1, LocalTimeHMS(\"09:00:00\"));\n```\n\nLast Friday of the month at 5 PM local time.\n\n```cpp\nschedule.withDayOfWeekOfMonth(LocalTimeDayOfWeek::DAY_FRIDAY, -1, LocalTimeHMS(\"17:00:00\"));\n```\n\n\n| Key | Type | Description | Default |\n| :--- | :--- | :--- | :--- |\n| \"dw\" | integer | Day of week instance (1 = first, 2 = second, ..., or -1 = last, -2 = second to last, ... | |\n| \"d\" | integer | Day of the week 0 = Sunday, 1 = Monday, ..., 6 = Saturday |\n| \"f\" | integer | Flag bits (optional) | 0 |\n| \"s\" | string | The start time (HH:MM:SS format, can omit MM or SS) | \"00:00:00\" |\n| \"e\" | string | The end time (HH:MM:SS format, can omit MM or SS) | \"23:59:59\" |\n| \"y\" | integer | Mask value for days of the week (optional) |\n| \"a\" | Array of string | Array of strings of the form YYYY-MM-DD to allow specific dates (optional) |\n| \"x\" | Array of string | Array of strings of the form YYYY-MM-DD to exclude specific dates (optional) |\n\n\n#### Day of month \n\nThis is used for things like \"The 1st of the month,\" \"The 15th of the month,\" or \"the last day of the month.\"\n\n\n```cpp\n// PROTOTYPE (class LocalTimeSchedule)\nLocalTimeSchedule &withDayOfMonth(int dayOfMonth, LocalTimeRange timeRange = LocalTimeRange());\n```\n\n- The dayOfMonth specifies which instance (1 = 1st of the month, 2 = 2nd of the month, ... Or -1 = last day, -2 = second to last day, ...)\n- A `LocalTimeRange` can handle exception dates, both only on date, or to exclude dates.\n- The start of the time range specifies the hour, minute, and second (local time)\n\nFor example, the 6th of the month at midnight:\n\n```cpp\nschedule.withDayOfMonth(6);\n```\n\nThe 6th of the month at 6:00 AM local time:\n\n```cpp\nschedule.withDayOfMonth(6, LocalTimeHMS(\"06:00\")); \n```\n\nThe last day of the month at 11:59:59 PM:\n\n```cpp\nschedule.withDayOfMonth(-1, LocalTimeHMS(\"23:59:59\")); \n```\n\nThe second to last day of the month:\n\n```cpp\nschedule.withDayOfMonth(-2);\n```\n\n| Key | Type | Description | Default |\n| :--- | :--- | :--- | :--- |\n| \"dw\" | integer | Day of month instance (1 = 1st, 2 = 2nd, ... or -1 = last day of month, -2 = second to last, ...| |\n| \"f\" | integer | Flag bits (optional) | 0 |\n| \"s\" | string | The start time (HH:MM:SS format, can omit MM or SS) | \"00:00:00\" |\n| \"e\" | string | The end time (HH:MM:SS format, can omit MM or SS) | \"23:59:59\" |\n| \"y\" | integer | Mask value for days of the week (optional) |\n| \"a\" | Array of string | Array of strings of the form YYYY-MM-DD to allow specific dates (optional) |\n| \"x\" | Array of string | Array of strings of the form YYYY-MM-DD to exclude specific dates (optional) |\n\n#### Time schedule\n\nIt's also possible to schedule at a specific time in local time. You can specify zero or more `LocalTimeHMSRestricted` objects, limited by available RAM.\n\nThe `LocalTimeHMSRestricted` is itself composed of a `LocalTimeHMS` object, for hours minutes and seconds, and a `LocalTimeRestrictedDate` which can optionally restrict which dates the times re used.\n\nSome ways you can use times:\n\n- \"At 17:00:00\" every day (local time)\n- \"At 17:00:00, Monday - Friday\"\n- \"At 09:00:00, Monday - Friday, except for 2022-03-21\"\n- \"At 23:59:59 on 2022-03-31\"\n\n```cpp\n// PROTOTYPE (class LocalTimeSchedule)\nLocalTimeSchedule &withTime(LocalTimeHMSRestricted hms);\nLocalTimeSchedule &withTimes(std::initializer_list<LocalTimeHMSRestricted> timesParam);\n```\n\nAt 4:00 AM local time, every day:\n\n```cpp\nschedule.withTime(LocalTimeHMS(\"04:00\"));\n```\n\nAt 06:00 and 18:30 (4:30 PM) local time, every day. Note the {} surrounding a list of times.\n\n```cpp\nschedule.withTimes({LocalTimeHMS(\"06:00\"), LocalTimeHMS(\"18:30\")});\n```\n\nAt 4:00 AM on weekdays:\n\n```cpp\nschedule.withTime(LocalTimeHMSRestricted(\"04:00\", LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_WEEKDAY))); \n```\n\nAt midnight (local time) on Saturdays:\n\n```cpp\nschedule.withTime(LocalTimeHMSRestricted(\"00:00\", LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_SATURDAY))); \n```\n\n\nIf configuring by JSON:\n\n| Key | Type | Description | Default |\n| :--- | :--- | :--- | :--- |\n| \"tm\" | string | Time in \"HH:MM:SS\" format, 24 hour clock, local time |\n| \"f\" | integer | Flag bits (optional) | 0 |\n| \"y\" | number | Mask value for days of the week (optional) |\n| \"a\" | Array of string | Array of strings of the form YYYY-MM-DD to allow specific dates (optional) |\n| \"x\" | Array of string | Array of strings of the form YYYY-MM-DD to exclude specific dates (optional) |\n\n#### All methods\n\n<details>\n\nA complete time schedule.\n\nA time schedule consists of minute multiples (\"every 15 minutes\"), optionally within a time range (all day, or from 09:00:00 to 17:00:00 local time, for example.\n\nIt can also have hour multiples, optionally in a time range, at a defined minute (\"every 4 hours at :15 \npast the hour\").\n\nSchedules can be at a specifc day week, with an ordinal (first Monday, last Friday) at a specific time, optionally with exceptions.\n\nSchedules can be a specific day of the month (the 1st, the 5th of the month, the last day of the month, the second to last day of month).\n\nIt can also have any number of specific times in the day (\"at 08:17:30 local time, 18:15:20 local time\") every day, specific days of the week, on specific dates, or with date exceptions.\n\n---\n\n#### LocalTimeSchedule & LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) \n\nAdds a minute multiple schedule in a time range.\n\n```\nLocalTimeSchedule & withMinuteOfHour(int increment, LocalTimeRange timeRange)\n```\n\n##### Parameters\n* `increment` Number of minutes (must be 1 <= minutes <= 59). A value that is is divisible by is recommended. \n\n* `timeRange` When to apply this minute multiple and/or minute offset (optional)\n\nThis schedule publishes every n minutes within the hour. This really is every hour, not rolling, so you should use a value that 60 is divisible by (2, 3, 4, 5, 6, 10, 12, 15, 20, 30) otherwise there will be an inconsistent period at the top of the hour.\n\nIf you specify a time range that does not start at 00:00:00 you can customize which minute the schedule starts at. For example: `15, LocalTimeRange(LocalTimeHMS(\"00:05:00\"), LocalTimeHMS(\"23:59:59\")` will schedule every 15 minutes, but starting at 5 minutes past the hour, so 05:00, 20:00, 35:00, 50:00.\n\nThe largest value for hmsEnd of the time range is 23:59:59.\n\n##### Returns\nLocalTimeSchedule&\n\n---\n\n#### LocalTimeSchedule & LocalTimeSchedule::withHourOfDay(int hourMultiple, LocalTimeRange timeRange) \n\nAdds multiple times periodically in a time range with an hour increment.\n\n```\nLocalTimeSchedule & withHourOfDay(int hourMultiple, LocalTimeRange timeRange)\n```\n\n##### Parameters\n* `hourMultiple` Hours between items must be >= 1. For example: 2 = every other hour. \n\n* `timeRange` Time range to add items to. This is optional; if not specified then the entire day. Also is used to specify a minute offset.\n\n##### Returns\nLocalTimeSchedule&\n\nHours are per day, local time. For whole-day schedules, you will typically use a value that 24 is evenly divisible by (2, 3, 4, 6, 8, 12), because otherwise the time periods will brief unequal at midnight.\n\nAlso note that times are local, and take into account daylight saving. Thus during a time switch, the interval may end up being a different number of hours than specified. For example, if the times would have been 00:00 and 04:00, a hourMultiple of 4, and you do this over a spring forward, the actual number hours between 00:00 and 04:00 is 5 (at least in the US where DST starts at 2:00).\n\n---\n\n#### LocalTimeSchedule & LocalTimeSchedule::withDayOfWeekOfMonth(int dayOfWeek, int instance, LocalTimeRange timeRange) \n\nSchedule an item on a specific instance of a day of week of the month.\n\n```\nLocalTimeSchedule & withDayOfWeekOfMonth(int dayOfWeek, int instance, LocalTimeRange timeRange)\n```\n\n##### Parameters\n* `dayOfWeek` Day of week 0 = Sunday, 1 = Monday, ..., 6 = Saturday \n\n* `instance` 1 = first week, 2 = second week, ..., -1 = last week, -2 = 2nd to last week \n\n* `timeRange` Optional to restrict dates or to set a time for the item \n\n##### Returns\nLocalTimeSchedule&\n\n---\n\n#### LocalTimeSchedule & LocalTimeSchedule::withDayOfMonth(int dayOfMonth, LocalTimeRange timeRange) \n\nSchedule an item on a specific day of the month.\n\n```\nLocalTimeSchedule & withDayOfMonth(int dayOfMonth, LocalTimeRange timeRange)\n```\n\n##### Parameters\n* `dayOfMonth` 1 = 1st, 2 = 2nd of the month, ..., -1 = last day of the month, -2 = second to last day of the month, ... \n\n* `timeRange` Optional to restrict dates or to set a time for the item \n\n##### Returns\nLocalTimeSchedule&\n\n---\n\n#### LocalTimeSchedule & LocalTimeSchedule::withTime(LocalTimeHMSRestricted hms) \n\nAdd a scheduled item at a time in local time during the day.\n\n```\nLocalTimeSchedule & withTime(LocalTimeHMSRestricted hms)\n```\n\n##### Parameters\n* `hms` The time in local time 00:00:00 to 23:59:59, optionally with date restrictions \n\n##### Returns\nLocalTimeSchedule&\n\nYou can call this multiple times, and also combine it with minute multiple schedules.\n\n---\n\n#### LocalTimeSchedule & LocalTimeSchedule::withTimes(std::initializer_list< LocalTimeHMSRestricted > timesParam) \n\nAdd multiple scheduled items at a time in local time during the day.\n\n```\nLocalTimeSchedule & withTimes(std::initializer_list< LocalTimeHMSRestricted > timesParam)\n```\n\n##### Parameters\n* `timesParam` an auto-initialized list of LocalTimeHMS objects \n\n##### Returns\nLocalTimeSchedule&\n\nYou can call this multiple times, and also combine it with minute multiple schedules.\n\nschedule.withTimes({LocalTimeHMS(\"06:00\"), LocalTimeHMS(\"18:30\")});\n\n---\n\n#### LocalTimeSchedule & LocalTimeSchedule::withName(const char * name) \n\nSets the name of this schedule (optional)\n\n```\nLocalTimeSchedule & withName(const char * name)\n```\n\n##### Parameters\n* `name` \n\n##### Returns\nLocalTimeSchedule&\n\n---\n\n#### LocalTimeSchedule & LocalTimeSchedule::withFlags(uint32_t flags) \n\nSets the flags for this schedule (optional)\n\n```\nLocalTimeSchedule & withFlags(uint32_t flags)\n```\n\n##### Parameters\n* `flags` \n\n##### Returns\nLocalTimeSchedule&\n\n---\n\n#### bool LocalTimeSchedule::isEmpty() const \n\nReturns true if the schedule does not have any items in it.\n\n```\nbool isEmpty() const\n```\n\n##### Returns\ntrue \n\n##### Returns\nfalse\n\n---\n\n#### void LocalTimeSchedule::clear() \n\nClear the existing settings.\n\n```\nvoid clear()\n```\n\n---\n\n#### void LocalTimeSchedule::fromJson(const char * jsonStr) \n\nSet the schedule from a JSON string containing an array of objects.\n\n```\nvoid fromJson(const char * jsonStr)\n```\n\n##### Parameters\n* `jsonStr` \n\nSee the overload that takes a JSONValue if the JSON string has already been parsed.\n\n---\n\n#### void LocalTimeSchedule::fromJson(JSONValue jsonArray) \n\nSet the schedule of this object from a JSONValue, typically the outer object.\n\n```\nvoid fromJson(JSONValue jsonArray)\n```\n\n##### Parameters\n* `jsonArray` A JSONValue containing an array of objects\n\nArray of LocalTimeScheduleItem objects:\n\n* mh (integer): Minute of hour (takes place of setting m and i separately)\n\n* hd (integer): Hour of day (takes place of setting m and i separately)\n\n* dw (integer): Day of week (takes place of setting m and i separately)\n\n* dm (integer): Day of month (takes place of setting m and i separately)\n\n* tm (string) Time string in HH:MM:SS format (can omit MM and SS parts, see LocalTimeHMS) for TIME items\n\n* m (integer) type of multiple (optional if mm, )\n\n* i (integer) increment\n\n* f (integer) flag bits (optional)\n\n* s (string) The start time (HH:MM:SS format, can omit MM or SS) [from LocalTimeRange via LocalTimeRange]\n\n* e (string) The end time (HH:MM:SS format, can omit MM or SS) [from LocalTimeRange via LocalTimeRange]\n\n* y (integer) mask value for onlyOnDays [from LocalTimeRestrictedDate via LocalTimeRange]\n\n* a (array) Array of YYYY-MM-DD value strings to allow [from LocalTimeRestrictedDate via LocalTimeRange]\n\n* x (array) Array of YYYY-MM-DD values to exclude [from LocalTimeRestrictedDate via LocalTimeRange]\n\n---\n\n#### bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert & conv) const \n\nUpdate the conv object to point at the next schedule item.\n\n```\nbool getNextScheduledTime(LocalTimeConvert & conv) const\n```\n\n##### Parameters\n* `conv` LocalTimeConvert object, may be modified \n\n##### Returns\ntrue if there is an item available or false if not. if false, conv will be unchanged.\n\nThis method finds closest scheduled time for this objecvt, if it's in the near future. The LocalTime::instance().getScheduleLookaheadDays() setting determines how far in the future to check; the default is 3 days. The way schedules work each day needs to be checked to make sure all of the constraints are met, so long look-aheads are computationally intensive. This is not normally an issue, because the idea is that you'll wake from sleep or check the schedule at least every few days, at which point the new schedule may be available.\n\n---\n\n#### bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert & conv, std::function< bool(LocalTimeScheduleItem &item)> filter) const \n\nUpdate the conv object to point at the next schedule item.\n\n```\nbool getNextScheduledTime(LocalTimeConvert & conv, std::function< bool(LocalTimeScheduleItem &item)> filter) const\n```\n\n##### Parameters\n* `conv` LocalTimeConvert object, may be modified \n\n* `filter` A function to determine, for each schedule item, if it should be tested \n\n##### Returns\ntrue if there is an item available or false if not. if false, conv will be unchanged.\n\nThis method finds closest scheduled time for this objecvt, if it's in the near future. The LocalTime::instance().getScheduleLookaheadDays() setting determines how far in the future to check; the default is 3 days. The way schedules work each day needs to be checked to make sure all of the constraints are met, so long look-aheads are computationally intensive. This is not normally an issue, because the idea is that you'll wake from sleep or check the schedule at least every few days, at which point the new schedule may be available.\n\nThe filter function or lambda has this prototype:\n\nbool filterCallback(LocalTimeScheduleItem &item)\n\nIf should return true to check this item, or false to skip this item for schedule checking.\n\n</details>\n\n\n\n### LocalTimeHMS\n\nThis object holds a hour, minute, and second value (HMS). There are numerous methods to compare time values, and convert the values to other formats.\n\nWhen converting from string format always use 24-hour clock format; this object does not support AM/PM. Also when converting from strings you can omit the seconds, or even both the minutes and seconds.\n\nNote that hour 24 is never a valid value. Because HMS calculations are always inclusive, the end of the day is 23:59:59. Leap seconds are not supported by the underlying C standard time library.\n\n<details>\n\n####  LocalTimeHMS::LocalTimeHMS() \n\nDefault constructor. Sets time to 00:00:00.\n\n```\n LocalTimeHMS()\n```\n\n---\n\n####  LocalTimeHMS::~LocalTimeHMS() \n\nDestructor.\n\n```\nvirtual  ~LocalTimeHMS()\n```\n\n---\n\n####  LocalTimeHMS::LocalTimeHMS(const char * str) \n\nConstructs the object from a time string.\n\n```\n LocalTimeHMS(const char * str)\n```\n\n##### Parameters\n* `str` The time string\n\nThe time string is normally of the form HH:MM:SS, such as \"04:00:00\" for 4:00 AM. The hour is in 24-hour format. Other formats are supported as well, including omitting the seconds (04:00), or including only the hour \"04\", or omitting the leadings zeros (4:0:0).\n\nAdditionally, the hour could be negative, used in UTC DST offsets. The minute and second are always positive (0-59). The hour could also be > 24 when used as a timezone offset.\n\n---\n\n####  LocalTimeHMS::LocalTimeHMS(const LocalTimeValue & value) \n\nConstruct this HMS from a LocalTimeValue (which contains YMD and HMS)\n\n```\n LocalTimeHMS(const LocalTimeValue & value)\n```\n\n##### Parameters\n* `value`\n\n---\n\n#### void LocalTimeHMS::clear() \n\nSets the hour, minute, and second to 0.\n\n```\nvoid clear()\n```\n\n---\n\n#### void LocalTimeHMS::parse(const char * str) \n\nParse a \"H:MM:SS\" string.\n\n```\nvoid parse(const char * str)\n```\n\n##### Parameters\n* `str` Input string\n\nMultiple formats are supported, and parts are optional:\n\n* H:MM:SS (examples: \"2:00:00\" or \"2:0:0\")\n\n* H:MM (examples: \"2:00\" or \"2:0\")\n\n* H (examples: \"2\")\n\nHours are always 0 - 23 (24-hour clock). Can also be a negative hour -1 to -23.\n\n---\n\n#### String LocalTimeHMS::toString() const \n\nTurns the parsed data into a normalized string of the form: \"HH:MM:SS\" (24-hour clock, with leading zeroes)\n\n```\nString toString() const\n```\n\n---\n\n#### int LocalTimeHMS::toSeconds() const \n\nConvert hour minute second into a number of seconds (simple multiplication and addition)\n\n```\nint toSeconds() const\n```\n\n---\n\n#### void LocalTimeHMS::fromTimeInfo(const struct tm * pTimeInfo) \n\nSets the hour, minute, and second fields from a struct tm.\n\n```\nvoid fromTimeInfo(const struct tm * pTimeInfo)\n```\n\n---\n\n#### void LocalTimeHMS::fromLocalTimeValue(const LocalTimeValue & value) \n\nSets the HMS from a LocalTimeValue.\n\n```\nvoid fromLocalTimeValue(const LocalTimeValue & value)\n```\n\n##### Parameters\n* `value`\n\n---\n\n#### void LocalTimeHMS::toTimeInfo(struct tm * pTimeInfo) const \n\nFill in the tm_hour, tm_min, and tm_sec fields of a struct tm from the values in this object.\n\n```\nvoid toTimeInfo(struct tm * pTimeInfo) const\n```\n\n##### Parameters\n* `pTimeInfo` The struct tm to modify\n\n---\n\n#### void LocalTimeHMS::adjustTimeInfo(struct tm * pTimeInfo) const \n\nAdjust the values in a struct tm from the values in this object.\n\n```\nvoid adjustTimeInfo(struct tm * pTimeInfo) const\n```\n\n##### Parameters\n* `pTimeInfo` The struct tm to modify\n\nAfter calling this, the values in the struct tm may be out of range, for example tm_hour > 23. This is fine, as calling mktime/gmtime normalizes this case and carries out-of-range values into the other fields as necessary.\n\n---\n\n#### void LocalTimeHMS::fromJson(JSONValue jsonObj) \n\nParses a JSON value of type string in HH:MM:SS format.\n\n```\nvoid fromJson(JSONValue jsonObj)\n```\n\n##### Parameters\n* `jsonObj`\n\n---\n\n#### LocalTimeHMS & LocalTimeHMS::withHour(int hour) \n\nSets this object to be the specified hour, with minute and second set to 0.\n\n```\nLocalTimeHMS & withHour(int hour)\n```\n\n##### Parameters\n* `hour` 0 <= hour < 24 \n\n##### Returns\nLocalTimeHMS&\n\n---\n\n#### LocalTimeHMS & LocalTimeHMS::withHourMinute(int hour, int minute) \n\nSets this object to be the specified hour and minute, with second set to 0.\n\n```\nLocalTimeHMS & withHourMinute(int hour, int minute)\n```\n\n##### Parameters\n* `hour` 0 <= hour < 24 \n\n* `minute` 0 <= minute < 60 \n\n##### Returns\nLocalTimeHMS&\n\n---\n\n#### int LocalTimeHMS::compareTo(const LocalTimeHMS & other) const \n\nCompare two LocalTimeHMS objects.\n\n```\nint compareTo(const LocalTimeHMS & other) const\n```\n\n##### Parameters\n* `other` The item to compare to \n\n##### Returns\nint -1 if this item is < other; 0 if this = other, or +1 if this > other\n\n---\n\n#### bool LocalTimeHMS::operator==(const LocalTimeHMS & other) const \n\nReturns true if this item is equal to other. Compares hour, minute, and second.\n\n```\nbool operator==(const LocalTimeHMS & other) const\n```\n\n##### Parameters\n* `other` \n\n##### Returns\ntrue \n\n##### Returns\nfalse\n\n---\n\n#### bool LocalTimeHMS::operator!=(const LocalTimeHMS & other) const \n\nReturns true if this item is not equal to other.\n\n```\nbool operator!=(const LocalTimeHMS & other) const\n```\n\n##### Parameters\n* `other` \n\n##### Returns\ntrue \n\n##### Returns\nfalse\n\n---\n\n#### bool LocalTimeHMS::operator<(const LocalTimeHMS & other) const \n\nReturns true if this item is < other.\n\n```\nbool operator<(const LocalTimeHMS & other) const\n```\n\n##### Parameters\n* `other` \n\n##### Returns\ntrue \n\n##### Returns\nfalse\n\n---\n\n#### bool LocalTimeHMS::operator>(const LocalTimeHMS & other) const \n\nReturns true if this item is > other.\n\n```\nbool operator>(const LocalTimeHMS & other) const\n```\n\n##### Parameters\n* `other` \n\n##### Returns\ntrue \n\n##### Returns\nfalse\n\n---\n\n#### bool LocalTimeHMS::operator<=(const LocalTimeHMS & other) const \n\nReturns true if this item <= other.\n\n```\nbool operator<=(const LocalTimeHMS & other) const\n```\n\n##### Parameters\n* `other` \n\n##### Returns\ntrue \n\n##### Returns\nfalse\n\n---\n\n#### bool LocalTimeHMS::operator>=(const LocalTimeHMS & other) const \n\nReturns true if this item is >= other.\n\n```\nbool operator>=(const LocalTimeHMS & other) const\n```\n\n##### Parameters\n* `other` \n\n##### Returns\ntrue \n\n##### Returns\nfalse\n\n</details>\n\n### LocalTimeYMD\n\nThis object specifies a year, month, and day. There are numerous methods to compare time values, and convert the values to other formats.\n\nWhen converting from a string this must always be \"YYYY-MM-DD\" format, with dashes, and in that order. Other date formats including common but poorly defined United States date formats cannot be used!\n\n<details>\n\n\nClass for holding a year month day efficiently (4 bytes of storage)\n\nThere is no method to get this object from a time_t because time_t is at UTC and this object is intended to be the YMD at local time to correspond with a LocalTimeHMS. Thus it requires a LocalTimeConvert object, and there is a method to get a LocalTimeYMD from a LocalTimeConvert, not from this object.\n\n####  LocalTimeYMD::LocalTimeYMD() \n\nDefault contructor with an invalid date (0000-00-00) set.\n\n```\n LocalTimeYMD()\n```\n\n---\n\n####  LocalTimeYMD::LocalTimeYMD(const char * s) \n\nConstruct a YMD value from a string.\n\n```\n LocalTimeYMD(const char * s)\n```\n\n##### Parameters\n* `s` String, must be in YYYY-MM-DD format. No other formars are allowed!\n\n---\n\n####  LocalTimeYMD::LocalTimeYMD(const LocalTimeValue & value) \n\nConstruct from a LocalTimeValue object.\n\n```\n LocalTimeYMD(const LocalTimeValue & value)\n```\n\n##### Parameters\n* `value` The date to copy from\n\n---\n\n#### bool LocalTimeYMD::isEmpty() const \n\nReturns true if the date is uninitialized, as from the default constructor.\n\n```\nbool isEmpty() const\n```\n\n##### Returns\ntrue \n\n##### Returns\nfalse\n\n---\n\n#### int LocalTimeYMD::getYear() const \n\nGet the year as a 4-digit year, for example: 2022.\n\n```\nint getYear() const\n```\n\n##### Returns\nint The year, 4-digit\n\n---\n\n#### void LocalTimeYMD::setYear(int year) \n\nSet the year value.\n\n```\nvoid setYear(int year)\n```\n\n##### Parameters\n* `year` Year to set, can be several different values but typically is 4-digit year (2022, for example)\n\n---\n\n#### int LocalTimeYMD::getMonth() const \n\nGet the month, 1 - 12 inclusive.\n\n```\nint getMonth() const\n```\n\n##### Returns\nint month\n\n---\n\n#### void LocalTimeYMD::setMonth(int month) \n\nSet the month, 1 - 12 inclusive.\n\n```\nvoid setMonth(int month)\n```\n\n##### Parameters\n* `month` Month value\n\n---\n\n#### int LocalTimeYMD::getDay() const \n\nGet the day of month, starting a 1.\n\n```\nint getDay() const\n```\n\n##### Returns\nint\n\n---\n\n#### void LocalTimeYMD::setDay(int day) \n\nSet the day of the month, staring at 1.\n\n```\nvoid setDay(int day)\n```\n\n##### Parameters\n* `day` \n\nThis method does not validate the date value, but you should avoid setting invalid date values since the results can be unpredictable.\n\n---\n\n#### void LocalTimeYMD::fromTimeInfo(const struct tm * pTimeInfo) \n\nCopies the year, month, and day from a struct tm.\n\n```\nvoid fromTimeInfo(const struct tm * pTimeInfo)\n```\n\n##### Parameters\n* `pTimeInfo` The pointer to a struct tm to copy the year, month, and day from.\n\nThe tm should be in local time.\n\n---\n\n#### void LocalTimeYMD::fromLocalTimeValue(const LocalTimeValue & value) \n\nThe LocalTimeValue to copy the year, month and day from.\n\n```\nvoid fromLocalTimeValue(const LocalTimeValue & value)\n```\n\n##### Parameters\n* `value` Source of the year, month, and day values\n\nSince LocalTimeValue contains a struct tm, this uses fromTimeInfo internally.\n\n---\n\n#### void LocalTimeYMD::addDay(int numberOfDays) \n\nAdd a number of days to the current YMD (updating month or year as necessary)\n\n```\nvoid addDay(int numberOfDays)\n```\n\n##### Parameters\n* `numberOfDays` Number of days to add (positive) or subtract (negative)\n\nWorks correctly with leap years.\n\n---\n\n#### int LocalTimeYMD::getDayOfWeek() const \n\nGet the day of the week, 0 = Sunday, 1 = Monday, 2 = Tuesday, ..., 6 = Saturday.\n\n```\nint getDayOfWeek() const\n```\n\n##### Returns\nint the day of the week\n\n---\n\n#### int LocalTimeYMD::compareTo(const LocalTimeYMD other) const \n\nCompare to another LocalTimeYMD object.\n\n```\nint compareTo(const LocalTimeYMD other) const\n```\n\n##### Parameters\n* `other` \n\n##### Returns\nint -1 if this is < other, 0 if this == other, or 1 if this > other.\n\n---\n\n#### bool LocalTimeYMD::operator==(const LocalTimeYMD other) const \n\nTests if this LocalTimeYMD is equal to other.\n\n```\nbool operator==(const LocalTimeYMD other) const\n```\n\n##### Parameters\n* `other` \n\n##### Returns\ntrue \n\n##### Returns\nfalse\n\n---\n\n#### bool LocalTimeYMD::operator!=(const LocalTimeYMD other) const \n\nTests if this LocalTimeYMD is not equal to other.\n\n```\nbool operator!=(const LocalTimeYMD other) const\n```\n\n##### Parameters\n* `other` \n\n##### Returns\ntrue \n\n##### Returns\nfalse\n\n---\n\n#### bool LocalTimeYMD::operator<(const LocalTimeYMD other) const \n\nTests if this LocalTimeYMD is less than other.\n\n```\nbool operator<(const LocalTimeYMD other) const\n```\n\n##### Parameters\n* `other` \n\n##### Returns\ntrue \n\n##### Returns\nfalse\n\n---\n\n#### bool LocalTimeYMD::operator<=(const LocalTimeYMD other) const \n\nTests if this LocalTimeYMD is less than or equal to other.\n\n```\nbool operator<=(const LocalTimeYMD other) const\n```\n\n##### Parameters\n* `other` \n\n##### Returns\ntrue \n\n##### Returns\nfalse\n\n---\n\n#### bool LocalTimeYMD::operator>(const LocalTimeYMD other) const \n\nTests if this LocalTimeYMD is greater than other.\n\n```\nbool operator>(const LocalTimeYMD other) const\n```\n\n##### Parameters\n* `other` \n\n##### Returns\ntrue \n\n##### Returns\nfalse\n\n---\n\n#### bool LocalTimeYMD::operator>=(const LocalTimeYMD other) const \n\nTests if this LocalTimeYMD is greater than or equal to other.\n\n```\nbool operator>=(const LocalTimeYMD other) const\n```\n\n##### Parameters\n* `other` \n\n##### Returns\ntrue \n\n##### Returns\nfalse\n\n---\n\n#### bool LocalTimeYMD::parse(const char * s) \n\nParse a YMD string in the format \"YYYY-MD-DD\". Only this format is supported!\n\n```\nbool parse(const char * s)\n```\n\n##### Parameters\n* `s` \n\n##### Returns\ntrue \n\n##### Returns\nfalse\n\nDo not use this function with other date formats like \"mm/dd/yyyy\"!\n\n---\n\n#### String LocalTimeYMD::toString() const \n\nConverts the value to YYYY-MM-DD format as a String with leading zeros.\n\n```\nString toString() const\n```\n\n##### Returns\nString\n\n# struct LocalTimeYMD::YMD \n\nPacked structure to hold the YMD value.\n\n</details>\n\n### LocalTimeRange\n\nA `LocalTimeRange` is a start time and end time in local time, expressed as `LocalTimeHMS` objects (hours, minutes, seconds). \n\nTime ranges are inclusive, so the entire day is 00:00:00 to 23:59:59. \n\nThe default constructor for `LocalTimeRange` sets the time range to the entire day. \n\nWhen converting from JSON:\n\n| Key | Type | Description | Default |\n| :--- | :--- | :--- | :--- |\n| \"s\" | string | Starting time in \"HH:MM:SS\" format, 24 hour clock, local time | \"00:00:00\" |\n| \"e\" | string | Ending time in \"HH:MM:SS\" format, 24 hour clock, local time | \"23:59:59\" |\n\n<details>\n\n####  LocalTimeRange::LocalTimeRange() \n\nConstruct a new Time Range object with the range of the entire day (inclusive)\n\n```\n LocalTimeRange()\n```\n\nThis is start = 00:00:00, end = 23:59:59. The system clock does not have a concept of leap seconds.\n\n---\n\n####  LocalTimeRange::LocalTimeRange(LocalTimeHMS hmsStart, LocalTimeHMS hmsEnd) \n\nConstruct a new Time Range object with the specifies start and end times.\n\n```\n LocalTimeRange(LocalTimeHMS hmsStart, LocalTimeHMS hmsEnd)\n```\n\n##### Parameters\n* `hmsStart` Start time in local time 00:00:00 <= hmsStart <= 23:59:59 \n\n* `hmsEnd` End time in local time 00:00:00 <= hmsStart <= 23:59:59 (optional)\n\nNote that 24:00:00 is not a valid time. You should generally use inclusive times such that 23:59:59 is the end of the day.\n\n---\n\n####  LocalTimeRange::LocalTimeRange(LocalTimeHMS hmsStart, LocalTimeHMS hmsEnd, LocalTimeRestrictedDate dateRestriction) \n\nConstruct a new object that specifies start time, end time, and date restrictions.\n\n```\n LocalTimeRange(LocalTimeHMS hmsStart, LocalTimeHMS hmsEnd, LocalTimeRestrictedDate dateRestriction)\n```\n\n##### Parameters\n* `hmsStart` Start time in local time 00:00:00 <= hmsStart <= 23:59:59 \n\n* `hmsEnd` End time in local time 00:00:00 <= hmsStart <= 23:59:59 \n\n* `dateRestriction` Only use this time range on certain dates\n\n---\n\n#### void LocalTimeRange::clear() \n\nClear time range to all day, every day.\n\n```\nvoid clear()\n```\n\n---\n\n#### time_t LocalTimeRange::getTimeSpan(const LocalTimeConvert & conv) const \n\nGet the number of seconds between start and end based on a LocalTimeConvert object.\n\n```\ntime_t getTimeSpan(const LocalTimeConvert & conv) const\n```\n\nThe reason for the conv object is that it contains the time to calculate at, as well as the daylight saving time settings. This methods takes into account the actual number of seconds including when a time change is crossed.\n\n##### Parameters\n* `conv` The time and timezone settings to calculate the time span at \n\n##### Returns\ntime_t Time difference in seconds\n\nIn the weird case that start > end, it can return a negative value, as time_t is a signed long (or long long) value.\n\nThis does not take into account date restrictions!\n\n---\n\n#### int LocalTimeRange::compareTo(LocalTimeHMS hms) const \n\nCompares a time (LocalTimeHHS, local time) to this time range.\n\n```\nint compareTo(LocalTimeHMS hms) const\n```\n\n##### Parameters\n* `hms` \n\n##### Returns\nint -1 if hms is before hmsStart, 0 if in range, +1 if hms is after hmsEnd\n\n---\n\n#### bool LocalTimeRange::isValidDate(LocalTimeYMD ymd) const \n\nReturns true if the date restrictions allow this day.\n\n```\nbool isValidDate(LocalTimeYMD ymd) const\n```\n\n##### Parameters\n* `ymd` \n\n##### Returns\ntrue \n\n##### Returns\nfalse\n\n---\n\n#### bool LocalTimeRange::inRange(LocalTimeValue localTimeValue) const \n\nReturns true if the date restrictions allow this date and the time is in this range (inclusive)\n\n```\nbool inRange(LocalTimeValue localTimeValue) const\n```\n\n##### Parameters\n* `localTimeValue` \n\n##### Returns\ntrue \n\n##### Returns\nfalse\n\n---\n\n#### void LocalTimeRange::fromTime(LocalTimeHMSRestricted hms) \n\nSet the date restrictions from a LocalTimeHMSRestricted object.\n\n```\nvoid fromTime(LocalTimeHMSRestricted hms)\n```\n\n##### Parameters\n* `hms` LocalTimeHMSRestricted, really only uses the date restrictions, not the HMS part\n\n---\n\n#### void LocalTimeRange::fromJson(JSONValue jsonObj) \n\nFills in the time range from a JSON object.\n\n```\nvoid fromJson(JSONValue jsonObj)\n```\n\n##### Parameters\n* `jsonObj` \n\nKeys:\n\n* s (string) The start time (HH:MM:SS format, can omit MM or SS)\n\n* e (string) The end time (HH:MM:SS format, can omit MM or SS)\n\n</details>\n\n##### LocalTimeDayOfWeek\n\nA `LocalTimeDayOfWeek` specifies zero or more days of the week (Sunday, Monday, ...)\n\nCommon mask values:\n\n| Value Hex | Value Decimal | Constant | Description |\n| :--- | ---: | :--- | :--- |\n| 0x01 | 1 | MASK_SUNDAY | Sunday |\n| 0x02 | 2 | MASK_MONDAY | Monday |\n| 0x04 | 4 | MASK_TUESDAY | Tuesday |\n| 0x08 | 8 | MASK_WEDNESDAY | Wednesday |\n| 0x10 | 16 | MASK_THURSDAY | Thursday |\n| 0x20 | 32 | MASK_FRIDAY | Friday |\n| 0x40 | 64 | MASK_SATURDAY | Saturday | \n| 0x7f | 127 | MASK_ALL | Every day |\n| 0x3e | 62 | MASK_WEEKDAY | Weekdays (Monday - Friday) | \n| 0x41 | 65 | MASK_WEEKEND | Weekends (Saturday - Sunday) |\n\nNote that you can combine any mask bits. For example, Monday, Wednesday, Friday is 2 + 8 + 32 = 42,\n\nIn JSON, you can only use the numeric mask values, as a decimal number. For example, weekdays Monday - Friday is 62.\n\n| Key | Type | Description |\n| :--- | :--- | :--- |\n| \"y\" | number | Mask value for days of the week, see table above |\n\n#### LocalTimeRestrictedDate\n\nA `LocalTimeRestrictedDate` is used for both multiples and times (below). It can have:\n\n- A day of week selection (`LocalTimeDayOfWeek`), which is a bitmask of days to allow. This makes it easy to specify, for example, weekdays (Monday - Friday).\n- A list of dates to allow (vector of `LocalTimeYMD`)\n- A list of dates to exclude (vector of `LocalTimeYMD`)\n\n| Key | Type | Description | Default |\n| :--- | :--- | :--- | :--- |\n| \"y\" | number | Mask value for days of the week, see table above (optional) |\n| \"a\" | Array of string | Array of strings of the form YYYY-MM-DD to allow specific dates (optional) |\n| \"x\" | Array of string | Array of strings of the form YYYY-MM-DD to exclude specific dates (optional) |\n\n<details>\n\n\n####  LocalTimeRestrictedDate::LocalTimeRestrictedDate(uint8_t mask) \n\nCreate a date restricted object restricted to days of the week.\n\n```\n LocalTimeRestrictedDate(uint8_t mask)\n```\n\n##### Parameters\n* `mask` The days of the week to enable. Pass LocalTimeDayOfWeek::MASK_ALL to allow on every day (no restrictions)\n\n---\n\n####  LocalTimeRestrictedDate::LocalTimeRestrictedDate(uint8_t mask, std::initializer_list< const char * > onlyOnDates, std::initializer_list< const char * > exceptDates) \n\nConstruct an object with an initializer list of strings.\n\n```\n LocalTimeRestrictedDate(uint8_t mask, std::initializer_list< const char * > onlyOnDates, std::initializer_list< const char * > exceptDates)\n```\n\n##### Parameters\n* `mask` mask value, see LocalTimeDayOfWeek for values \n\n* `onlyOnDates` Initializer list of strings of the form YYYY-MM-DD \n\n* `exceptDates` Initializer list of strings of the form YYYY-MM-DD\n\n---\n\n####  LocalTimeRestrictedDate::LocalTimeRestrictedDate(uint8_t mask, std::initializer_list< LocalTimeYMD > onlyOnDates, std::initializer_list< LocalTimeYMD > exceptDates) \n\nConstruct an object with an initializer list of LocalTimeYMD objects.\n\n```\n LocalTimeRestrictedDate(uint8_t mask, std::initializer_list< LocalTimeYMD > onlyOnDates, std::initializer_list< LocalTimeYMD > exceptDates)\n```\n\n##### Parameters\n* `mask` mask value, see LocalTimeDayOfWeek for values \n\n* `onlyOnDates` Initializer list of LocalTimeYMD values \n\n* `exceptDates` Initializer list of LocalTimeYMD values\n\n---\n\n#### LocalTimeRestrictedDate & LocalTimeRestrictedDate::withOnAllDays() \n\nSet the mask value to MASK_ALL. Does not change only on date or except on date lists.\n\n```\nLocalTimeRestrictedDate & withOnAllDays()\n```\n\n##### Returns\nLocalTimeRestrictedDate&\n\n---\n\n#### LocalTimeRestrictedDate & LocalTimeRestrictedDate::withOnlyOnDays(LocalTimeDayOfWeek value) \n\nRestrict to days of the week.\n\n```\nLocalTimeRestrictedDate & withOnlyOnDays(LocalTimeDayOfWeek value)\n```\n\n##### Parameters\n* `value` A LocalTimeDayOfWeek object specifying the days of the week (mask bits for Sunday - Saturday) \n\n##### Returns\nLocalTimeRestrictedDate&\n\nA day of the week is allowed if the day of week mask bit is set. If a date is in the except dates list, then isValid return false. If a date is in the only on days mask OR only on dates list, then isValid will return true.\n\n---\n\n#### LocalTimeRestrictedDate & LocalTimeRestrictedDate::withOnlyOnDays(uint8_t mask) \n\nRestrict to certain dates.\n\n```\nLocalTimeRestrictedDate & withOnlyOnDays(uint8_t mask)\n```\n\n##### Parameters\n* `mask` Mask value, such as LocalTimeDayOfWeek::MASK_MONDAY\n\n##### Returns\nLocalTimeRestrictedDate&\n\nA day of the week is allowed if the day of week mask bit is set. If a date is in the except dates list, then isValid return false. If a date is in the only on days mask OR only on dates list, then isValid will return true.\n\n---\n\n#### LocalTimeRestrictedDate & LocalTimeRestrictedDate::withOnlyOnDates(std::initializer_list< const char * > dates) \n\nRestrict to certain dates.\n\n```\nLocalTimeRestrictedDate & withOnlyOnDates(std::initializer_list< const char * > dates)\n```\n\n##### Parameters\n* `dates` A {} list of strings of the form YYYY-MM-DD. No other date formats are allowed! \n\n##### Returns\nLocalTimeRestrictedDate&\n\nIf a date is in the except dates list, then isValid return false. If a date is in the only on days mask OR only on dates list, then isValid will return true.\n\n---\n\n#### LocalTimeRestrictedDate & LocalTimeRestrictedDate::withOnlyOnDates(std::initializer_list< LocalTimeYMD > dates) \n\nRestrict to certain dates.\n\n```\nLocalTimeRestrictedDate & withOnlyOnDates(std::initializer_list< LocalTimeYMD > dates)\n```\n\n##### Parameters\n* `dates` A {} list of LocalTimeYMD objects \n\n##### Returns\nLocalTimeRestrictedDate&\n\nIf a date is in the except dates list, then isValid return false. If a date is in the only on days mask OR only on dates list, then isValid will return true.\n\n---\n\n#### LocalTimeRestrictedDate & LocalTimeRestrictedDate::withExceptDates(std::initializer_list< const char * > dates) \n\nDates that will always return false for isValid.\n\n```\nLocalTimeRestrictedDate & withExceptDates(std::initializer_list< const char * > dates)\n```\n\n##### Parameters\n* `dates` A {} list of strings of the form YYYY-MM-DD. No other date formats are allowed! \n\n##### Returns\nLocalTimeRestrictedDate&\n\nIf a date is in the except dates list, then isValid return false. If a date is in the only on days mask OR only on dates list, then isValid will return true.\n\n---\n\n#### LocalTimeRestrictedDate & LocalTimeRestrictedDate::withExceptDates(std::initializer_list< LocalTimeYMD > dates) \n\nDates that will always return false for isValid.\n\n```\nLocalTimeRestrictedDate & withExceptDates(std::initializer_list< LocalTimeYMD > dates)\n```\n\n##### Parameters\n* `dates` A {} list of LocalTimeYMD objects \n\n##### Returns\nLocalTimeRestrictedDate&\n\nIf a date is in the except dates list, then isValid return false. If a date is in the only on days mask OR only on dates list, then isValid will return true.\n\n---\n\n#### bool LocalTimeRestrictedDate::isEmpty() const \n\nReturns true if onlyOnDays mask is 0 and the onlyOnDates and exceptDates lists are empty.\n\n```\nbool isEmpty() const\n```\n\n##### Returns\ntrue \n\n##### Returns\nfalse\n\n---\n\n#### void LocalTimeRestrictedDate::clear() \n\nClear all settings.\n\n```\nvoid clear()\n```\n\n---\n\n#### bool LocalTimeRestrictedDate::isValid(LocalTimeValue localTimeValue) const \n\nReturns true if a date is in the onlyOnDays or onlyOnDates list, and not in the exceptDates list.\n\n```\nbool isValid(LocalTimeValue localTimeValue) const\n```\n\n##### Parameters\n* `localTimeValue` Date to check (local time) \n\n##### Returns\ntrue \n\n##### Returns\nfalse\n\n---\n\n#### bool LocalTimeRestrictedDate::isValid(LocalTimeYMD ymd) const \n\nReturns true if a date is in the onlyOnDays or onlyOnDates list, and not in the exceptDates list.\n\n```\nbool isValid(LocalTimeYMD ymd) const\n```\n\n##### Parameters\n* `ymd` Date to check (local time) \n\n##### Returns\ntrue \n\n##### Returns\nfalse\n\n---\n\n#### bool LocalTimeRestrictedDate::inOnlyOnDates(LocalTimeYMD ymd) const \n\nReturns true of a date is in the onlyOnDates list.\n\n```\nbool inOnlyOnDates(LocalTimeYMD ymd) const\n```\n\n##### Parameters\n* `ymd` \n\n##### Returns\ntrue \n\n##### Returns\nfalse\n\n---\n\n#### bool LocalTimeRestrictedDate::inExceptDates(LocalTimeYMD ymd) const \n\nReturns true of a date is in the exceptDates list.\n\n```\nbool inExceptDates(LocalTimeYMD ymd) const\n```\n\n##### Parameters\n* `ymd` \n\n##### Returns\ntrue \n\n##### Returns\nfalse\n\n---\n\n#### void LocalTimeRestrictedDate::fromJson(JSONValue jsonObj) \n\nFills in this object from JSON data.\n\n```\nvoid fromJson(JSONValue jsonObj)\n```\n\n##### Parameters\n* `jsonObj` \n\nKeys:\n\n* y (integer) mask value for onlyOnDays (optional)\n\n* a (array) Array of YYYY-MM-DD value strings to allow (optional)\n\n* x (array) Array of YYYY-MM-DD values to exclude (optional)\n\n# class LocalTimeSchedule \n\nA complete time schedule.\n\nA time schedule consists of minute multiples (\"every 15 minutes\"), optionally within a time range (all day, or from 09:00:00 to 17:00:00 local time, for example.\n\nIt can also have hour multiples, optionally in a time range, at a defined minute (\"every 4 hours at :15 \npast the hour\").\n\nSchedules can be at a specifc day week, with an ordinal (first Monday, last Friday) at a specific time, optionally with exceptions.\n\nSchedules can be a specific day of the month (the 1st, the 5th of the month, the last day of the month, the second to last day of month).\n\nIt can also have any number of specific times in the day (\"at 08:17:30 local time, 18:15:20 local time\") every day, specific days of the week, on specific dates, or with date exceptions.\n\n</details>\n\n\n---\n\n\n## Version history\n\n### 0.0.9 (2022-04-06)\n\n- Remove automated test from Particle library upload\n\n### 0.0.8 (2022-04-06)\n\n- Added advanced scheduling modes (JSON scheduling)\n- Updated docs\n\n### 0.0.7 (2022-03-08)\n\n- Added inLocalTimeRange and nextTimeList functions\n- Added LocalTimeSchedule\n\n### 0.0.6 (2022-03-08)\n\n- Added nextMinuteMultiple() and nextTime() functions\n\n### 0.0.5 (2021-07-08)\n\n- Fixed bug in calculation of negative hour offsets that also included minutes\n- Added unit test for Adelaide, Australia\n\n### 0.0.4 (2021-06-26)\n\n- Added nextDayOrTimeChange\n\n### 0.0.3 (2021-06-11)\n\n- Remove more-examples code from library\n\n### 0.0.2 (2021-06-07)\n\n- Add examples\n\n### 0.0.1 (2021-06-06) \n\n- Initial version",
  "allVersions": [
    "0.0.9",
    "0.0.8",
    "0.0.7",
    "0.0.6",
    "0.0.5",
    "0.0.4",
    "0.0.3",
    "0.0.2",
    "0.0.1"
  ]
}
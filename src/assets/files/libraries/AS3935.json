{
  "type": "libraries",
  "id": "AS3935",
  "links": {
    "download": "https://api.particle.io/v1/libraries/AS3935/archive/0.2.1.tar.gz"
  },
  "attributes": {
    "name": "AS3935",
    "version": "0.2.1",
    "installs": 2057,
    "license": "Apache-2.0",
    "author": "Phil Fenstermacher <phillip.fenstermacher@gmail.com>",
    "sentence": "A library to communicate with and control an AS3935 lightning sensor over I2C.",
    "category": "Other",
    "url": "https://github.com/pcfens/particle-as3935",
    "repository": "https://github.com/pcfens/particle-as3935.git",
    "architectures": [],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "a",
  "cardUrl": "/reference/device-os/libraries/a/AS3935",
  "versions": {
    "0.2.1": {
      "builds": {
        "2.0.1": {
          "photon": {
            "serial-detector": true
          },
          "electron": {
            "serial-detector": true
          },
          "argon": {
            "serial-detector": true
          },
          "boron": {
            "serial-detector": true
          }
        },
        "1.5.2": {
          "photon": {
            "serial-detector": true
          },
          "electron": {
            "serial-detector": true
          },
          "argon": {
            "serial-detector": true
          },
          "boron": {
            "serial-detector": true
          }
        },
        "3.3.0": {
          "photon": {
            "serial-detector": true
          },
          "electron": {
            "serial-detector": true
          },
          "argon": {
            "serial-detector": true
          },
          "boron": {
            "serial-detector": true
          }
        },
        "5.0.1": {
          "argon": {
            "serial-detector": true
          },
          "boron": {
            "serial-detector": true
          },
          "bsom": {
            "serial-detector": true
          },
          "b5som": {
            "serial-detector": true
          },
          "tracker": {
            "serial-detector": true
          },
          "p2": {
            "serial-detector": true
          }
        },
        "4.0.0": {
          "argon": {
            "serial-detector": true
          },
          "boron": {
            "serial-detector": true
          },
          "bsom": {
            "serial-detector": true
          },
          "b5som": {
            "serial-detector": true
          },
          "tracker": {
            "serial-detector": true
          },
          "esomx": {
            "serial-detector": true
          }
        },
        "5.6.0": {
          "argon": {
            "serial-detector": true
          },
          "boron": {
            "serial-detector": true
          },
          "bsom": {
            "serial-detector": true
          },
          "b5som": {
            "serial-detector": true
          },
          "tracker": {
            "serial-detector": true
          },
          "p2": {
            "serial-detector": true
          }
        },
        "4.2.0": {
          "argon": {
            "serial-detector": true
          },
          "boron": {
            "serial-detector": true
          },
          "bsom": {
            "serial-detector": true
          },
          "b5som": {
            "serial-detector": true
          },
          "tracker": {
            "serial-detector": true
          },
          "esomx": {
            "serial-detector": true
          }
        }
      },
      "added": "2022-06-17T10:16:53.922Z"
    }
  },
  "readme": "Particle AS3935 (I2C)\n=====================\n\nA library for communicating with (and hopefully making use of) the\n[AMS Franklin Lightning Sensor](http://ams.com/eng/Products/Lightning-Sensor/Franklin-Lightning-Sensor/AS3935).\n\nThe library was written and tested on a Particle Photon, but should work on an\nArduino with little to no modification.\n\n## Usage\n\nReading data off of the sensor is quite simple, and is easy to get started if\nyou can already connect your AS3935 to your processor.\n\n### Connecting\n\nI've used the AS3935 breakout board by [Embedded Adventures](http://www.embeddedadventures.com/as3935_lightning_sensor_module_mod-1016.html),\nthough others have had success with breakout boards by other suppliers (it's all\nthe same sensor).\n\nEverything required is available on the breakout board, so you only need a way\nto connect your processor to the breakout board.\n\n#### On a Particle\n\n| AS3935 Pin     | Particle Pin                        |\n| -------------: | :---------------------------------- |\n| 4 (GND)        | GND                                 |\n| 5 (VDD/VCC)    | 3V3                                 |\n| 10 (IRQ)       | D2 (or any other interrupt pin)     |\n| 11 (I2CL/SCL)  | D1 (SCL)                            |\n| 13 (I2CD/SDA)  | D0 (SDA)                            |\n\n### Software\n\nThe software on a Particle Photon is quite simple, and short enough to include\nhere:\n```c++\n#include <AS3935.h>\n\n// Create the AS3935 object globally\nAS3935::AS3935 sensor(0x00, D2);\n\nvoid setup() {\n  Serial.begin(9600);\n  Serial.println(\"Starting....\");\n\n  // Enable I2C and interrupts\n  sensor.begin();\n\n  // Calibrate the sensor, and set the value of the tuning capacitor\n  sensor.calibrate(0x08);\n\n  // Set a noise floor of 0\n  sensor.setNoiseFloor(0);\n}\n\nvoid loop() {\n  // If an interrupt triggered and is waiting for us to do something\n  if(sensor.waitingInterrupt()){\n    switch(sensor.getInterrupt()){\n      // If there was a lightning strike\n      case AS3935::INT_STRIKE:\n        Serial.println(\"Lightning\");\n        break;\n      // If the interrupt was triggered by a disturber, we should mask them\n      case AS3935::INT_DISTURBER:\n        Serial.println(\"Disturber - masking\");\n        sensor.setMaskDisturbers(true);\n        break;\n      // If the interrupt was caused by noise, raise the noise floor\n      case AS3935::INT_NOISE:\n        Serial.println(\"Noise\");\n        sensor.raiseNoiseFloor();\n        break;\n      // This should never execute, but we'll put it here because best practices\n      default:\n        break;\n    }\n  }\n}\n```\n\n## Reference\n\n### `AS3935`\n\n`AS3935::AS3935 sensor(0x00, D2);`\n\nInstantiate an instance of AS3935 to interact with a sensor.\n\nArguments are the I2C address and the pin where the interrupt pin is connected.\n\n### `begin`\n\n`sensor.begin();`\n\nEnables I2C and sets up the interrupt routine. This is normally called in your\nsetup() routine.\n\n### `calibrate`\n\n`sensor.calibrate(0x08);`\n\nPass one argument (an unsigned integer) representing the value to set the\ntuning capacitor to.\n\n### `reset`\n\n`sensor.reset();`\n\nReset all of the sensor settings as though it was just powered up.\n\n### `getInterrupt`\n\n`reason = sensor.getInterrupt();`\n\nReturns an unsigned integer representing the reason an interrupt was triggered.\nCalling this method resets `waitingInterrupt()` to false. After calling, the\nvalue returned is not available again until an interrupt is read.\n\nReturned values can be compared to constants (reference below) to easily\ndetermine what caused the interrupt.\n\n### `getDistance`\n\n`distance = sensor.getDistance();`\n\nReturns an unsigned integer with the estimated distance to the lightning strike\n\n### `getNoiseFloor`\n\n`noisefloor = sensor.getNoiseFloor();`\n\nReturns an unsigned integer representing the current noise floor.\n\n### `setNoiseFloor`\n\n`sensor.setNoiseFloor(2);`\n\nPass one unsigned integer (ranging 0-7) as an argument representing the noise\nfloor to set.\n\nReturns a boolean value indicating success or failure.\n\n### `raiseNoiseFloor`\n\n`sensor.raiseNoiseFloor();`\n\nRaise the noise floor by one increment. Returns the new noise floor as an\nunsigned integer ranging from 0-7. If the noise floor is 7 before calling this,\nnothing will happen and it will return 7.\n\n### `lowerNoiseFloor`\n\n`sensor.lowerNoiseFloor();`\n\nLower the noise floor by one increment. Returns the new noise floor as an\nunsigned integer ranging from 0-7. If the noise floor is 0 before calling this,\nnothing will happen and it will return 0.\n\n### `getMinStrikes`\n\n`minStrikes = sensor.getMinStrikes();`\n\nGet the minimum number of strikes that must be sensed before an interrupt is\nraised. A value of 255 indicates an error.\n\n### `setMinStrikes`\n\n`sensor.setMinStrikes(5);`\n\nSet the minimum number of detected lightning strikes required to trigger an\ninterrupt. Valid values are 1, 5, 9, or 16. Returns boolean true if the\noperation is successful.\n\n### `getIndoors`\n\n`indoors = sensor.getIndoors();`\n\nDetermine if the sensor is configured as indoors or not. Returns boolean\ntrue if it's configured as indoors.\n\n### `setIndoors`\n\n`sensor.setIndoors(true);`\n\nPass boolean true to set the sensor as being indoors, false for outdoors.\nReturns true if successful.\n\n### `getMaskDisturbers`\n\n`distrubersMasked = sensor.getMaskDisturbers();`\n\nReturns boolean true if disturbers are masked, false if they aren't.\n\n### `setMaskDisturbers`\n\n`sensor.setMaskDisturbers(true);`\n\nPass boolean true to mask disturbers, false to unmask disturbers. Returns\nboolean true if successful.\n\n### `getDispLco`\n\n`dispLCO = sensor.getDispLco();`\n\nReturns boolean true if the local oscillator is exposed on the interrupt pin.\n\n### `setDispLco`\n\n`sensor.setDispLco(false);`\n\nPass boolean true to expose the local oscillator on the interrupt pin. This\nshould only be used for tuning and troubleshooting with some sort of\ninstrumentation connected to the interrupt pin.\n\n### `waitingInterrupt`\n\n`interruptWaiting = sensor.waitingInterrupt();`\n\nReturns true if an interrupt is waiting to be read. It can be reset to false\nonly by calling `getInterrupt()`.\n\n### Constants\n\n`AS3935::INT_STRIKE`: The value returned when the sensor detects a lightning strike.\n`AS3935::INT_DISTURBER`: The value returned when the sensor detects a disturber.\n`AS3935::INT_NOISE`: The value returned when the sensor detects noise.\n\n## Contributing\n\nFeel free to send pull requests, or file bugs if you discover any. There isn't\nany automated testing yet, but there hopefully will be soon.\n",
  "allVersions": [
    "0.2.1",
    "0.1.1",
    "0.1.0"
  ]
}
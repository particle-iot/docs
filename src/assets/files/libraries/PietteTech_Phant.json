{
  "type": "libraries",
  "id": "PietteTech_Phant",
  "links": {
    "download": "https://api.particle.io/v1/libraries/PietteTech_Phant/archive/0.0.3.tar.gz"
  },
  "attributes": {
    "name": "PietteTech_Phant",
    "version": "0.0.3",
    "installs": 164,
    "license": "GPL v3 (http://www.gnu.org/licenses/gpl.html)",
    "author": "Scott Piette, Piette Technologies LTD (scott.piette@gmail.com)",
    "sentence": "Phant database library for Spark",
    "url": "https://github.com/piettetech/piettetech_phant",
    "repository": "https://github.com/piettetech/piettetech_phant.git",
    "architectures": [],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "p",
  "cardUrl": "/cards/libraries/p/PietteTech_Phant",
  "versions": {
    "0.0.3": {
      "builds": {
        "2.0.1": {
          "photon": {
            "phanttest": true
          },
          "electron": {
            "phanttest": false
          },
          "argon": {
            "phanttest": true
          },
          "boron": {
            "phanttest": false
          }
        },
        "1.5.2": {
          "photon": {
            "phanttest": true
          },
          "electron": {
            "phanttest": false
          },
          "argon": {
            "phanttest": true
          },
          "boron": {
            "phanttest": false
          }
        }
      }
    }
  },
  "readme": "<html>\n  <head>\n    <meta http-equiv=\"content-type\" content=\"text/html;\n      charset=windows-1252\">\n    <title></title>\n  </head>\n  <body>\n    <b><big>Phant database library for Spark </big><br>\n    </b>\n    <p> </p>\n    <p>Supports clearing and writing data to Phant data streams</p>\n    Scott Piette, Piette Technologies, LTD - scott.piette@gmail.com<br>\n    Copyright 2014 Piette Technologies, LTD<br>\n    <br>\n    Project supported by Open Source Beehives Project<a\n      href=\"http://www.opensourcebeehives.net\">\n      http://www.opensourcebeehives.net</a><br>\n    <br>\n    Oct 16, 2014&nbsp; - Initial release for Spark Core<br>\n    <br>\n    <table border=\"1\" cellpadding=\"2\" cellspacing=\"2\" width=\"100%\">\n      <tbody>\n        <tr>\n          <td valign=\"top\">VERSION:</td>\n          <td valign=\"top\">0.3<br>\n          </td>\n        </tr>\n        <tr>\n          <td valign=\"top\">PURPOSE:</td>\n          <td valign=\"top\">Phant database communication library for\n            Spark<br>\n          </td>\n        </tr>\n        <tr>\n          <td valign=\"top\">LICENSE:</td>\n          <td valign=\"top\">GPL v3 (http://www.gnu.org/licenses/gpl.html)</td>\n        </tr>\n      </tbody>\n    </table>\n    <br>\n    <p> BASED ON:<br>\n      Phant Arduino Library <a href=\"https://github.com/niesteszeck\">https://github.com/sparkfun/phant-arduino</a><br>\n    </p>\n    <p>PHANT GITHUB: &nbsp; &nbsp; &nbsp;<a\n        href=\"https://github.com/sparkfun/phant\">\n        https://github.com/sparkfun/phant</a><br>\n    </p>\n    METHODS:\n    <table border=\"1\" cellpadding=\"2\" cellspacing=\"2\"\n      width=\"100%\">\n      <tbody>\n        <tr>\n          <td valign=\"top\">sendData(method)<br>\n          </td>\n          <td valign=\"top\">sends data to Phant server using the method\n            passed, defaults to POST<br>\n          </td>\n        </tr>\n        <tr>\n          <td valign=\"top\">addData(name, value)<br>\n          </td>\n          <td valign=\"top\">adds a data=value pair to the stream, returns the\n            number of bytes added or '0' on error.&nbsp;\n            After you have added all data send the stream using sendData<br>\n          </td>\n        </tr>\n        <tr>\n          <td valign=\"top\">getError()<br>\n          </td>\n          <td valign=\"top\">returns the human readable text from the\n            Phant server resulting from the last sendData<br>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <br>\n    NOTES:<br>\n    <table border=\"1\" cellpadding=\"2\" cellspacing=\"2\" width=\"100%\">\n      <tbody>\n        <tr>\n          <td>1</td>\n          <td> Does not use dynamic Strings as that can cause memory\n            fragmentation</td>\n        </tr>\n        <tr>\n          <td>2</td>\n          <td> HTTP Header is consolidated into one 256 byte data buffer\n            to improve performance</td>\n        </tr>\n        <tr>\n          <td>3</td>\n          <td> POST and CLEAR use the same header buffer - modified\n            before sending</td>\n        </tr>\n        <tr>\n          <td>4</td>\n          <td> All POST data gets added to a 512 byte internal content\n            buffer</td>\n        </tr>\n        <tr>\n          <td>5</td>\n          <td> HTTP and Phant responses from server are read using block\n            reads into the remaining space from internal content buffer,\n            or if space &lt; 128 bytes we read using single byte reads\n            from stream</td>\n        </tr>\n        <tr>\n          <td>6</td>\n          <td> sendData returns 1=success from Phant server or 0=failure\n            if connect fails, no HTTP response, or Phant server returns\n            status = 0</td>\n        </tr>\n        <tr>\n          <td>7</td>\n          <td> Currently only supports CLEAR STREAM,&nbsp; and POST\n            methods<br>\n          </td>\n        </tr>\n        <tr>\n          <td>8</td>\n          <td> There is a 64 byte buffer for the Phant response message.\n            Use getError() to get the Phant response text.</td>\n        </tr>\n        <tr>\n          <td>9</td>\n          <td> The response buffer is used as a temporary buffer for\n            addData so it's only valid after the sendData call and\n            before any addData calls</td>\n        </tr>\n      </tbody>\n    </table>\n    <br>\n    <br>\n    <p> </p>\n  </body>\n</html>\n",
  "allVersions": [
    "0.0.3",
    "0.0.2"
  ]
}
{
  "type": "libraries",
  "id": "ard-stdlib",
  "links": {
    "download": "https://api.particle.io/v1/libraries/ard-stdlib/archive/1.0.0.tar.gz"
  },
  "attributes": {
    "name": "ard-stdlib",
    "version": "1.0.0",
    "installs": 1605,
    "license": "GPL-3.0 License.",
    "author": "Vladimir Talybin",
    "sentence": "Type traits and utilities from C++17/20/23 and experimental TS.",
    "url": "https://github.com/talybin/ard-stdlib",
    "repository": "https://github.com/talybin/ard-stdlib.git",
    "architectures": [
      "particle-photon",
      "particle-electron"
    ],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "a",
  "cardUrl": "/reference/device-os/libraries/a/ard-stdlib",
  "versions": {
    "1.0.0": {
      "builds": {},
      "noExamples": true,
      "added": "2022-06-17T10:16:54.060Z"
    }
  },
  "readme": "## ARD-STDLIB\n\nLibrary of type traits and utilities from C++17/20/23 and experimental TS.\n\n### Currently supporting\n\nvariant.hpp\n\n* [variant](https://en.cppreference.com/w/cpp/utility/variant)\n\noptional.hpp\n\n* [optional](https://en.cppreference.com/w/cpp/utility/optional)\n\nstring_view.hpp\n\n* [string_view](https://en.cppreference.com/w/cpp/string/basic_string_view)\n\nmemory.hpp\n\n* [destroy_at](https://en.cppreference.com/w/cpp/memory/destroy_at)\n\nutility.hpp\n\n* [in_place_t, in_place_type_t, in_place_index_t](https://en.cppreference.com/w/cpp/utility/in_place)\n\ntype_traits.hpp\n\n* [void_t](https://en.cppreference.com/w/cpp/types/void_t)\n* [bool_constant](https://en.cppreference.com/w/cpp/types/integral_constant)\n* [conjunction](https://en.cppreference.com/w/cpp/types/conjunction)\n* [disjunction](https://en.cppreference.com/w/cpp/types/disjunction)\n* [negation](https://en.cppreference.com/w/cpp/types/negation)\n* [invoke_result](https://en.cppreference.com/w/cpp/types/result_of)\n* [is_invocable, is_invocable_r, is_nothrow_invocable, is_nothrow_invocable_r](https://en.cppreference.com/w/cpp/types/is_invocable)\n* [type_identity](https://en.cppreference.com/w/cpp/types/type_identity)\n* [remove_cvref](https://en.cppreference.com/w/cpp/types/remove_cvref)\n* [is_swappable, is_nothrow_swappable, is_swappable_with, is_nothrow_swappable_with](https://en.cppreference.com/w/cpp/types/is_swappable)\n* [nonesuch](https://en.cppreference.com/w/cpp/experimental/nonesuch)\n* [is_detected, detected_or, is_detected_exact, is_detected_convertible](https://en.cppreference.com/w/cpp/experimental/is_detected)\n\nfunctional.hpp\n\n* [invoke](https://en.cppreference.com/w/cpp/utility/functional/invoke)\n\n### Get started\n\nAll header files has the same name as original but with postfix `.hpp`. For example, to include variant use `variant.hpp`.\n\n```cpp\n#include \"Particle.h\"\n#include \"variant.hpp\"\n\nvoid setup()\n{\n    std::variant<int, float> v;\n    v = 19.5f; // v contains float\n\n    bool success = std::visit((link unavailable in preview) {\n        return Particle.publish(\"temperature\", String::format(\"%.1f\", temp));\n    }, v);\n}\n\nvoid loop() { }\n```\n\n### Exception handling\n\nAs you may know, exceptions are disabled on Arduino. Instead of throwing exception, library will call special handler function with exception as argument. It is defined in `exception.hpp` and in case of an exception, will abort the program (call `std::abort`).\n\nTo catch exceptions override exception handler.\n\n```cpp\n#include \"Particle.h\"\n#include \"exception.hpp\"\n\nvoid ard::on_exception(const std::exception& ex) {\n    // Log exception\n    Particle.publish(\"Error\", ex.what(), PRIVATE);\n    // Reboot\n    System.reset();\n}\n\nvoid setup() { }\nvoid loop() { }\n```\n\n**Note!** The exception handler is located in `ard` namespace.\n\n",
  "allVersions": [
    "1.0.0"
  ]
}
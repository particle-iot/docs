{
  "type": "libraries",
  "id": "tsl2561",
  "links": {
    "download": "https://api.particle.io/v1/libraries/tsl2561/archive/1.2.1.tar.gz"
  },
  "attributes": {
    "name": "tsl2561",
    "version": "1.2.1",
    "installs": 5171,
    "license": "GPL v3",
    "author": "Jaafar Benabdallah",
    "sentence": "Migrated to libs v2 format and added more comments and description",
    "architectures": [],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "t",
  "cardUrl": "/reference/device-os/libraries/t/tsl2561",
  "versions": {
    "1.2.1": {
      "builds": {
        "2.0.1": {
          "photon": {
            "demo_tsl2561": true
          },
          "electron": {
            "demo_tsl2561": true
          },
          "argon": {
            "demo_tsl2561": true
          },
          "boron": {
            "demo_tsl2561": true
          }
        },
        "1.5.2": {
          "photon": {
            "demo_tsl2561": true
          },
          "electron": {
            "demo_tsl2561": true
          },
          "argon": {
            "demo_tsl2561": true
          },
          "boron": {
            "demo_tsl2561": true
          }
        },
        "3.3.0": {
          "photon": {
            "demo_tsl2561": true
          },
          "electron": {
            "demo_tsl2561": true
          },
          "argon": {
            "demo_tsl2561": true
          },
          "boron": {
            "demo_tsl2561": true
          }
        },
        "5.0.1": {
          "argon": {
            "demo_tsl2561": true
          },
          "boron": {
            "demo_tsl2561": true
          },
          "bsom": {
            "demo_tsl2561": true
          },
          "b5som": {
            "demo_tsl2561": true
          },
          "tracker": {
            "demo_tsl2561": true
          },
          "p2": {
            "demo_tsl2561": true
          }
        },
        "4.0.0": {
          "argon": {
            "demo_tsl2561": true
          },
          "boron": {
            "demo_tsl2561": true
          },
          "bsom": {
            "demo_tsl2561": true
          },
          "b5som": {
            "demo_tsl2561": true
          },
          "tracker": {
            "demo_tsl2561": true
          },
          "esomx": {
            "demo_tsl2561": true
          }
        },
        "5.6.0": {
          "argon": {
            "demo_tsl2561": true
          },
          "boron": {
            "demo_tsl2561": true
          },
          "bsom": {
            "demo_tsl2561": true
          },
          "b5som": {
            "demo_tsl2561": true
          },
          "tracker": {
            "demo_tsl2561": true
          },
          "p2": {
            "demo_tsl2561": true
          }
        },
        "4.2.0": {
          "argon": {
            "demo_tsl2561": true
          },
          "boron": {
            "demo_tsl2561": true
          },
          "bsom": {
            "demo_tsl2561": true
          },
          "b5som": {
            "demo_tsl2561": true
          },
          "tracker": {
            "demo_tsl2561": true
          },
          "esomx": {
            "demo_tsl2561": true
          }
        }
      },
      "added": "2022-06-17T10:16:53.816Z"
    }
  },
  "readme": "# TSL2561 light sensor\n_TSL2561 light sensor with I2C interface library for Particle IoT development boards_\n\n## Typical usage\n\nConnect a Photon/Electron/ReadBear Duo/Bluz DK to a TSL2561 breakout (Adafruit's or Sparkfun's for instance) and use the library to get the ambient visible and/or IR light levels + illuminance value in lux.\n\nHookup guide: pretty straightforward but you can follow this guide by Adafruit: https://learn.adafruit.com/tsl2561?view=all \n(It's using an Arduino, but the steps are the same, including the use of 3.3v supply voltage for the sensor)\n\nPhoton/Electron                  tsl2561\nD1                        <---->  SCL\nD0                        <---->  SDA\nNot connected (floating)  <---->  ADDR\n\nExample of usage:\n```\n#include \"tsl2561.h\"\n\n// declare a TSL2561 object with I2C address 0x39 (ADDR pin floating)\nTSL2561 tsl(TSL2561_ADDR);\n\n// Light sensor settings vars\nuint16_t integrationTime;\nbool autoGainOn = True;\n\n// define a frequency of readings every x ms\nsensePeriod = 1000;\n\nvoid setup() {\n    tsl.begin();\n    tsl.setPowerUp();\n    // x1 gain, 101ms integration time\n    tsl.setTiming(false,1,integrationTime);\n\n    // set illuminance as a cloud variable\n    Particle.variable(\"illuminance\", illuminance);\n\n    // initialise a timer\n    senseTime = millis();\n}\n\nvoid loop() {\n\n  if ((millis() - senseTime) > sensePeriod) {\n\n    // get raw data\n    uint16_t _broadband, _ir;\n    if (tsl.getData(_broadband,_ir,autoGainOn)){\n\n      // now get the illuminance value in lux\n      tsl.getLux(integrationTime,_broadband,_ir,illuminance);      \n    }\n  }\n}\n```\n\nTested on Particle Photon and Adafruit breakout board: http://www.adafruit.com/products/439\n\nThis library re-uses code developed orginally by Sparkfun Electronics and Adafruit in their respective libraries to operate this device on Arduino. The merit goes all to them for making this code available.\nI have also made the following contributions/modification on this library:\n\n1- modified SparkFun's TSL2561 arduino library to work on Photon\n\n2- changed the setTiming function for a simpler version and begin(void) to adapt to the new class public variables\n\n3- added the autogain feature implemented in Adafruit's Arduino library in the getData function (with modifications)\n\n4- added Adafruit's integer based illuminance value (lux) calculating (pretty close to the float based calculation\n\n5- adopted Adafruit begin(void) function to check that the  device is connected by retrieving and checking the device ID\n\n\n## Example\n\n**Read illuminance over Particle's cloud :**\nThis example shows most of the features of this library.\n\nCloud Function:\n\n`setExposure(int gain, int integrationTimeSwitch)`\n\ngain:\n\n0: gain x1, 1: gain x16, 2: auto gain\n\nintegrationTimeSwitch\n\n0: 14ms, 1: 101ms, 2: 402ms\n\nCloud Variables:\n\nstatus: OK or error code\n\ninteg_time: integration time in ms\n\ngain: gain setting: x1 or x16\n\nauto_gain: auto gain enabled: Yes/No\n\nilluminance: illuminance value in lux as a double\n\nint_ill: illuminance value in lux as an Integer\n\n## Reference\n\n###`TSL2561(uint8_t i2c_address);`\n\n Declare a TSL2561 object\n \n Parameters:\n \n TSL2561_ADDR_0 (0x29 address with '0', connected to GND)\n \n TSL2561_ADDR   (0x39 default address, pin floating)\n \n TSL2561_ADDR_1 (0x49 address with '1' connected to VIN)\n \n\n###`boolean begin(void);`\n\nInitialize TSL2561 library\n\nReturns:\n\nTrue if the device is detected\n\n\n###`boolean setPowerUp(void);`\n\nTurn on TSL2561, begin integration\n\nReturns:\n\nTrue(1) if successful, False (0) if there was an I2C error\n(Also see getError() below)\n\n\n###`boolean setPowerDown(void);`\n\n Turn off TSL2561\n \n Returns:\n \n  True (1) if successful, False (0) if there was an I2C error\n (Also see getError() below)\n \n\n###`boolean setTiming(boolean gain, uint8_t time);`\n\n  Configure sensor's settings\n  \n  Parameters:\n  \n    If gain = False (0), device is set to low gain (1X)\n    \n    If gain = True (1), device is set to high gain (16X)\n    \n    If time = 0, integration will be 13.7ms\n    \n    If time = 1, integration will be 101ms\n    \n    If time = 2, integration will be 402ms\n    \n    If time = 3, use manual start / stop\n    \n Returns true (1) if successful, false (0) if there was an I2C error\n (Also see getError() below)\n\n###`boolean setTiming(boolean gain, uint8_t time, uint16_t &ms);`\n\n Identical to above command, except ms is set to selected integration time\n \n Parameters:\n \n   If gain = False (0), device is set to low gain (1X)\n   \n   If gain = True (1), device is set to high gain (16X)\n   \n   If time = 0, integration will be 13.7ms\n   \n   If time = 1, integration will be 101ms\n   \n   If time = 2, integration will be 402ms\n   \n   If time = 3, use manual start / stop (ms = 0)\n   \n   ms will be set to requested integration time\n   \n Returns True (1) if successful, False (0) if there was an I2C error\n (Also see getError() below)\n\n\n###`boolean manualStart(void);`\n\n Starts a manual integration period\n \n After running this command, you must manually stop integration with manualStop()\n \n Internally sets integration time to 3 for manual integration (gain is unchanged)\n \n Returns True (1) if successful, False (0) if there was an I2C error\n (Also see getError() below)\n\n###`boolean manualStop(void);`\n\n Stops a manual integration period\n \n Returns true (1) if successful, false (0) if there was an I2C error\n (Also see getError() below)\n\n###`boolean getData(uint16_t &CH0, uint16_t &CH1, bool autoGain);`\n\n Retrieve raw integration results\n \n Parameters:\n \n  If autoGain is True, auto gain is enabled and the gain will be adjusted according to brightness\n  \n Returns:\n \n  CH0 and CH1 will be set to integration results\n  \n  Returns True (1) if successful, false (0) if there was an I2C error\n  (Also see getError() below)\n\n###`boolean getLux(uint16_t ms, uint16_t CH0, uint16_t CH1, double &lux);`\n\n Convert raw data to illuminance value in lux\n \n Parameters;\n \n  ms: integration time in ms, from setTiming() or from manual integration\n  \n  CH0, CH1: results from getData()\n  \n  lux will be set to resulting lux calculation\n  \n Returns True (1) if calculation was successful\n \n RETURNS False (0) AND lux = 0.0 if either sensor (visible and IR) was saturated (0XFFFF)\n\n###`boolean getLuxInt(uint16_t CH0, uint16_t CH1, uint32_t &lux);`\n\n Convert raw data to lux as integer\n \n This is not available for custom integration time\n \n This function uses integer based approximate calculation but accuracy compared\n \n To getLux:float is very good (max 2%, probably smaller than sensor accuracy)\n \n CH0, CH1: results from getData()\n \n lux will be set to illuminance value in lux\n \n Returns True (1) if calculation was successful\n or False (0) AND lux = 0 if either sensor was saturated(0XFFFF)\n\n###`boolean setInterruptControl(uint8_t control, uint8_t persist);`\n\n Sets up interrupt operations\n \n Parameters:\n \n   If control = 0, interrupt output disabled\n   \n   If control = 1, use level interrupt, see setInterruptThreshold()\n   \n   If persist = 0, every integration cycle generates an interrupt\n   \n   If persist = 1, any value outside of threshold generates an interrupt\n   \n   If persist = 2 to 15, value must be outside of threshold for 2 to 15 integration cycles\n   \n Returns True (1) if successful, False (0) if there was an I2C error\n (Also see getError() below)\n \n\n###`boolean setInterruptThreshold(uint16_t low, uint16_t high);`\n\n Set interrupt thresholds (channel 0 only)\n \n Parameters:\n \n low, high: 16-bit threshold values\n \n Returns True (1) if successful, False (0) if there was an I2C error\n (Also see getError() below)\n\n\n###`boolean clearInterrupt(void);`\n\n Clears an active interrupt\n \n Returns True (1) if successful, False (0) if there was an I2C error\n (Also see getError() below)\n\n\n###`boolean getID(uint8_t &ID);`\n\n Retrieves part and revision code from TSL2561\n \n Sets ID to part ID (see datasheet)\n \n Returns True (1) if successful, False (0) if there was an I2C error\n (Also see getError() below)\n\n\n###`uint8_t getError(void);`\n\n If any library command fails, you can retrieve an error code using this function.\n Codes are from the wire library.\n \n Returns:\n \n   0 = Success\n   \n   1 = Data too long to fit in transmit buffer\n   \n   2 = Received NACK on transmit of address\n   \n   3 = Received NACK on transmit of data\n   \n   4 = Other error\n",
  "allVersions": [
    "1.2.1",
    "1.2.0",
    "1.0.0"
  ]
}
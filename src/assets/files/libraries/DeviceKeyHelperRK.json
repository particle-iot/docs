{
  "type": "libraries",
  "id": "DeviceKeyHelperRK",
  "links": {
    "download": "https://api.particle.io/v1/libraries/DeviceKeyHelperRK/archive/0.0.4.tar.gz"
  },
  "attributes": {
    "name": "DeviceKeyHelperRK",
    "version": "0.0.4",
    "installs": 3764,
    "license": "MIT",
    "author": "rickkas7@rickkas7.com",
    "sentence": "Functions to save and restore the device keys on Particle device",
    "url": "https://github.com/rickkas7/DeviceKeyHelperRK",
    "repository": "https://github.com/rickkas7/DeviceKeyHelperRK.git",
    "architectures": [
      "*"
    ],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "d",
  "cardUrl": "/cards/libraries/d/DeviceKeyHelperRK",
  "versions": {
    "0.0.4": {
      "builds": {
        "2.0.1": {
          "photon": {
            "1-simple-DeviceKeyHelperRK": true
          },
          "electron": {
            "1-simple-DeviceKeyHelperRK": true
          },
          "argon": {
            "1-simple-DeviceKeyHelperRK": true
          },
          "boron": {
            "1-simple-DeviceKeyHelperRK": true
          }
        },
        "1.5.2": {
          "photon": {
            "1-simple-DeviceKeyHelperRK": true
          },
          "electron": {
            "1-simple-DeviceKeyHelperRK": true
          },
          "argon": {
            "1-simple-DeviceKeyHelperRK": true
          },
          "boron": {
            "1-simple-DeviceKeyHelperRK": true
          }
        },
        "3.3.0": {
          "photon": {
            "1-simple-DeviceKeyHelperRK": true
          },
          "electron": {
            "1-simple-DeviceKeyHelperRK": true
          },
          "argon": {
            "1-simple-DeviceKeyHelperRK": true
          },
          "boron": {
            "1-simple-DeviceKeyHelperRK": true
          }
        }
      },
      "added": "2022-06-17T10:16:53.833Z"
    }
  },
  "readme": "# Device Key Helper\n\n**Warning: This is an early development version of this code and there could still be bugs.**\n\n- Location: https://github.com/rickkas7/DeviceKeyHelperRK\n- License: MIT (Free for use in open-source and closed-source projects, including commercial products.)\n\n## Background\n\n### About public key cryptography\n\nParticle devices like the Photon and Electron authenticate with the Particle cloud using public key cryptography. Each side has a public key and a private key. The device private key is only stored on the device but the public key can be shared even over insecure channels. You can share it with everyone, even. The Particle cloud knows every device's public key.\n\nFor the cloud side, the cloud private key is kept secret, but all devices know the cloud public key. It's publicly available on a web site and in the Particle CLI source. The cloud public key is not a secret.\n\nWhen a device handshakes, it encrypts some data using the device private key and the cloud public key. The cloud is able to decrypt this because it knows the cloud private key and the device public key (the opposite side). It then sends data back to the device encrypted with the cloud private key and the device public key.\n\nThat data can only be decrypted by the device because decrypting it requires the cloud public key and the device private key, and only the device knows the device private key. \n\nThis process assures that the cloud is who it says it is, not a rogue cloud, because only the real cloud knows its private key. And the cloud knows the device is authentic, because only the device knows its private key.\n\nAnd a third-party snooping on the process can't gain anything because the private keys never leave the respective sides. A man-in-the-middle can't hijack or spoof either side because he wouldn't know the private keys.\n\nThis process requires a lot of computation, and is only used to authenticate both sides and set up a session key to encrypt the data for the connection using fast symmetric encryption like AES.\n\n### The device key problem\n\nThe private device key is stored in the configuration flash on the device, and only there. But what happens if the flash is erased or corrupted?\n\nIn that case the device will generate a new private and public device key. They have to be generated in pairs because they're cryptographically connected, each private key has a specific public key that's able to decrypt its data.\n\nWhen the device goes to connect with the cloud using its new device keys, however, there's a problem: the public key stored on the cloud doesn't match the current public key, and it can't decrypt the data. It assumes that some rogue device is trying to impersonate a different device and shuts down the connection.\n\n### particle keys doctor\n\nIf you've experienced this, you probably know that you fix this in DFU mode (blinking yellow) by using using:\n\n```\nparticle keys doctor YOUR_DEVICE_ID\n```\n\nWhat this does is upload your new device public key to the cloud, so they match again.\n\n### Why can't the device just do it itself?\n\nThere are two reasons:\n\n- The keys upload uses TLS/SSL encryption to the Particle API and the Photon and Electron don't support that very well.\n- When you use the Particle CLI, you need to be logged into the account that has claimed the device.\n\nThe latter is the real problem. Quite intentionally, devices don't contain login credentials (password or access token) for the account that it is claimed to. If it did, you'd be able to steal a device and take over the account, and that would be bad. So there are no access tokens stored on the device, so there is no way to authenticate a change of key from the device itself.\n\n### The cloud public key\n\nThe cloud public key can also be erased. This is fixed using:\n\n```\nparticle keys server\n```\n\nSystem firmware 0.7.0 and later can repair the cloud public key by itself, because that's not a secret and it's the same for every device class. (Photons and Electrons have different cloud public keys, but every Photon has the same cloud public key.)\n\n\n## Key recovery to the rescue\n\nWhat if, instead of generating a new, incompatible device private key, you just restored the old one? That's what this library does.\n\n### Why doesn't the device just do that itself?\n\nThe device private key is kind of large and specific to each device. While there's a demo of storing it in the emulated EEPROM, that's not the best location as the ideal location is not in the STM32 flash. Also, it takes over a good chunk of the EEPROM, especially on the Photon and P1.\n\nIdeally, this requires an external flash (SD card or SPI flash) or something like a FRAM. Since that's not standard equipment, it's not practical to include this in system firmware.\n\n### How the library works\n\nYou instantiate an object, usually as a global variable, that specifies the storage medium and other parameters specific to that medium.\n\nFor example, for EEPROM, the offset to store at:\n\n```\n// Save and restore the device keys in EEPROM at offset 100 in the EEPROM\nDeviceKeyHelperEEPROM keyHelper(100);\n```\n\nOr for SdFat, the filename to store in:\n\n```\nDeviceKeyHelperSdFat deviceKeyHelper(\"keys\");\n```\n\nThen in setup() you start monitoring:\n\n```\ndeviceKeyHelper.startMonitor();\n```\n\nYou also must do one or both of these things:\n\n- Use SYSTEM\\_MODE(SEMI\\_AUTOMATIC) or SYSTEM\\_MODE(MANUAL)\n- Use SYSTEM\\_THREAD(ENABLED)\n\nThe reason is that in AUTOMATIC with threading disabled, setup() is not run until successfully connected to the cloud so the connection monitor won't be started and the keys recovery will never work.\n\nWhen you successfully connect to the cloud, if the key has been changed the new value will be saved in your storage medium. If you manually do a particle keys doctor, the new key will be automatically saved.\n\nIf you are using 0.8.0 or later, and a keys error occurs, the key will be restored and the device reset.\n\nIf you are using an earlier system firmware version, after three failed connections in a row, the key will be restored and the device reset. This is because there's no way to get the connection error prior to 0.8.0.\n\nA minimum system firmware version of 0.6.1 is required as the cloud connection system events are used internally.\n\n### Simple Example\n\nThe simple example in 1-simple-DeviceKeyHelperRK.cpp stores in EEPROM at a given location:\n\n```\n#include \"Particle.h\"\n\n#include \"DeviceKeyHelperRK.h\"\n\nSYSTEM_MODE(SEMI_AUTOMATIC);\n\nSerialLogHandler logHandler;\n\n// Save and restore the device keys in EEPROM at offset 100 in the EEPROM\nDeviceKeyHelperEEPROM deviceKeyHelper(100);\n\nvoid setup() {\n\n\t// You must call this from setup to start monitoring for keys errors\n\tdeviceKeyHelper.startMonitor();\n\n\t// You either need to use SYSTEM_THREAD(ENABLED) or SYSTEM_MODE(SEMI_AUTOMATIC) because\n\t// in thread disabled AUTOMATIC mode, setup() isn't called until cloud connected and the\n\t// code to monitor the connection would never be started via startMonitor().\n\tParticle.connect();\n}\n\nvoid loop() {\n\n}\n\n```\n\nThe only real code is allocation of the deviceKeyHelper object:\n\n```\nDeviceKeyHelperEEPROM deviceKeyHelper(100);\n```\n\nThis uses the built-in EEPROM emulation and saves and restores the keys to offset 100. \n\nThe size of the data depends on the type of device:\n\n- For Wi-Fi devices (Photon, P1): 1608 bytes\n- For cellular devices (Electron, E series): 328 bytes\n\nAnd you need to start the monitor from setup();\n\n```\n\tdeviceKeyHelper.startMonitor();\n```\n\n\n### SpiffsParticleRK\n\nThe remaining examples are not in the examples directory because they depend on another library. To build, you can use Particle Dev (Atom IDE) or the Particle CLI to build the source in the more-examples directory. For example:\n\n```\ncd more-examples/1-SpiffsParticle-DeviceKeyHelperRK\nparticle compile electron . --saveTo firmware.bin\n```\n\nThe [SpiffsParticleRK](https://github.com/rickkas7/SpiffsParticleRK) library supports SPI-connected NOR flash chips. These are typically tiny 8-SOIC surface mount chips, intended to be included on your own circuit board. There are also breadboard adapters that are available, shown in the examples below.\n\nThe chips are really inexpensive, less than US$0.50 in single quantities for a 1 Mbyte flash. They're available in sizes up to 16 Mbyte.\n\nSPI flash is less expensive than SD cards, and do not need an adapter or card slot. Of course they're not removable.\n\nThe underlying [SpiFlashRK library](https://github.com/rickkas7/SpiFlashRK) library supports SPI NOR flash from\n\n- ISSI, such as a [IS25LQ080B](http://www.digikey.com/product-detail/en/issi-integrated-silicon-solution-inc/IS25LQ080B-JNLE/706-1331-ND/5189766).\n- Winbond, such as a [W25Q32](https://www.digikey.com/product-detail/en/winbond-electronics/W25Q32JVSSIQ/W25Q32JVSSIQ-ND/5803981).\n- Macronix, such as the [MX25L8006EM1I-12G](https://www.digikey.com/product-detail/en/macronix/MX25L8006EM1I-12G/1092-1117-ND/2744800)\n- The external 1 Mbyte flash on the P1 module.\n- Probably others.\n\nUsing it just requires selecting the correct SPI flash chip and the filename to store the keys in:\n\n```\n#include \"Particle.h\"\n\n// Make sure you include SpiffsParticleRK.h before DeviceKeyHelperRK.h, otherwise you won't have support for SpiffsParticle\n#include \"SpiffsParticleRK.h\"\n\n#include \"DeviceKeyHelperRK.h\"\n\nSYSTEM_MODE(SEMI_AUTOMATIC);\n\n// Set a reasonable logging level:\nSerialLogHandler logHandler(LOG_LEVEL_WARN, { // Logging level for non-application messages\n    { \"app\", LOG_LEVEL_INFO }, // Default logging level for all application messages\n    { \"app.spiffs\", LOG_LEVEL_WARN } // Disable spiffs info and trace messages\n});\n\n// Chose a flash configuration:\n// SpiFlashISSI spiFlash(SPI, A2); \t\t// ISSI flash on SPI (A pins)\n// SpiFlashISSI spiFlash(SPI1, D5);\t\t// ISSI flash on SPI1 (D pins)\nSpiFlashMacronix spiFlash(SPI1, D5);\t// Macronix flash on SPI1 (D pins), typical config for E series\n// SpiFlashWinbond spiFlash(SPI, A2);\t// Winbond flash on SPI (A pins)\n// SpiFlashP1 spiFlash;\t\t\t\t\t// P1 external flash inside the P1 module\n\n// Create an object for the SPIFFS file system\nSpiffsParticle fs(spiFlash);\n\nDeviceKeyHelperSpiffsParticle deviceKeyHelper(fs, \"keys\");\n\nvoid setup() {\n\tSerial.begin();\n\n\t// Initialize SPI flash with a volume size of 256K\n\tspiFlash.begin();\n\tfs.withPhysicalSize(256 * 1024);\n\n\t// Mount the SPIFFS file system\n\ts32_t res = fs.mountAndFormatIfNecessary();\n\tLog.info(\"mount res=%ld\", res);\n\n\tif (res == SPIFFS_OK) {\n\t\t// If the file system was mounted, enable monitoring for keys errors\n\t\tdeviceKeyHelper.startMonitor();\n\t}\n\n\t// You either need to use SYSTEM_THREAD(ENABLED) or SYSTEM_MODE(SEMI_AUTOMATIC) because\n\t// in thread disabled AUTOMATIC mode, setup() isn't called until cloud connected and the\n\t// code to monitor the connection would never be started via startMonitor().\n\tParticle.connect();\n}\n\nvoid loop() {\n}\n```\n\nThe code above has this SPI flash chip selected:\n\n```\nSpiFlashMacronix spiFlash(SPI1, D5);    \n```\n\nThis configuration is for the [MX25L8006EM1I-12G](https://www.digikey.com/product-detail/en/macronix/MX25L8006EM1I-12G/1092-1117-ND/2744800), the 0.154\", 3.90mm width 8-SOIC package, that fits on the unpopulated pads on the E series module.\n\n![eseries](images/eseries.png)\n\nHere's a Photon with a SPI flash breakout:\n\n![Photon](images/photon.jpg)\n\n\n### P1 using SpiffsParticleRK\n\nYou can also use [SpiffsParticleRK](https://github.com/rickkas7/SpiffsParticleRK) with the P1 built-in flash.\n\nSee example: more-examples/1-SpiffsParticle-DeviceKeyHelperRK:\n\nThis is the same as the previous example, except you use this device:\n\n```\nSpiFlashP1 spiFlash;\t\t\t\t\t// P1 external flash inside the P1 module\n```\n\n![P1](images/p1.jpg)\n\n### P1 using flashee-eeprom\n\nIf you are already using [flashee-eeprom](https://github.com/m-mcgowan/spark-flashee-eeprom/) to store files in the P1 external flash, you can easily add support for saving keys in it as well:\n\nSee example: more-examples/4-flashee-eeeprom-DeviceKeyHelperRK:\n\n```\n\tFRESULT fResult =  Flashee::Devices::createFATRegion(0, 4096*256, &fs);\n\tif (fResult == FR_OK) {\n\t\t// Start monitoring for connection failures\n\t\tdeviceKeyHelper.startMonitor();\n\t}\n\telse {\n\t\tLog.info(\"failed to mount flashee file system %d\", fResult);\n\t}\n\n```\n\n\n### SdFat\n\nIf you are using [SdFat](https://github.com/greiman/SdFat-Particle), see example more-examples/2-sdfat-DeviceKeyHelperRK:\n\n```\n#include \"Particle.h\"\n\n// Make sure you include SdFat.h before DeviceKeyHelperRK.h, otherwise you won't have support for SdFat\n#include \"SdFat.h\"\n\n#include \"DeviceKeyHelperRK.h\"\n\nSYSTEM_MODE(SEMI_AUTOMATIC);\n\n// Pick a debug level from one of these two:\nSerialLogHandler logHandler;\n// SerialLogHandler logHandler(LOG_LEVEL_TRACE);\n\n// Primary SPI with DMA\n// SCK => A3, MISO => A4, MOSI => A5, SS => A2 (default)\nSdFat sd;\nconst uint8_t chipSelect = A2;\n\n// Secondary SPI with DMA\n// SCK => D4, MISO => D3, MOSI => D2, SS => D1\n// SdFat sd(1);\n// const uint8_t chipSelect = D1;\n\nDeviceKeyHelperSdFat deviceKeyHelper(\"keys\");\n\nvoid setup() {\n\tSerial.begin();\n\n\tif (sd.begin(chipSelect, SPI_HALF_SPEED)) {\n\t\t// If the file system was mounted, enable monitoring for keys errors\n\t\tdeviceKeyHelper.startMonitor();\n\t}\n\telse {\n\t\tLog.info(\"failed to initialize SD card\");\n\t}\n\n\t// You either need to use SYSTEM_THREAD(ENABLED) or SYSTEM_MODE(SEMI_AUTOMATIC) because\n\t// in thread disabled AUTOMATIC mode, setup() isn't called until cloud connected and the\n\t// code to monitor the connection would never be started via startMonitor().\n\tParticle.connect();\n}\n\nvoid loop() {\n}\n```\n\n![SD card](images/sdcard.jpg)\n\n### MB85RC256V I2C FRAM\n\nThe MB85RC256V 32 Kbyte ferro-electric non-volatile FRAM is another place you can store your data.\n\nSee example: more-examples/3-fram-DeviceKeyHelperRK\n\n```\n#include \"Particle.h\"\n\n// Make sure you include MB85RC256V-FRAM-RK.h before DeviceKeyHelperRK.h, otherwise you won't have support for MB85RC256V\n#include \"MB85RC256V-FRAM-RK.h\"\n\n\n#include \"DeviceKeyHelperRK.h\"\n\nSYSTEM_MODE(SEMI_AUTOMATIC);\n\n// Pick a debug level from one of these two:\nSerialLogHandler logHandler;\n// SerialLogHandler logHandler(LOG_LEVEL_TRACE);\n\n// MB85RC256V FRAM on Wire (D0/D1) with default address (A0-A2 not connected, which have pull-downs\n// on the Adafruit breakout board)\nMB85RC256V fram(Wire, 0);\n\n// Store the device keys starting at address 1000 in the FRAM\nDeviceKeyHelperFRAM deviceKeyHelper(fram, 1000);\n\n\nvoid setup() {\n\tSerial.begin();\n\n\tfram.begin();\n\t// fram.erase();\n\n\t// Start monitoring for connection failures\n\tdeviceKeyHelper.startMonitor();\n\n\t// You either need to use SYSTEM_THREAD(ENABLED) or SYSTEM_MODE(SEMI_AUTOMATIC) because\n\t// in thread disabled AUTOMATIC mode, setup() isn't called until cloud connected and the\n\t// code to monitor the connection would never be started via startMonitor().\n\tParticle.connect();\n}\n\nvoid loop() {\n}\n\n```\n\n![FRAM](images/fram.jpg)\n\nThe pins on the Adafruit breakout connect as typical for an I2C device:\n\n- VCC to 3V3 (can also use VIN for a 5V I2C bus)\n- GND to GND\n- WP not connected (connect to VCC to prevent writes to the memory)\n- SCL connect to D1 (SCL) (blue in the picture)\n- SDA connect to D0 (SDA) (green in the picture)\n- A2 not connected. Connect to VCC to change the I2C address. \n- A1 not connected. Connect to VCC to change the I2C address. \n- A0 not connected. Connect to VCC to change the I2C address. \n\n### Adding your own\n\nYou can add your own storage medium by subclassing DeviceKeyHelper or calling it directly with the appropriate parameters.\n\nTake, for example, the implementation of the DeviceKeyHelperEEPROM:\n\n```\nclass DeviceKeyHelperEEPROM : public DeviceKeyHelper {\npublic:\n\t/**\n\t * @brief Store data in the onboard emulate EEPROM\n\t *\n\t * @param offset The offset to write to.\n\t */\n\tinline DeviceKeyHelperEEPROM(size_t offset) :\n\t\tDeviceKeyHelper([offset](DeviceKeyHelperSavedData *savedData) {\n\t\t\t// Log.info(\"getting %u bytes at %u\", sizeof(*savedData), offset);\n\t\t\tEEPROM.get(offset, *savedData);\n\t\t\treturn true;\n\t\t},\n\t\t[offset](const DeviceKeyHelperSavedData *savedData) {\n\t\t\t// Log.info(\"saving %u bytes at %u\", sizeof(*savedData), offset);\n\t\t\tEEPROM.put(offset, *savedData);\n\t\t\treturn true;\n\t\t}) {\n\t};\n};\n```\n\nAside from the weird syntax caused by the C++ lambdas, all it does is create two lambda functions. The first has the prototype:\n\n```\nbool load(DeviceKeyHelperSavedData *savedData)\n```\n\nAnd the nearly identical save:\n\n```\nbool save(const DeviceKeyHelperSavedData *savedData)\n```\n\nThe functions should return true on success or false on error, such as no saved data existing yet.\n\nYou don't have to use lambda functions, you can use plain C callbacks, but the lambda is particularly handy because of the capture. In the EEPROM example, it captures `[offset]` so the load and save functions have access to it.\n\nThe size of the data to save or load can be found by `sizeof(*savedData)` or `sizeof(DeviceKeyHelperSavedData)`.\n\nWhen loading data, if the size you have saved is not the same as `sizeof(DeviceKeyHelperSavedData)` you should return false.\n\n## Release History\n\n### 0.0.4 (2019-04-29)\n\nThis version fixes a problem that prevents the cellular modem from being reset properly in certain \ncases in 0.8.0 and later. The fallback code from 0.7.0 was executed in addition to actually checking \nfor a keys error, and this can prevent the cellular modem from being power cycled after a number \nof connection failures when the keys are already correct.\n\n\n",
  "allVersions": [
    "0.0.4",
    "0.0.3",
    "0.0.2",
    "0.0.1"
  ]
}
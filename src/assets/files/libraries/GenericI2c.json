{
  "type": "libraries",
  "id": "GenericI2c",
  "links": {
    "download": "https://api.particle.io/v1/libraries/GenericI2c/archive/0.0.2.tar.gz"
  },
  "attributes": {
    "name": "GenericI2c",
    "version": "0.0.2",
    "installs": 1563,
    "license": "GNU",
    "author": "Trey Felton <trey@tomadoh.com>",
    "sentence": "Library providing class for controlling and reading i2c devices",
    "url": "https://github.com/controleverythingcom/generici2c",
    "repository": "https://github.com/controleverythingcom/generici2c.git",
    "architectures": [],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "g",
  "cardUrl": "/reference/device-os/libraries/g/GenericI2c",
  "versions": {
    "0.0.2": {
      "builds": {
        "2.0.1": {
          "photon": {
            "i2c-control": false
          },
          "electron": {
            "i2c-control": false
          },
          "argon": {
            "i2c-control": false
          },
          "boron": {
            "i2c-control": false
          }
        },
        "1.5.2": {
          "photon": {
            "i2c-control": false
          },
          "electron": {
            "i2c-control": false
          },
          "argon": {
            "i2c-control": false
          },
          "boron": {
            "i2c-control": false
          }
        },
        "3.3.0": {
          "photon": {
            "i2c-control": false
          },
          "electron": {
            "i2c-control": false
          },
          "argon": {
            "i2c-control": false
          },
          "boron": {
            "i2c-control": false
          }
        },
        "5.0.1": {
          "argon": {
            "i2c-control": false
          },
          "boron": {
            "i2c-control": false
          },
          "bsom": {
            "i2c-control": false
          },
          "b5som": {
            "i2c-control": false
          },
          "tracker": {
            "i2c-control": false
          },
          "p2": {
            "i2c-control": false
          }
        },
        "4.0.0": {
          "argon": {
            "i2c-control": false
          },
          "boron": {
            "i2c-control": false
          },
          "bsom": {
            "i2c-control": false
          },
          "b5som": {
            "i2c-control": false
          },
          "tracker": {
            "i2c-control": false
          },
          "esomx": {
            "i2c-control": false
          }
        }
      },
      "added": "2022-06-17T10:16:53.920Z"
    }
  },
  "readme": "# About\n\nThis library provides a class called i2cDevices to manage generic control of any i2c slaves connected to the master.\n\n### Developer Information\n---\nNCD has been designing and manufacturing computer control products since 1995. We have specialized in hardware design and manufacturing of Relay controllers for 20 years. We pride ourselves as being the industry leader of computer control relay products. Our products are proven reliable and we are very excited to support Particle. For more information on NCD please visit www.controlanything.com\n\n### Requirements\n---\n- Particle Photon (not tested with Electron but should work)\n- Basic understanding of developing on the Particle platform\n\n### How to use this library\n---\n\nThe libary must be imported into your application. This can be done through the Particle WEB IDE:\n1. Click Libraries\n2. Select GenericI2c (type into textbox to filter libraries)\n3. Click \"Include in App\" button\n4. Select the App you want to include the library in\n5. Click Add to this app\n\nFor more information see Particles's documentation\n\n### Example use\n---\nOnce the Library is included in your applicaiton you should see an include statement at the top like this:\n```cpp\n//This #include statement was automatically added by the Particle IDE.\n#include \"GenericI2c/GenericI2c.h\"\n```\nNow you need to instanciate an object of the library for use in your application like this:\n```cpp\nGenericI2c i2cController;\n```\n\nHere is an example use case for the class, triggering relays based on a temperature using the following products:\n- https://www.controleverything.com/content/Temperature?sku=MCP9808_I2CS\n- https://www.controleverything.com/content/Relay-Controller?sku=MCP23008_SCIO6R2G5V1_1A\n\n```cpp\n// This #include statement was automatically added by the Particle IDE.\n#include \"GenericI2c/GenericI2c.h\"\n\n//Set variables for Particle cloud\nString temperature = \"\";\nString relayStatus = \"\";\n\n//Instantiate I2C class\ni2cDevices devices;\n\n//Set addresses for connected devices\nint relayAddr = 32;\nint tempAddr = 72;\n\nvoid processTemp(int vals[]);\nvoid processRelays(int val[])\n\nvoid setup() {\n    Particle.variable(\"relayStatus\", relayStatus);\n    Particle.variable(\"Temperature\", temperature);\n    \n    //Initialize I2C communication\n    devices.init();\n    \n    //Add devices for use\n    devices.addDevice(relayAddr, \"0,252|6,252\");\n    devices.addDevice(tempAddr, \"1,96\");\n    \n    //initialize devices\n    devices.initDevices();\n}\n\nvoid loop() {\n    if(millis()%1000==0){\n        //Once a second check the temperature and relay status\n        devices.readI2cCommand(tempAddr, \"0,2\", processTemp);\n        devices.readI2cCommand(relayAddr, \"10,1\", processRelays);\n    }\n}\n\n//Callback function for reading temperature\nvoid processTemp(int vals[]){\n    //Process temperature to get a real world value\n    float temp = vals[0];\n    temp += (float)vals[1]/256.00;\n    float tempF = temp*1.8+32;\n    \n    //Set the temperature variable\n    temperature = String(tempF,2);\n    \n    if(tempF > 73){\n        //If the temperature in Fahrenheit is greater than 73, turn on both relays\n        devices.sendCommand(relayAddr, \"10,3\");\n    }else{\n        //Otherwise turn them both off\n        devices.sendCommand(relayAddr, \"10,0\");\n    }\n}\n\n//Callback function for checking relay status\nvoid processRelays(int val[]){\n    relayStatus = val[0];\n    relayStatus += \" - Relay 1 is \";\n    \n    if(val[0] == 3 || val[0] == 1) {\n        relayStatus += \"on\";\n    }else{\n        relayStatus += \"off\";\n    }\n    relayStatus += \", Relay 2 is \";\n    if(val[0]>1){\n        relayStatus += \"on\";\n    }else{\n        relayStatus += \"off\";\n    }\n}\n```\n\n### Public accessible methods\n---\n```cpp\nvoid init();\n```\n>This method simply initializes I2C communication, it MUST be called before any read or write commands.\n\n```cpp\nString scan();\n```\n>Scan the whole range of I2C busses and place the available devices into a Log.\n\n```cpp\nbool addDevice(int address);\nbool addDevice(int address, String initCmds);\n```\n>This method adds a device to the registry of the class. If no commands are sent a placeholder of 0 is set for the initialization routine.\n\n```cpp\nint initDevices();\n```\n>Initialize all devices in registry with their appropriate initialization commands.\n\n```cpp\nbool deviceExists(int address);\n```\n>Checks if a device exists in the registry. This command DOES NOT validate that the device is connected.\n\n```cpp\nString getDevice(int address);\nString getDevice(int index, int &address);\n```\n>Fetches the device from the registry, returns the initialization commands and, in the second case, sets the address. (index refers to the index in the registry)\n\n```cpp\nint sendCommand(String command);\nint sendCommand(int addr, String command);\n```\n>Send command to a device. If the address is sent first, it must be omitted from the command string. The command string should be a comma delimitted list of integers and may be of a variable length. This method will retry 3 times if the command fails\n\n```cpp\nint sendCommands(String command);\nint sendCommands(int addr, String command);\n```\n>Sends multiple commands to a device, exactly like sendCommand, except it expects a pipe (|) delimited list of commands. This method will retry the entire list of commands 3 times if the final command fails\n\n```cpp\nint processCommand(String command);\nint processCommand(int addr, String command);\n```\n>Processes a command, similar to sendCommand except it will never retry\n\n```cpp\nint readI2cCommand(String command);\nint readI2cCommand(int addr, String command);\nint readI2cCommand(String command, void (*fptr)(int*));\nint readI2cCommand(int addr, String command, void (*fptr)(int*));\n```\n>Send read commands to device, if address is sent it must be omitted from the commands. The final part of the comma delimited read command should be the number of bytes expected. A function may be sent in as the last argument and will be used as a callback, sending the bytes received to it.\n\n```cpp\nint read(int addr, int registerAddress, int bytes, int* buff);\n```\n>Not terribly useful by itself. This is the function that does the work for readI2cCommand\n",
  "allVersions": [
    "0.0.2",
    "0.0.1"
  ]
}
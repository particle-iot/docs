{
  "type": "libraries",
  "id": "SpiFlashRK",
  "links": {
    "download": "https://api.particle.io/v1/libraries/SpiFlashRK/archive/0.0.9.tar.gz"
  },
  "attributes": {
    "name": "SpiFlashRK",
    "version": "0.0.9",
    "installs": 10022,
    "license": "MIT",
    "author": "rickkas7@rickkas7.com",
    "sentence": "Particle library for SPI NOR flash chips",
    "url": "https://github.com/rickkas7/SpiFlashRK",
    "repository": "https://github.com/rickkas7/SpiFlashRK.git",
    "architectures": [
      "*"
    ],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "s",
  "cardUrl": "/cards/libraries/s/SpiFlashRK",
  "versions": {
    "0.0.9": {
      "builds": {
        "2.0.1": {
          "photon": {
            "1-unittest-SpiFlashRK": true,
            "2-unittest-winbond": true,
            "3-unittest-large": true
          },
          "electron": {
            "1-unittest-SpiFlashRK": true,
            "2-unittest-winbond": true,
            "3-unittest-large": true
          },
          "argon": {
            "1-unittest-SpiFlashRK": true,
            "2-unittest-winbond": true,
            "3-unittest-large": true
          },
          "boron": {
            "1-unittest-SpiFlashRK": true,
            "2-unittest-winbond": true,
            "3-unittest-large": true
          }
        },
        "1.5.2": {
          "photon": {
            "1-unittest-SpiFlashRK": true,
            "2-unittest-winbond": true,
            "3-unittest-large": true
          },
          "electron": {
            "1-unittest-SpiFlashRK": true,
            "2-unittest-winbond": true,
            "3-unittest-large": true
          },
          "argon": {
            "1-unittest-SpiFlashRK": true,
            "2-unittest-winbond": true,
            "3-unittest-large": true
          },
          "boron": {
            "1-unittest-SpiFlashRK": true,
            "2-unittest-winbond": true,
            "3-unittest-large": true
          }
        }
      }
    }
  },
  "readme": "# SpiFlashRK\n\n*Particle library for SPI NOR flash memory chips*\n\nThis library provides access to SPI NOR flash chips on the Particle platform. It's a low-level access that allows byte-level write-to-0 and sector-level erase-to-1.\n\nYou probably won't use this library directly; it's intended by be used as the hardware interface for a library that provides easier access, wear-leveling, flash translation, etc.. I recommend the SpiffsParticleRK library.\n\nThe full browsable API documentation can be found [here](http://rickkas7.github.io/SpiFlashRK/).\n\n## Instantiating an object\n\nYou typically instantiate an object to interface to the flash chip as a global variable:\n\n```\nSpiFlashISSI spiFlash(SPI, A2);\n```\n\nUse an ISSI flash, such as a [IS25LQ080B](http://www.digikey.com/product-detail/en/issi-integrated-silicon-solution-inc/IS25LQ080B-JNLE/706-1331-ND/5189766). In this case, connected to the primary SPI with A2 as the CS (chip select or SS).\n\n```\nSpiFlashWinbond spiFlash(SPI, A2);\n```\n\nUse a Winbond flash, such as a [W25Q32](https://www.digikey.com/product-detail/en/winbond-electronics/W25Q32JVSSIQ/W25Q32JVSSIQ-ND/5803981). In this case, connected to the primary SPI with A2 as the CS (chip select or SS).\n\n```\nSpiFlashWinbond spiFlash(SPI1, D5);\n```\n\nWinbond flash, connected to the secondary SPI, SPI1, with D5 as the CS (chip select or SS).\n\n```\nSpiFlashMacronix spiFlash(SPI1, D5);\n```\n\nMacronix flash, such as the [MX25L8006EM1I-12G](https://www.digikey.com/product-detail/en/macronix/MX25L8006EM1I-12G/1092-1117-ND/2744800). In this case connected to the secondary SPI, SPI1, with D5 as the CS (chip select or SS). This is the recommended for use on the E-Series module. Note that this is the 0.154\", 3.90mm width 8-SOIC package.\n\n\n```\nSpiFlashP1 spiFlash;\n```\n\nThis is the external flash on the P1 module. This extra flash chip is entirely available for your user; it is not used by the system firmware. You can only use this on the P1; it relies on system functions that are not available on other devices.\n\n\n## Connecting the hardware\n\nFor the primary SPI (SPI):\n\n| Name | Flash Alt Name | Particle Pin | Example Color |\n| ---- | -------------- | ------------ | ------------- |\n| SS   | CS             | A2           | White         |\n| SCK  | CLK            | A3           | Orange        |\n| MISO | DO             | A4           | Blue          |\n| MOSI | D1             | A5           | Green         |\n\n\nFor the secondary SPI (SPI1):\n\n| Name | Flash Alt Name | Particle Pin | Example Color |\n| ---- | -------------- | ------------ | ------------- |\n| SS   | CS             | D5           | White         |\n| SCK  | CLK            | D4           | Orange        |\n| MISO | DO             | D3           | Blue          |\n| MOSI | D1             | D2           | Green         |\n\nNote that the SS/CS line can be any available GPIO pin, not just the one specified in the table above.\n\n- Electron using Primary SPI\n\n![Electron](images/electron.jpg)\n\n- Photon using Secondary SPI (SPI1)\n\n![Photon SPI1](images/spi1.jpg)\n\n- Photon using Primary SPI and a poorly hand-soldered 8-SOIC adapter\n\n![SOIC Adapter](images/soic.jpg)\n\n\n\n## The API\n\nThe API is described in the SpiFlashRK.h file. But you will rarely need to use the low-level API directly.\n## Members\n\n\n#### `public void `[`begin`](#class_spi_flash_base_1ac15f0d887b3f63e95c38fa07ad27b4ad)`()` \n\nCall begin, probably from setup(). The initializes the SPI object.\n\n#### `public bool `[`isValid`](#class_spi_flash_base_1a1a556af53af5b4a535091ac48ccddf9d)`()` \n\nReturns true if there is a flash chip present and it appears to be the correct manufacturer code.\n\n#### `public uint32_t `[`jedecIdRead`](#class_spi_flash_base_1aaafb065389237c90ed89ea61a1992743)`()` \n\nGets the JEDEC ID for the flash device.\n\n#### Returns\nA 32-bit value containing the manufacturer ID and the two device IDs:\n\n- byte[0] manufacturer ID mask 0x00ff0000 \n- byte[1] device ID 1 mask 0x0000ff00 \n- byte[2] device ID 2 mask 0x000000ff\n\n#### `public void `[`readData`](#class_spi_flash_base_1a053c787ed441aee2830629cf077ed3b4)`(size_t addr,void * buf,size_t bufLen)` \n\nReads data synchronously. Reads data correctly across page boundaries.\n\n#### Parameters\n* `addr` The address to read from \n\n* `buf` The buffer to store data in \n\n* `bufLen` The number of bytes to read\n\n#### `public void `[`writeData`](#class_spi_flash_base_1ac47ed89cd11ad72a1e877c59cf3e2ab7)`(size_t addr,const void * buf,size_t bufLen)` \n\nWrites data synchronously. Can write data across page boundaries.\n\n#### Parameters\n* `addr` The address to read from \n\n* `buf` The buffer to store data in \n\n* `bufLen` The number of bytes to write\n\n#### `public void `[`sectorErase`](#class_spi_flash_base_1abcab7312a96d40530981b06199b7dc9c)`(size_t addr)` \n\nErases a sector. Sectors are sectorSize bytes and the smallest unit that can be erased.\n\nThis call blocks for the duration of the erase, which take take some time (up to 500 milliseconds).\n\n#### Parameters\n* `addr` Address of the beginning of the sector. Must be at the start of a sector boundary.\n\n#### `public void `[`chipErase`](#class_spi_flash_base_1a22edd97067f1783351a4ee542c792007)`()` \n\nErases the entire chip.\n\nThis call blocks for the duration of the erase, which take take some time (several secoonds). This function uses delay(1) so the cloud connection will be serviced in non-system-threaded mode.\n\n#### `public inline size_t `[`getPageSize`](#class_spi_flash_base_1aebe4fbac5fbc17289682445968c4cd04)`() const` \n\nGets the page size (default: 256)\n\n#### `public inline `[`SpiFlashBase`](#class_spi_flash_base)` & `[`withPageSize`](#class_spi_flash_base_1a15345e20dd9986ef96b53e4cb86bf5b6)`(size_t value)` \n\nSets the page size (default: 256)\n\n#### `public inline size_t `[`getSectorSize`](#class_spi_flash_base_1a67d9998c73e8e4b8afe78b445516f745)`() const` \n\nGets the sector size (default: 4096)\n\n#### `public inline `[`SpiFlashBase`](#class_spi_flash_base)` & `[`withSectorSize`](#class_spi_flash_base_1a36a4e723f2acdd6fa4fb17b6d6e23d34)`(size_t value)` \n\nSets the sector size (default: 4096)\n\n## Version History\n\n### 0.0.9 (2020-10-30)\n\n- Increased Macronix chip erase timeout from 6000 to 240000 ms to deal with larger chips (like the MX25L25645G).\n- Add support for 4-byte addressing mode for chips larger than 128 Mbit (16 Mbyte). See set4ByteAddressing().\n\n### 0.0.7 (2020-10-29)\n\n- SPI transaction implementation fixed to use actual beginTransaction()/endTransaction() for compatible with multiple SPI devices.\n\n### 0.0.6 (2020-05-04)\n\n- Fix compiler error for undefined conversion to SpiClass with 1.5.1-rc.1.\n",
  "allVersions": [
    "0.0.9",
    "0.0.8",
    "0.0.7",
    "0.0.6",
    "0.0.5",
    "0.0.4",
    "0.0.3",
    "0.0.2",
    "0.0.1"
  ]
}
{
  "type": "libraries",
  "id": "MCP3021-RK",
  "links": {
    "download": "https://api.particle.io/v1/libraries/MCP3021-RK/archive/0.0.1.tar.gz"
  },
  "attributes": {
    "name": "MCP3021-RK",
    "version": "0.0.1",
    "installs": 152,
    "license": "MIT",
    "author": "rickkas7@rickkas7.com",
    "sentence": "Particle driver for MCP3021 10-bit I2C ADC",
    "url": "https://github.com/rickkas7/MCP3021-RK",
    "repository": "https://github.com/rickkas7/MCP3021-RK.git",
    "architectures": [
      "*"
    ],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "m",
  "cardUrl": "/cards/libraries/m/MCP3021-RK",
  "versions": {
    "0.0.1": {
      "builds": {
        "2.0.1": {
          "photon": {
            "1-simple": true
          },
          "electron": {
            "1-simple": true
          },
          "argon": {
            "1-simple": true
          },
          "boron": {
            "1-simple": true
          }
        },
        "1.5.2": {
          "photon": {
            "1-simple": true
          },
          "electron": {
            "1-simple": true
          },
          "argon": {
            "1-simple": true
          },
          "boron": {
            "1-simple": true
          }
        }
      }
    }
  },
  "readme": "# MCP3021-RK\n\n*Particle library for MCP3021 I2C 10-bit ADC*\n\nI'm not sure why you'd need this, as the Particle Photon and Electron already have a lot of ADC inputs. I originally did this because I thought I might need an ADC at the end of a long-range I2C bus, but you never know when you might need it so here it is.\n\nThe Microchip MCP3021 is a tiny (SOT-23-5), inexpensive (US$1.12 in single quantities) 10-bit ADC with an I2C interface. It operates on from 2.7V to 5.5V, which can also be handy.\n\nI got mine from [Digikey](https://www.digikey.com/product-detail/en/microchip-technology/MCP3021A5T-E-OT/MCP3021A5T-E-OTCT-ND/1979808) but they're widely available.\n\nOne issue is that it's only available in the SMT SOT-23-5 package, so it's intended to be included directly on your board. For prototyping, you could use a SOT-23-5 breakout, or build your own. \n\nI built a tiny circuit board for this purpose that contains the chip and two I2C pull-up resistors. The Eagle CAD schematic and layout are included in the eagle directory.\n\n![Circuit](images/circuit.jpg)\n\n![Board](images/board.jpg)\n\nThis ADC is fast - it samples during the I2C transaction, so you can call it as often as you want.\n\n## Sample program\n\nHere's a simple sample program to read the ADC:\n\n```\n#include \"Particle.h\"\n\n#include \"MCP3021-RK.h\"\n\nconst unsigned long SAMPLE_PERIOD_MS = 1000;\n\nMCP3021 adc(Wire);\nbool haveChip = false;\nunsigned long lastSample = 0;\n\n\nvoid setup() {\n\tSerial.begin(9600);\n\tadc.begin();\n}\n\nvoid loop() {\n\tif (millis() - lastSample >= SAMPLE_PERIOD_MS) {\n\t\tlastSample = millis();\n\n\t\tif (!haveChip) {\n\t\t\thaveChip = adc.check();\n\t\t\tSerial.printlnf(\"haveChip=%d\", haveChip);\n\t\t}\n\t\tif (haveChip) {\n\t\t\tSerial.printlnf(\"value=%u\", adc.getSample());\n\t\t} else {\n\t\t\tSerial.println(\"no MCP3021 detected\");\n\t\t}\n\t}\n}\n\n```\n",
  "allVersions": [
    "0.0.1"
  ]
}
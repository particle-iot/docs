{
  "type": "libraries",
  "id": "TensorFlowLite",
  "links": {
    "download": "https://api.particle.io/v1/libraries/TensorFlowLite/archive/0.1.1.tar.gz"
  },
  "attributes": {
    "name": "TensorFlowLite",
    "version": "0.1.1",
    "installs": 1175,
    "license": "Apache 2.0",
    "author": "TensorFlow Authors, Pete Warden <petewarden@google.com>",
    "maintainer": "Brandon Satrom <brandon@particle.io>",
    "sentence": "Allows you to run machine learning models locally on your device.",
    "paragraph": "This library runs TensorFlow machine learning models on microcontrollers, allowing you to build AI/ML applications powered by deep learning and neural networks. With the included examples, you can recognize speech, detect people using a camera, and recognise \"magic wand\" gestures using an accelerometer. The examples work best with Particle Gen3 devices (Argon, Boron, Xenon), but some also work on the Photon and Electron.",
    "category": "Data Processing",
    "url": "https://www.tensorflow.org/lite/microcontrollers/overview",
    "repository": "https://github.com/bsatrom/Particle_TensorFlowLite.git",
    "architectures": [
      "particle-argon",
      "particle-xenon",
      "particle-boron",
      "particle-bsom"
    ],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "t",
  "cardUrl": "/reference/device-os/libraries/t/TensorFlowLite",
  "versions": {
    "0.1.1": {
      "builds": {},
      "noExamples": true,
      "added": "2022-06-17T10:16:53.968Z"
    }
  },
  "readme": "# TensorFlowLite\n\nA library for using [TensorFlow Lite for Microcontrollers](https://www.tensorflow.org/lite/microcontrollers) with Particle devices. This library has been tested with the following Particle devices:\n\n- Photon / P1\n- Argon\n- Boron\n- Xenon\n\n**NOTE**: While the TensorFlow Library itself has been tested with all of the devices above, not every example below runs on all of these devices. Model size if the main constraint here, so check the model size if you're having issues running an project.\n\n## Getting started with TensorFlow Lite\n\nTo use TensorFlow Lite for Microcontrollers with your own models, you'll need to take the following steps, as detailed in the [TensorFlow docs](https://www.tensorflow.org/lite/microcontrollers#developer_workflow):\n\n1. Create or download a model.\n2. Convert the model to a a TensorFlow Lite FlatBuffer.\n3. Convert the FlatBuffer to a C byte array for inclusion in your project.\n4. Integrate this library into your project using the instructions below.\n5. Deploy your project to a Particle device.\n\nFor a complete walkthrough of the steps above, you can view one of the exercises in the TensorFlow docs, or check out the README for the linear_regression example for a step-by-step example of the model creation to MCU execution process.\n\n## Installation\n\nThis library is available for use on all Particle devices and can be installed using one of the following approaches.\n\n### 1. Installing in the Particle Web IDE\n\nTo install this libraries from the [Web IDE](https://build.particle.io), open the libraries tab by clicking on the bookmark icon on the lower left of the screen.\n\n(image removed)\n\nThen, in the Community Libraries search box, type \"TensorFlow\" and click on the `TensorFLowLite` entry.\n\n(image removed)\n\nFinally, click the \"Include in Project\" button and follow the prompts to pick the project in which to install this library.\n\n(image removed)\n\n### 2. Installing in Particle Workbench\n\nIf you're using Particle Workbench, first open the project you want to use with TensorFlow Lite. Then, open the Command Palette by typing CMD+SHIFT+P (macOX/Linux) or CTRL+SHIFT+P (Windows).\n\n(image removed)\n\nSearch for the \"Particle: Install Library\" option and click it.\n\n(image removed)\n\nType \"TensorFlowLite\" and hit enter. Workbench will install the library into a `lib` directory at the root of your project and notify you when complete.\n\n(image removed)\n\n### 3. Installing with the Particle CLI\n\nTo install this library using the [Particle CLI](https://docs.particle.io/tutorials/developer-tools/cli/), run the following command from a Particle project directory.\n\n```bash\n$ particle library install TensorFlowLite\n\nChecking library TensorFlowLite...\nInstalling library TensorFlowLite 0.1.0 to /Users/bsatrom/Particle/community/libraries/TensorFlowLite@0.1.0 ...\nLibrary TensorFlowLite 0.1.0 installed.\n```\n\n## Using the library\n\nSee the [TensorFlow Lite for Microcontrollers docs](https://www.tensorflow.org/lite/microcontrollers/get_started#how_to_run_inference) for detailed instructions on running inference on embedded devices.\n\n## Included Examples\n\nThe source contains the following examples, some of which require additional hardware and may not run across all Particle devices (especially the Photon) due to model size constraints.\n\n1. `linear_regression` - Runs a simple linear regression model (~1kb in size) to solve for the canonical \"straight line equation\" `y = mx + c` given random `x` values between 0 and 1. Outputs the result to an [Adafruit 3.5\" TFT FeatherWing](https://www.adafruit.com/product/3651). This example project also contains complete instructions that illustrate the process of building a model from scratch in TensorFlow and Keras, converting that model to TFLite and then a FlatBuffer format, and finally, building a project to execute that model on Particle MCUs. Tested on the Particle Photon and Xenon.\n2. `hello_world` - Runs a simple sine wave model (2kb in size) to predict the next wave position. Uses the output to `analogWrite` the waveform value to the onboard D7 LED. Tested on the Particle Photon and Xenon.\n3. `sine_with_screen` - Runs the same sine wave model from the `hello_world` project, and outputs the result to an [Adafruit 3.5\" TFT FeatherWing](https://www.adafruit.com/product/3651). Can easily be adapted to other displays.\n4. `micro_speech` - Runs a speech detection model (18k in size) that can recognize the words \"yes\" and \"no.\" Uses the output to flash the onboard D7 LED when \"yes\" is detected. Requires an [electret microphone amplifier](https://www.adafruit.com/product/1713). This example is only supported on Particle 3rd gen devices (Argon, Boron, Xenon).\n5. `magic_wand` - Runs a gesture detection model (18k in size) that can recognize 3 gestures: \"wing\" (draw a W from left to right), \"ring\" (draw a circle clockwise from top), and \"slope\" (draw two-sides of a triangle from top right). This example is only supported on Particle 3rd Gen devices (Argon, Boron, Xenon).\n6. `person_detection` - Runs a person detection model (250k in size) that can detect a person in an image from a connected camera. Requires the [ArduCam](https://www.arducam.com/product/arducam-2mp-spi-camera-b0067-arduino/) and dependent libraries. *NOTE*: This demo has been ported, but cannot currently be run on Particle devices as the model overflows available flash space significantly. ",
  "allVersions": [
    "0.1.1",
    "0.1.0",
    "0.0.2",
    "0.0.1"
  ]
}
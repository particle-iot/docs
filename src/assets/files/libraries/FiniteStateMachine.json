{
  "type": "libraries",
  "id": "FiniteStateMachine",
  "links": {
    "download": "https://api.particle.io/v1/libraries/FiniteStateMachine/archive/1.9.0.tar.gz"
  },
  "attributes": {
    "name": "FiniteStateMachine",
    "version": "1.9.0",
    "installs": 25775,
    "license": "GNU General Public License, version 2",
    "author": "Gustavo Gonnet <gusgonnet@gmail.com>",
    "sentence": "A simple Finite State Machine Library",
    "paragraph": "This library helps organizing and standardizing the way an FSM could be implemented",
    "url": "https://github.com/gusgonnet/particle-fsm",
    "repository": "https://github.com/gusgonnet/particle-fsm.git",
    "architectures": [],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "f",
  "cardUrl": "/cards/libraries/f/FiniteStateMachine",
  "versions": {
    "1.9.0": {
      "builds": {
        "2.0.1": {
          "photon": {
            "example": true,
            "typed": true
          },
          "electron": {
            "example": true,
            "typed": true
          },
          "argon": {
            "example": true,
            "typed": true
          },
          "boron": {
            "example": true,
            "typed": true
          }
        },
        "1.5.2": {
          "photon": {
            "example": true,
            "typed": true
          },
          "electron": {
            "example": true,
            "typed": true
          },
          "argon": {
            "example": true,
            "typed": true
          },
          "boron": {
            "example": true,
            "typed": true
          }
        }
      }
    }
  },
  "readme": "# particle-fsm\n\nThis is a library for the [Particle dev kits](https://www.particle.io/).\n\nPorted from the [Arduino Finite State Machine library](http://playground.arduino.cc/Code/FiniteStateMachine) by [Gustavo Gonnet](gusgonnet@gmail.com).\n\nAll credit goes to the original author: [Alexander Brevig](alexanderbrevig@gmail.com).\n\nWhy FSMs? [Please read this write-up](https://www.hackster.io/gusgonnet/using-finite-state-machines-fdba04)\n\n# Finite State Machine Description\n\nA FSM serves as a manager that organizes a set of states, or behaviors.\n\nIt manages the transition between states, and the state itself.\nThe transitions might be caused by the user, a wall or something other that is external, and they might be caused by some internal logic. Transitions either happen immediately, or they are deferred to the next update. The latter is the most common. It's used because that way you'll know that all code related to the current state, will have executed on the same state.\n\nYou can read more about finite state machines in this [write-up](https://www.hackster.io/gusgonnet/using-finite-state-machines-fdba04).\n\n# FSM Library Description\n\nThis library will help you get rid of all your custom switch-case statements.\n\nIt is created to help organizing and standardizing the way an FSM could be implemented.\n\nThe library expects all functionality to be coded in the sketch, and the State class will simply use callbacks to simulate functionality.\n\nAll States expect an enter function, an update function and an exit function. These functions are being called according to this scheme:\n\n```\ncurrent.exit();  //exit current state\nnext.enter();    //enter next state\ncurrent = next;\nwhile no transition\n  current.update();\n```\n---\n\n# Creation\n\n## Finite State Machine Creation\n\n_FiniteStateMachine(State& current)_\n\n_FSM(State& current)_\n\nExample:\n\n```FSM ethernetStateMachine = FSM(ethernetDebugState);```\n\nInitializes an FSM object with the current state equal to ethernetDebugState.\n\n\n## State Creation\n\n_State( enterFunction , updateFunction , exitFunction )_\n\nExample:\n\n```State ethernetDebugState = State( connectToHost , debug , closeConnectionToHost );```\n\n---\n# Functions\n## State Functions\n\n_void enter()_ : \nThis function gets called whenever this state is entered\n\n_void update()_ : \nThis function gets called whenever the state machine updates while in this state\n\n_void exit()_ : \nThis function gets called whenever this state is exited\n\n## Finite State Machine Functions\n\n_void update()_ : \nThis function will trigger update on the current State\n\n_void transitionTo(State& next)_ : \nThis function will schedule a state change, the change itself will occur at the beginning of the next update\n\n_void immediateTransitionTo(State& next)_ : \nThis function will instantly change the current state to next state\n\n_State& getCurrentState()_ :\nReturns the current state\n\n_boolean isInState( State &state )_ : \nCheck if state is equal to the current state of the FSM\n\n---\n\n## Typed States\n\nTo avoid mistakes mixing states from different states machines together, use the strongly typed state variant. The compiler will throw an error if you mix states.\n\nUse `DECLARE_STATE` to create a named `State` class for each of your state machines and pass that class when creating the state machine. All the methods of the named `State` class and the typed state machine `FSMT` are the same as the generic variant of `State` and `FSM`.\n\n_FiniteStateMachineTyped<StateType>(StateType& current)_\n\n_FSMT<StateType>(StateType& current)_\n\nExample:\n\n```\nDECLARE_STATE(ConnectivityState);\nConnectivityState disconnectedState(waitForConnection);\nConnectivityState connectedState(waitForDisconnection);\nFSMT<ConnectivityState> connectivityStateMachine(disconnectedState);\n\n// Assuming brewCoffeState is a CoffeeState from a different state machine this would fail with a compiler error\nconnectivityStateMachine.transitionTo(brewCoffeState);\n// error: no matching function for call to 'FiniteStateMachineTyped<ConnectivityState>::transitionTo(CoffeeState&)'\n```\n\n# Example\n\n## LED Finite State Machine\n\nWe will implement a state machine for an LED.\n\nFrom a design point of view we want to make the led go on and off, as well as fade in and out. This translates directly to the states for our example:\n\nOn\nOff\nFadeIn\nFadeOut\n\nThe states describe themselves:\n\n\n![alt text](https://github.com/gusgonnet/particle-fsm/blob/master/images/LED_FSM.png)\n\n\nEvery 5 seconds the FSM will advance to the next State in the diagram above.\n\nThis FSM translates into this sketch:\n\n```\n#include <FiniteStateMachine.h>\n\n//how many states are we cycling through?\nconst byte NUMBER_OF_STATES = 4;\n\n//utility functions\nvoid ledOn() { /*action to turn the led on*/ }\nvoid ledOff() { /*action to turn the led off*/ }\nvoid ledFadeIn() { /*action to fade in the led*/ }\nvoid ledFadeOut() { /*action to fade out the led*/ }\n//end utility functions\n \n// initialize states\nState On = State(ledOn);\nState Off = State(ledOff);\nState FadeIn = State(ledFadeIn);\nState FadeOut = State(ledFadeOut);\n \n// initialize state machine, start in state: On\nFSM ledStateMachine = FSM(On);\n \n// counter variable\nbyte counter = 0;\n\nvoid setup()\n{ /* nothing to setup */ }\n \nvoid loop()\n{\n  // increment counter and constrain it to [ 0, 1, 2, 3 ]\n  counter = ++counter % NUMBER_OF_STATES;\n  switch (counter){\n    case 0: ledStateMachine.transitionTo(On); break;\n    case 1: ledStateMachine.transitionTo(Off); break;\n    case 2: ledStateMachine.transitionTo(FadeIn); break;\n    case 3: ledStateMachine.transitionTo(FadeOut); break;\n  }\n \n  ledStateMachine.update();\n\n  // advance to next state every 5 seconds\n  delay(5000);\n\n}\n\n```\n\n---\n# Real-world implementations\n\nYou can refer to this [pool and sauna controller](https://www.hackster.io/gusgonnet/pool-and-sauna-controller-b24a9a?team=34278).\n",
  "allVersions": [
    "1.9.0",
    "1.8.2",
    "1.8.1",
    "1.8.0"
  ]
}
{
  "type": "libraries",
  "id": "gbjFilterExponential",
  "links": {
    "download": "https://api.particle.io/v1/libraries/gbjFilterExponential/archive/1.1.0.tar.gz"
  },
  "attributes": {
    "name": "gbjFilterExponential",
    "version": "1.1.0",
    "installs": 1150,
    "license": "MIT",
    "author": "Libor Gabaj <libor.gabaj@gmail.com>",
    "maintainer": "Libor Gabaj <libor.gabaj@gmail.com>",
    "sentence": "Library for smoothing a data series with exponential filtering.",
    "paragraph": "The library calculates a new filtered value from stored previous and currently measured one.",
    "category": "Data Processing",
    "url": "https://github.com/mrkaleArduinoLib/gbj_filter_exponential.git",
    "repository": "https://github.com/mrkaleArduinoLib/gbj_filter_exponential.git",
    "architectures": [
      "avr",
      " particle-core",
      " particle-photon",
      " particle-electron"
    ],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "g",
  "cardUrl": "/reference/device-os/libraries/g/gbjFilterExponential",
  "versions": {
    "1.1.0": {
      "builds": {
        "2.0.1": {
          "photon": {
            "analog_input_filtering": false
          },
          "electron": {
            "analog_input_filtering": false
          },
          "argon": {
            "analog_input_filtering": false
          },
          "boron": {
            "analog_input_filtering": false
          }
        },
        "1.5.2": {
          "photon": {
            "analog_input_filtering": false
          },
          "electron": {
            "analog_input_filtering": false
          },
          "argon": {
            "analog_input_filtering": false
          },
          "boron": {
            "analog_input_filtering": false
          }
        },
        "3.3.0": {
          "photon": {
            "analog_input_filtering": false
          },
          "electron": {
            "analog_input_filtering": false
          },
          "argon": {
            "analog_input_filtering": false
          },
          "boron": {
            "analog_input_filtering": false
          }
        },
        "5.0.1": {
          "argon": {
            "analog_input_filtering": false
          },
          "boron": {
            "analog_input_filtering": false
          },
          "bsom": {
            "analog_input_filtering": false
          },
          "b5som": {
            "analog_input_filtering": false
          },
          "tracker": {
            "analog_input_filtering": false
          },
          "p2": {
            "analog_input_filtering": false
          }
        },
        "4.0.0": {
          "argon": {
            "analog_input_filtering": false
          },
          "boron": {
            "analog_input_filtering": false
          },
          "bsom": {
            "analog_input_filtering": false
          },
          "b5som": {
            "analog_input_filtering": false
          },
          "tracker": {
            "analog_input_filtering": false
          },
          "esomx": {
            "analog_input_filtering": false
          }
        }
      },
      "added": "2022-06-17T10:16:53.955Z"
    }
  },
  "readme": "<a id=\"library\"></a>\n# gbjFilterExponential\nThe library smooths a data series by exponential filtering. It calculates a new filtered value from stored previous one and a currently observed value. The theory behind the exponential filter is well described by *Wikipedia* in the article [Exponential smoothing](https://en.wikipedia.org/wiki/Exponential_smoothing). The exponential filter is a weighted combination of the previous estimate (output) with the newest input data, with the sum of the weights equal to 1 so that the output matches the input at steady state.\n\nWhen the sequence of measurements begins at time **t = 0**, the simplest form of exponential smoothing is given by the formulas:\n\n\tS{0} = X{0}; t = 0\n\tS{t} = a * X{t} + (1 - a) * S{t-1}; t > 0\n\nwhere\n\n- **X{t}** is the measured (raw) value at some time point\n- **S{t}** is the smoothed (filtered) value for the same time point\n- **a** is the *smoothing factor* within the range (0, 1) excluding the extreme values, which have no practical sense.\n\t- The *zero smoothing factor* causes, that all new measured values are ignored and the entire data serie is representing just with the initial value.\n\t- The *smoothing factor 1* causes, that all previous filtered values are ignored and the entire data serie is representing with the measured values only and no filtering happens.\n\t- In praxis the smoothing factor is chosen in the range *0.01 to 0.2*.\n\n\nThe above formula can be rewritten into the following predictor-corrector equivalent\n\n\tS{t} = S{t-1} + a * (X{t} - S{t-1})\n\nA new smoothed value is predicted as the previous one modified by a correction based on the difference between the new measured value and the previous smoothed value. This form is also the result of deriving the exponential filter formula.\n\nSmoothing factor can be calculated for particular sampling time interval between measurement and the *time constant* of the measured process from the formula\n\n\ta = 1 - exp(-Ts/Tk)\n\nwhere\n\n- **Ts** is the sampling time interval\n- **Tk** is the time constant\n- **exp()** is the power of Euler number\n\n\nIf the sampling time is very short compared to the time constant, e.g., 5 times, we can calculate the approximate smoothing factor from the formula\n\n\ta ~ Ts/Tk\n\n\nTypical smoothing factors\n\n- **0.632**: The sampling time interval equal to the time constant\n- **0.5**: Regular running average\n- **0.2**: The sampling time interval ~4.5 times shorter than the time constant\n- **0.1**: The sampling time interval ~9.5 times shorter than the time constant\n- **0.01**: The sampling time interval ~100 times shorter than the time constant\n\n\n<a id=\"dependency\"></a>\n## Dependency\n\n#### Particle platform\n- **Particle.h**: Includes alternative (C++) data type definitions.\n- **math.h**: Includes standard C++ mathematics, needed for fabs().\n\n#### Arduino platform\n- **Arduino.h**: Main include file for the Arduino SDK version greater or equal to 100.\n- **WProgram.h**: Main include file for the Arduino SDK version less than 100.\n- **inttypes.h**: Integer type conversions. This header file includes the exact-width integer definitions and extends them with additional facilities provided by the implementation.\n\n\n<a id=\"Constants\"></a>\n## Constants\nAll constants are embedded into the class as static ones.\n\n- **gbj\\_filter\\_exponential::VERSION**: Name and semantic version of the library.\n\n\n<a id=\"interface\"></a>\n## Interface\n- gbj_filter_exponential()\n- init()\n- getValue()\n\n#### Setters\n- setFactor()\n\n#### Getters\n- getFactor()\n\n\n<a id=\"gbj_filter_exponential\"></a>\n## gbj_filter_exponential()\n#### Description\nConstructor stores the smoothing factor within a class instance object.\n\n#### Syntax\n    gbj_filter_exponential(float smoothingFactor);\n\n#### Parameters\n<a id=\"prm_smoothingFactor\"></a>\n- **smoothingFactor**: Smoothing factor for exponential filtering.\n  - *Valid values*: real number 0.0 to 1.0\n  - *Default value*: 0.5 for running average\n\n#### Returns\nObject performing the exponential filtering of data.\n\n#### Example\nThe constructor has the argument defaulted. The constructor instance without the parameter is equivalent to an instance with the argument set by corresponding constant with default value:\n\n``` cpp\ngbj_filter_exponential Filter = gbj_filter_exponential(); // It is equivalent to\ngbj_filter_exponential Filter = gbj_filter_exponential(0.5);\n```\n\n#### See also\nsetFactor()\n\nBack to interface\n\n\n<a id=\"init\"></a>\n## init()\n#### Description\nThe method initiates all internal status flags of a class instance object to default values as they are right after power up of a microcontroller. It cause that the next measured is not smoothed, because it is considered as starting value of a data series.\n\n#### Syntax\n\tvoid init();\n\n#### Parameters\nNone\n\n#### Returns\nNone\n\nBack to interface\n\n\n<a id=\"getValue\"></a>\n## getValue()\n#### Description\nThe method calculates a new filtered value from the input value, previous stored filtered value, and stored smoothing factor in the class instance object.\n- Right after microcontroller power up or initiating the instance object by corresponding method the very first input value is considered as a previous filtered value, or starting value.\n\n#### Syntax\n    float getValue(float value);\n\n#### Parameters\n<a id=\"prm_value\"></a>\n- **value**: Measured value to be filtered.\n  - *Valid values*: float\n  - *Default value*: none\n\n#### Returns\nFiltered value.\n\nBack to interface\n\n\n<a id=\"setFactor\"></a>\n## setFactor()\n#### Description\nThe method enables changing the smoothing factor dynamically during the measuring (filtering) process.\n- Because the smoothing factor depends on the ratio of sampling time interval and time constant of a measured process, at changing some of them it might be useful to update the smoothing factor as well.\n\n#### Syntax\n    void setFactor(float smoothingFactor);\n\n#### Parameters\n- **smoothingFactor**: The same as the constructor argument smoothingFactor\n\n#### Returns\nNone\n\n#### See also\ngetFactor()\n\ngbj_filter_exponential()\n\nBack to interface\n\n\n<a id=\"getFactor\"></a>\n## getFactor()\n#### Description\nThe method returns currently set smoothing factor for the exponential filtering.\n\n#### Syntax\n    float getFactor();\n\n#### Parameters\nNone\n\n#### Returns\nActual smoothing factor.\n\n#### See also\nsetFactor()\n\nBack to interface\n",
  "allVersions": [
    "1.1.0"
  ]
}
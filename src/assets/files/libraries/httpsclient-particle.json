{
  "type": "libraries",
  "id": "httpsclient-particle",
  "links": {
    "download": "https://api.particle.io/v1/libraries/httpsclient-particle/archive/0.0.7.tar.gz"
  },
  "attributes": {
    "name": "httpsclient-particle",
    "version": "0.0.7",
    "installs": 21338,
    "license": "GPL",
    "author": "Vamsi Vytla",
    "sentence": "A library that helps photon boards talk https to web servers",
    "url": "https://github.com/glowfishapi/httpsclient-particle",
    "repository": "https://github.com/glowfishapi/httpsclient-particle.git",
    "architectures": [],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "h",
  "cardUrl": "/cards/libraries/h/httpsclient-particle",
  "versions": {
    "0.0.7": {
      "builds": {
        "2.0.1": {
          "photon": {
            "glowfish-post-test": false,
            "timeapi-test": true
          },
          "electron": {
            "glowfish-post-test": false,
            "timeapi-test": true
          },
          "argon": {
            "glowfish-post-test": false,
            "timeapi-test": true
          },
          "boron": {
            "glowfish-post-test": false,
            "timeapi-test": true
          }
        },
        "1.5.2": {
          "photon": {
            "glowfish-post-test": false,
            "timeapi-test": true
          },
          "electron": {
            "glowfish-post-test": false,
            "timeapi-test": true
          },
          "argon": {
            "glowfish-post-test": false,
            "timeapi-test": true
          },
          "boron": {
            "glowfish-post-test": false,
            "timeapi-test": true
          }
        }
      }
    }
  },
  "readme": "# Overview\nDesigning this with IOT in mind. Most webservers willing to collect data from\ndevices prefer talking https. Securing communication to-and-from smaller\nfootprint devices (like particle.io Photon etc.) and standard web servers doing\ninteresting stuff with this data (glowfi.sh, thingspeak.com, etc) is the goal.\nThere is a hard limitation you hit with https and that dictates that you have\nabout 50kB of meemory allocated for it. This is because of huge\nCertificate chains that get shipped from https servers.\n\nIn all this, lack of a readily available plug and play httpsclient brings us\nhere. Integrating MatrixSSL with a standard TCP client seemed like a good\nstarting point.\n\nAny feedback (especially critical) and contributions are welcome!\n\n# Building it with Web IDE\n- Import the httpsclient-particle\n- Add it to the application you are currently working on\n- (Or) use one of the examples in the examples/ directory\n- If you are using timeapi-test, you should be able to compile and run it readily\n- If you are using glowfish-post-test, you will need the authentication credentials from glowfish to be able to make the post. Once you have them follow the instructions in the example file to carefully fill them in.\n\n# Building it locally with spark firmware\n\nAssuming you are comfortable using spark firmware library located: https://github.com/spark/firmware\n- Clone the httpsclient-particle\n- Copy the contents of the firmware directory into the firmware/user/src/\ndirectory of the spark firmware library.\n- Pick one of the files in the examples directory. And copy it into user/src\ndirectory.\n- Modify the first line of the example to remove the path prefix (needed only\nfor web IDE):\n  ````#include \"httpsclient-particle.h\"````\n- Delete/relocate the examples folder (local build won't succeed if it's left\nthere)\n- Goto firmware/main/ of the spark firmware directory again. And build it\n(Again, instructions for this are at https://github.com/spark/firmware) -\ndon't forget `PLATFORM=photon`\n\n# Current State\nWhat's here is a semi-stable working httpsclient that can make requests from\nthe particle photon board to webservers running https. The client\nimplementation is simple, and as of now can handle 1 connection at any given\ntime. Other features (for now) are:\n\n## Adhere to security\n- TLS 1.2\n- RSA 2048bit key length\n- Slow is OK, but secure is a must!\n- Ramping this up to 4096bit key length ought to be tested, and this may just\n  consume a whole lot of memory (AGAIN, especially the server certificates).\n  Writing the certificate chains to flash is an option.\n\n## Small memory footprint:\n- Client only\n- Single session\n- No Client Authentication\n- Static memory allocation\n\n## License:\nGPL, as matrixSSL-open library is under GPL.\n\n# A few important changes from MatrixSSL:\n- Make the ssl structure static, as we are just using a single session.\n- Header file compatibility with particle.io build system. This means\n  adjusting the include paths (this needs to be fixed).\n- Keep SSL in-out buffers static.\n\n# TODO:\n- Add and test Elliptic curve support (This will take up a larger footprint)\n- Find a better way to seed entropy. Currently takes the last 8 bits of the\n  system microsecond counter.\n- Add a feature to generate header files from RSA keys, etc. After this remove\n  samplecerts from the repository (?)\n- Inspect all dynamic memory allocations and check for memory leaks (all psMallocs)\n- Add tests!! MatrixSSL tests are heavy handed. Need to carefully go through these\n  and add the ones needed.\n- Find a better way to include header files\n- A memory pool implementation (if needed), especially to give back the obscene\n  amount of memory SSL Certificates consume.\n- The only way to currently print and trace info on the particle.io's photon is\n  by using Serial (written in c++). This is a bit painful if the rest of your\n  library is in C, necessary '.h' file needs to be wrapped with extern C\n  wrappers to get it to build correctly.\n- Last but no way the least, a thorough security AUDIT.\n- Decide on keeping this repository in sync with MatrixSSL-open. This isn't\n  trivial as keeping up with Photon/Arduino/MatrixSSL build systems maybe be a\n  handful.\n",
  "allVersions": [
    "0.0.7",
    "0.0.6"
  ]
}
{
  "type": "libraries",
  "id": "AzureIotHubClientV2",
  "links": {
    "download": "https://api.particle.io/v1/libraries/AzureIotHubClientV2/archive/1.0.2.tar.gz"
  },
  "attributes": {
    "name": "AzureIotHubClientV2",
    "version": "1.0.2",
    "installs": 10269,
    "license": "MIT",
    "author": "Steve Webster",
    "sentence": "Azure IoT Hub Client library for XENON, ARGON and BORON.",
    "paragraph": "Connect your Particle Mesh directly to Azure IoT Hub and Azure IoT Central for device to cloud, cloud to device messaging and Direct Method invocation support.",
    "architectures": [
      "particle-photon"
    ],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "a",
  "cardUrl": "/cards/libraries/a/AzureIotHubClientV2",
  "versions": {
    "1.0.2": {
      "builds": {
        "2.0.1": {
          "photon": {
            "AzureIotHub-Full": false,
            "AzureIotHub-Simple": false
          },
          "electron": {
            "AzureIotHub-Full": false,
            "AzureIotHub-Simple": false
          },
          "argon": {
            "AzureIotHub-Full": false,
            "AzureIotHub-Simple": false
          },
          "boron": {
            "AzureIotHub-Full": false,
            "AzureIotHub-Simple": false
          }
        },
        "1.5.2": {
          "photon": {
            "AzureIotHub-Full": false,
            "AzureIotHub-Simple": false
          },
          "electron": {
            "AzureIotHub-Full": false,
            "AzureIotHub-Simple": false
          },
          "argon": {
            "AzureIotHub-Full": false,
            "AzureIotHub-Simple": false
          },
          "boron": {
            "AzureIotHub-Full": false,
            "AzureIotHub-Simple": false
          }
        }
      }
    }
  },
  "readme": "# Connect your Particle Photon Directly to Azure IoT Hub or IoT Central\r\n\r\n|Author|[Dave Glover](https://developer.microsoft.com/en-us/advocates/dave-glover), Microsoft Cloud Developer Advocate |\r\n|----|---|\r\n|Documentation|[README](https://github.com/gloveboxes/Connecting-Particle-Photon-to-Azure-IoT-Hub/blob/master/README.md)|\r\n|Platform|[Particle Photon](https://store.particle.io/collections/photon), [Azure IoT Central](https://docs.microsoft.com/en-us/azure/iot-central/?WT.mc_id=article-github-dglover), [Azure IoT Hub](https://docs.microsoft.com/en-au/azure/iot-hub/?WT.mc_id=article-github-dglover)|\r\n|Video Training|[What is Azure IoT Central](https://docs.microsoft.com/en-us/azure/iot-central/overview-iot-central/?WT.mc_id=article-github-dglover), [Introduction to Azure IoT Hub](https://www.youtube.com/watch?v=smuZaZZXKsU)|\r\n|Screencasts|[How to create the Azure IoT Central Application](https://youtu.be/D26rJmHyZcA), [How to create an Azure IoT Hub](https://youtu.be/lHpUu6wSX40)|\r\n|Date|As at Nov 2018|\r\n|Acknowledgment|This AzureIoTHubClient library depends and builds upon the fantastic [MQTT-TLS](https://github.com/hirotakaster/MQTT-TLS) library.|\r\n\r\nNow you can connect your Particle Photon directly to the Particle Cloud, Azure IoT Hub, and Azure IoT Central. The **AzureIoTHubClient** library supports two-way messaging, [Direct Methods](https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-direct-methods/?WT.mc_id=article-github-dglover), and soon [Device Twins](https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-device-twins/?WT.mc_id=article-github-dglover).\r\n\r\n![photon in action](docs/photon-animated.gif)\r\n\r\n## Introduction\r\n\r\nA Particle Photon using the **AzureIoTHubClient** library can publish **50 messages per second** to Azure IoT Hub. The free tier of Azure IoT Hub limits the number of messages to 8000 per day. At 50 messages per second, you will reach the 8000-message limit in under 3 minutes. So be sure to throttle the telemetry publish rate.\r\n\r\nAzure IoT Central is a \"no code\" service to graph and analysis telemetry, control devices, and trigger other processes. Under the covers, the service uses [Azure IoT Hub](https://azure.microsoft.com/en-au/services/iot-hub/?WT.mc_id=article-github-dglover), [Azure Time Series Insights](https://azure.microsoft.com/en-au/services/time-series-insights/?WT.mc_id=article-github-dglover), and the [Azure IoT Hub Device Provisioning Service](https://docs.microsoft.com/en-us/azure/iot-dps/about-iot-dps/?WT.mc_id=article-github-dglover). Hence this library and documentation apply Azure IoT Hub and Azure IoT Central.\r\n\r\n### What you need\r\n\r\n1. [Particle Photon](https://store.particle.io/collections/photon)\r\n\r\n2. [Particle Cloud Account](https://www.particle.io/)\r\n\r\n3. [Azure IoT Central Application](#create-a-free-azure-iot-central-application)\r\n    - Azure IoT Central is available as a free 7-day trial or as a Pay-As-You-Go (free for the first 5 devices) service.\r\n\r\n4. Or you can also use an Azure IoT Hub instead of Azure IoT Central. For more information read how to [Create an Azure IoT Hub (Free Tier - limited to 8000 messages per day)](#creating-an-azure-iot-hub-free-tier).\r\n\r\n## Why connect your Particle Photon to Azure Services\r\n\r\nHere are some reasons to connect your Particle Photon directly to Azure.\r\n\r\n1. Azure IoT Central is perfect if you have limited development skills, time, or budget to bring an IoT project to life.\r\n\r\n    ![iot central](docs/iot-central.png)\r\n\r\n2. You want two-way messaging and direct method invocation from Azure.\r\n\r\n3. You are already using Azure and you want to connect, control, and integrate your devices with other business processes.\r\n\r\n4. You want to learn how to do interesting things with your telemetry such as:\r\n    - [Weather forecasting using the sensor data from your IoT hub in Azure Machine Learning](https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-weather-forecast-machine-learning/?WT.mc_id=article-github-dglover),\r\n    - [Visualize real-time sensor data from your Azure IoT hub by using the Web Apps feature of Azure App Service](https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-live-data-visualization-in-web-apps/?WT.mc_id=article-github-dglover),\r\n    - [IoT remote monitoring and notifications with Azure Logic Apps connecting your IoT hub and mailbox](https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-monitoring-notifications-with-azure-logic-apps/?WT.mc_id=article-github-dglover).\r\n\r\n## How to connect your Particle Photon to IoT Central or Azure IoT Hub\r\n\r\n1. Login to the [Particle Web IDE](https://build.particle.io/build).\r\n\r\n2. Click the Libraries icon and type \"**AzureIotHubClient**\" in the Community Libraries\" text box.\r\n\r\n    ![new-particle-project-library.JPG](docs/new-particle-project-library.JPG)\r\n\r\n3. Select the **AzureIotHubClient** library\r\n\r\n4. Choose the **AzureIotHub-Full** example\r\n\r\n5. Click on \"**Use This Example**\"\r\n\r\n    ![select library](docs/new-particle-project-select-library-use-example.JPG)\r\n\r\n6. Azure IoT Central or Azure IoT Hub\r\n\r\n   For simplicity create an IoT Central application. If you want to connect to Azure IoT Hub then read [how to set up an Azure IoT Hub (Free Tier)](#how-to-set-up-an-azure-iot-hub-free-tier) and skip the next step.\r\n\r\n7. Create an Azure IoT Central Application\r\n\r\n    Watch this 5-minute [screencast](https://youtu.be/D26rJmHyZcA) on how to create the Azure IoT Central Application to chart telemetry and send commands to your Particle Photon.\r\n\r\n    [![screencast](docs/iot-central-youtube.jpg)](https://www.youtube.com/watch?v=D26rJmHyZcA&t=5s)\r\n\r\n    To summarize the screencast:\r\n\r\n    1. Create an Azure IoT Central application from [https://azure.microsoft.com/en-au/services/iot-central](https://azure.microsoft.com/en-au/services/iot-central). Then click **Get Started**\r\n    2. Select Trial, Custom Application, type your application name. Then click **Create**\r\n    3. Click **Create Device Templates**, name your template, for example, \"Particle\". Then click **Create**\r\n    4. Edit the Template, add **Measurements** for Temperature, Humidity, and Pressure telemetry.\r\n\r\n        |Display Name| Field name     | Units  | Minimum | Maximum | Decimals |\r\n        |------------| -------------- | ------ | ------- | ------- | -------- |\r\n        |Humidity    | humidity       | %      | 0       | 100     | 0        |\r\n        |Temperature | temp           | degC     | -10   | 60      | 0        |\r\n        |Pressure    | pressure       | hPa    | 800     | 1260    | 0        |\r\n\r\n        Then click **Done**.\r\n    5. Click **Commands** tab, add commands for \"lighton\", \"lightoff\", \"fanon\", and \"fanoff\". Then click **Done**.\r\n    6. Click **Device Explorer** on the sidebar menu, select the template you created. Then add a **Real Device**\r\n      ![create a real device](docs/iot-central-add-real-device.png)\r\n    7. When you have created your real device click the **Connect** button in the top right-hand corner of the screen to display the device credentials. You will need these credentials for the next step.\r\n\r\n          ![Device Connection](docs/device-connection.png)\r\n\r\n    8. Create an IoT Central Device Connection String\r\n\r\n        You need to generate a connection string for the IoT Central device. You can either:\r\n          1. Download the [Connection String Generator](https://github.com/Azure/dps-keygen/tree/master/bin) for [Windows](https://github.com/Azure/dps-keygen/tree/master/bin/windows), [macOS](https://github.com/Azure/dps-keygen/tree/master/bin/osx), or [Linux](https://github.com/Azure/dps-keygen/tree/master/bin/linux). The README has the run instructions.\r\n          2. Or use my unofficial web-based [Connection String Generator](https://dpsgen.z8.web.core.windows.net/)\".\r\n\r\n### Update the Particle project CONNECTION_STRING\r\n\r\n1. Update the CONNECTION_STRING in the Particle Photon project with the connection string you generated in the previous step.\r\n\r\n    ![Update connection string](docs/new-particle-project-update-connection-string.jpg)\r\n\r\n### Flash your Particle Photon project\r\n\r\n1. Set your Particle Photon Firmware to 6.3\r\n\r\n    Set the device target firmware to 6.3. Your mileage may vary. I found firmware 6.3 to be more reliable than 7.0. WiFi recovery worked, 802.11n worked, and it uses less memory. See [Updating Particle Photon Firmware to 6.3](#updating-particle-photon-firmware-to-63).\r\n\r\n      ![Target firmware 6.3](docs/particle-device-firmware-target.jpg)\r\n\r\n2. Flash your Particle Photon with Azure IoT Hub Client app your device from the Particle IDE.\r\n\r\n## Understanding the AzureIotHubClient Library\r\n\r\nThe AzureIotHubClient library includes these examples to help you understand its use.\r\n\r\n### Example: AzureIotHub-Simple\r\n\r\n|API | Description |\r\n|----|-----|\r\n| **hub.loop**   |Call \"loop\" often as it handles processing of inbound messages and direct methods. It returns true if there is an active connection to Azure IoT Hub or IoT Central.|\r\n| **hub.publish** |Publishes the telemetry to Azure IoT Hub or IoT Central. It returns true if successful.|\r\n\r\n```c\r\n#define CONNECTION_STRING \"< your connection string >\"\r\n\r\nIotHub hub(CONNECTION_STRING);\r\ncount = 0;\r\n\r\nsetup()\r\n{}\r\n\r\nloop()\r\n{\r\n  if (hub.loop())\r\n  {\r\n    if (count++ % 25 == 0)\r\n    {\r\n      hub.publish(\"\\\"temperature\\\":25\");\r\n    }\r\n  }\r\n  delay(200);\r\n}\r\n```\r\n\r\n### Example: AzureIotHub-Full\r\n\r\n|Callbacks | Description |\r\n|----|-----|\r\n| **callbackCloud2Device**   |This function is called to process Cloud to Device messages.|\r\n| **callbackDirectMethod** |This function is called when a Direct Method (or an Azure IoT Central Command) is invoked cloud side. It includes a JSON payload.|\r\n\r\n```c\r\n// define callback signature\r\nvoid callbackCloud2Device(char *topic, byte *payload, unsigned int length);\r\nint callbackDirectMethod(char *method, byte *payload, unsigned int length);\r\n\r\nIotHub hub(CONNECTION_STRING, callbackCloud2Device, callbackDirectMethod);\r\ncount = 0;\r\n\r\nsetup()\r\n{\r\n  RGB.control(true);\r\n}\r\n\r\nloop()\r\n{\r\n  if (hub.loop())\r\n  {\r\n    if (count++ % 25 == 0)  // slow down the publish rate to every 25 loops\r\n    {\r\n      hub.publish(\"\\\"temperature\\\":25\");\r\n    }\r\n  }\r\n  delay(200);\r\n}\r\n\r\nvoid callbackCloud2Device(char *topic, byte *payload, unsigned int length)\r\n{\r\n  char* msg = (char*)payload;\r\n  if (strncmp(msg, \"red\", length) == 0)\r\n  {\r\n    RGB.color(255, 0, 0);\r\n  }\r\n}\r\n\r\nint callbackDirectMethod(char *method, byte *payload, unsigned int payloadLength)\r\n{\r\n  if (strcmp(method, \"lighton\") == 0)\r\n  {\r\n    RGB.color(255, 255, 0);\r\n  }\r\n  else\r\n  {\r\n    return 400;\r\n  }\r\n  return 200;\r\n}\r\n```\r\n\r\n### Example: Tuning Parameters\r\n\r\n|Parameter|Description|\r\n|---------|-----------|\r\n|maxBufferSize| Defaults to 500 bytes. Increase for larger messages.|\r\n|sasExpiryPeriodInSeconds|Defaults to 3600 seconds (60 minutes).|\r\n\r\n```c\r\nint maxBufferSize = 500;\r\ntime_t sasExpiryPeriodInSeconds = 3600;\r\n\r\nIotHub hub(CONNECTION_STRING, callbackCloud2Device, callbackDirectMethod, maxBufferSize, sasExpiryPeriodInSeconds);\r\n```\r\n\r\nPassing in tuning parameters with no callbacks.\r\n\r\n```c\r\n// with no callbacks\r\nIotHub hub(CONNECTION_STRING, NULL, NULL, maxBufferSize, sasExpiryPeriodInSeconds);\r\n```\r\n\r\n## How to set up an Azure IoT Hub (Free Tier)\r\n\r\n1. Create a [free Azure Account](https://azure.microsoft.com/en-au/free/).\r\n\r\n2. Watch this [screencast](https://youtu.be/lHpUu6wSX40) for an introduction to creating an Azure IoT Hub and an IoT Device.\r\n\r\n      [![screencast](docs/create-azure-iot-hub-youtube.jpg)](https://www.youtube.com/watch?v=lHpUu6wSX40)\r\n\r\n3. For more information see [Create an Azure IoT Hub (free tier) using the Azure portal](https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-create-through-portal/?WT.mc_id=article-github-dglover)\r\n\r\n## Updating Particle Photon Firmware to 6.3\r\n\r\n1. Download [v0.6.3 Firmware Release (Photon/P1)](https://github.com/particle-iot/firmware/releases/tag/v0.6.3)\r\n\r\n2. Install [Particle CLI](https://docs.particle.io/tutorials/developer-tools/cli/) tools\r\n\r\n3. Updating your Particle Photon over the Air (OTA) is the easiest choice if your device is already connected to the Particle Cloud. For more information see [Upgrading and downgrading Particle Device OS](https://community.particle.io/t/upgrading-and-downgrading-particle-device-os/43660).\r\n\r\n4. If **upgrading** to firmware 6.3\r\n    ```bash\r\n    particle flash <your device id> system-part1-0.6.3-photon.bin\r\n    particle flash <your device id> system-part2-0.6.3-photon.bin\r\n    ```\r\n5. If **downgrading** to firmware 6.3 (reverse order)\r\n    ```bash\r\n    particle flash <your device id> system-part2-0.6.3-photon.bin\r\n    particle flash <your device id> system-part1-0.6.3-photon.bin\r\n    ```",
  "allVersions": [
    "1.0.2",
    "1.0.1",
    "1.0.0"
  ]
}
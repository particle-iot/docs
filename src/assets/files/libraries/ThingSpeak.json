{
  "type": "libraries",
  "id": "ThingSpeak",
  "links": {
    "download": "https://api.particle.io/v1/libraries/ThingSpeak/archive/1.5.1.tar.gz"
  },
  "attributes": {
    "name": "ThingSpeak",
    "version": "1.5.1",
    "installs": 206946,
    "license": "See associated license file",
    "author": "MathWorks, Inc <support@thingspeak.com>",
    "sentence": "ThingSpeak Communication Library for Particle-based devices written by the ThingSpeak development team.",
    "url": "https://thingspeak.com",
    "repository": "https://github.com/mathworks/thingspeak-particle.git",
    "architectures": [
      "*"
    ],
    "visibility": "public",
    "mine": false,
    "verified": true
  },
  "verification": "verified",
  "kind": "verified community library",
  "letter": "t",
  "cardUrl": "/reference/device-os/libraries/t/ThingSpeak",
  "versions": {
    "1.5.1": {
      "builds": {
        "2.0.1": {
          "photon": {
            "CheerLights": true,
            "ReadLastTemperature": true,
            "ReadPrivateChannel": true,
            "ReadWeatherStation": true,
            "WriteMultipleVoltages": true,
            "WriteVoltage": true
          },
          "electron": {
            "CheerLights": true,
            "ReadLastTemperature": true,
            "ReadPrivateChannel": true,
            "ReadWeatherStation": true,
            "WriteMultipleVoltages": true,
            "WriteVoltage": true
          },
          "argon": {
            "CheerLights": true,
            "ReadLastTemperature": true,
            "ReadPrivateChannel": true,
            "ReadWeatherStation": true,
            "WriteMultipleVoltages": false,
            "WriteVoltage": true
          },
          "boron": {
            "CheerLights": true,
            "ReadLastTemperature": true,
            "ReadPrivateChannel": true,
            "ReadWeatherStation": true,
            "WriteMultipleVoltages": false,
            "WriteVoltage": true
          }
        },
        "1.5.2": {
          "photon": {
            "CheerLights": true,
            "ReadLastTemperature": true,
            "ReadPrivateChannel": true,
            "ReadWeatherStation": true,
            "WriteMultipleVoltages": true,
            "WriteVoltage": true
          },
          "electron": {
            "CheerLights": true,
            "ReadLastTemperature": true,
            "ReadPrivateChannel": true,
            "ReadWeatherStation": true,
            "WriteMultipleVoltages": true,
            "WriteVoltage": true
          },
          "argon": {
            "CheerLights": true,
            "ReadLastTemperature": true,
            "ReadPrivateChannel": true,
            "ReadWeatherStation": true,
            "WriteMultipleVoltages": false,
            "WriteVoltage": true
          },
          "boron": {
            "CheerLights": true,
            "ReadLastTemperature": true,
            "ReadPrivateChannel": true,
            "ReadWeatherStation": true,
            "WriteMultipleVoltages": false,
            "WriteVoltage": true
          }
        },
        "3.3.0": {
          "photon": {
            "CheerLights": true,
            "ReadLastTemperature": true,
            "ReadPrivateChannel": true,
            "ReadWeatherStation": true,
            "WriteMultipleVoltages": true,
            "WriteVoltage": true
          },
          "electron": {
            "CheerLights": true,
            "ReadLastTemperature": true,
            "ReadPrivateChannel": true,
            "ReadWeatherStation": true,
            "WriteMultipleVoltages": true,
            "WriteVoltage": true
          },
          "argon": {
            "CheerLights": true,
            "ReadLastTemperature": true,
            "ReadPrivateChannel": true,
            "ReadWeatherStation": true,
            "WriteMultipleVoltages": false,
            "WriteVoltage": true
          },
          "boron": {
            "CheerLights": true,
            "ReadLastTemperature": true,
            "ReadPrivateChannel": true,
            "ReadWeatherStation": true,
            "WriteMultipleVoltages": false,
            "WriteVoltage": true
          }
        },
        "5.0.1": {
          "argon": {
            "CheerLights": true,
            "ReadLastTemperature": true,
            "ReadPrivateChannel": true,
            "ReadWeatherStation": true,
            "WriteMultipleVoltages": false,
            "WriteVoltage": true
          },
          "boron": {
            "CheerLights": true,
            "ReadLastTemperature": true,
            "ReadPrivateChannel": true,
            "ReadWeatherStation": true,
            "WriteMultipleVoltages": false,
            "WriteVoltage": true
          },
          "bsom": {
            "CheerLights": false,
            "ReadLastTemperature": false,
            "ReadPrivateChannel": false,
            "ReadWeatherStation": false,
            "WriteMultipleVoltages": false,
            "WriteVoltage": false
          },
          "b5som": {
            "CheerLights": false,
            "ReadLastTemperature": false,
            "ReadPrivateChannel": false,
            "ReadWeatherStation": false,
            "WriteMultipleVoltages": false,
            "WriteVoltage": false
          },
          "tracker": {
            "CheerLights": false,
            "ReadLastTemperature": false,
            "ReadPrivateChannel": false,
            "ReadWeatherStation": false,
            "WriteMultipleVoltages": false,
            "WriteVoltage": false
          },
          "p2": {
            "CheerLights": false,
            "ReadLastTemperature": false,
            "ReadPrivateChannel": false,
            "ReadWeatherStation": false,
            "WriteMultipleVoltages": false,
            "WriteVoltage": false
          }
        },
        "4.0.0": {
          "argon": {
            "CheerLights": true,
            "ReadLastTemperature": true,
            "ReadPrivateChannel": true,
            "ReadWeatherStation": true,
            "WriteMultipleVoltages": false,
            "WriteVoltage": true
          },
          "boron": {
            "CheerLights": true,
            "ReadLastTemperature": true,
            "ReadPrivateChannel": true,
            "ReadWeatherStation": true,
            "WriteMultipleVoltages": false,
            "WriteVoltage": true
          },
          "bsom": {
            "CheerLights": false,
            "ReadLastTemperature": false,
            "ReadPrivateChannel": false,
            "ReadWeatherStation": false,
            "WriteMultipleVoltages": false,
            "WriteVoltage": false
          },
          "b5som": {
            "CheerLights": false,
            "ReadLastTemperature": false,
            "ReadPrivateChannel": false,
            "ReadWeatherStation": false,
            "WriteMultipleVoltages": false,
            "WriteVoltage": false
          },
          "tracker": {
            "CheerLights": false,
            "ReadLastTemperature": false,
            "ReadPrivateChannel": false,
            "ReadWeatherStation": false,
            "WriteMultipleVoltages": false,
            "WriteVoltage": false
          },
          "esomx": {
            "CheerLights": false,
            "ReadLastTemperature": false,
            "ReadPrivateChannel": false,
            "ReadWeatherStation": false,
            "WriteMultipleVoltages": false,
            "WriteVoltage": false
          }
        }
      },
      "added": "2022-06-17T10:16:53.648Z"
    }
  },
  "readme": "# ThingSpeak Communication Library for Particle\r\n\r\nThis library enables Particle hardware to write or read data to or from ThingSpeak, an open data platform for the Internet of Things with MATLAB analytics and visualization.\r\n\r\nThingSpeak offers free data storage and analysis of time-stamped numeric or alphanumeric data. Users can access ThingSpeak by visiting https://thingspeak.com and creating a ThingSpeak user account.\r\n\r\nThingSpeak stores data in channels. Channels support an unlimited number of timestamped observations (think of these as rows in a spreadsheet). Each channel has up to 8 fields (think of these as columns in a speadsheet). Check out this [video](http://www.mathworks.com/videos/introduction-to-thingspeak-107749.html) for an overview.\r\n\r\nChannels may be public, where anyone can see the data, or private, where only the owner and select users can read the data. Each channel has an associated Write API Key that is used to control who can write to a channel. In addition, private channels have one or more Read API Keys to control who can read from private channel. An API Key is not required to read from public channels.  Each channel can have up to 8 fields. One field is created by default.\r\n\r\nYou can visualize and do online analytics of your data on ThingSpeak using the built-in version of MATLAB, or use the desktop version of MATLAB to get deeper historical insight. Visit https://www.mathworks.com/hardware-support/thingspeak.html to learn more.\r\n\r\n#### Particle Web IDE\r\nIn the Particle Web IDE, click the libraries tab, find ThingSpeak, and choose \"Include in App\"\r\n\r\n## Compatible Hardware:\r\n* Particle (Formally Spark) Core, [Photon](https://www.particle.io/prototype#photon), [Electron](https://www.particle.io/prototype#electron) and [P1](https://www.particle.io/prototype#p0-and-p1).\r\n\r\n# Some Quick Examples\r\n\r\n## Write to a Channel Field\r\n```\r\n#include \"ThingSpeak.h\"\r\n\r\nTCPClient client;\r\n\r\nunsigned long myChannelNumber = 31461;\t// change this to your channel number\r\nconst char * myWriteAPIKey = \"LD79EOAAWRVYF04Y\"; // change this to your channels write API key\r\n\r\nvoid setup() {\r\n\tThingSpeak.begin(client);\r\n}\r\n\r\nvoid loop() {\r\n\t// read the input on analog pin 0:\r\n\tint sensorValue = analogRead(A0);\r\n\t\r\n\t// Write to ThingSpeak, field 1, immediately\r\n\tThingSpeak.writeField(myChannelNumber, 1, sensorValue, myWriteAPIKey);\r\n\tdelay(20000); // ThingSpeak will only accept updates every 15 seconds.\r\n}\r\n\r\n```\r\n## Write to a Multiple Channel fields at once\r\n```\r\n#include \"ThingSpeak.h\"\r\n\r\nTCPClient client;\r\n\r\nunsigned long myChannelNumber = 31461;\t// change this to your channel number\r\nconst char * myWriteAPIKey = \"LD79EOAAWRVYF04Y\"; // change this to your channel write API key\r\n\r\nvoid setup() {\r\n\tThingSpeak.begin(client);\r\n}\r\n\r\nvoid loop(){\r\n\t// read the input on analog pins 1, 2 and 3:\r\n\tint sensorValue1 = analogRead(A1);\r\n\tint sensorValue2 = analogRead(A2);\r\n\tint sensorValue3 = analogRead(A3);\r\n\t\r\n\t// set fields one at a time\r\n\tThingSpeak.setField(1,sensorValue1);\r\n\tThingSpeak.setField(2,sensorValue2);\r\n\tThingSpeak.setField(3,sensorValue3);\r\n\t\r\n\t// set the status if over the threshold\r\n\tif(sensorValue1 > 100){\r\n\t\tThingSpeak.setStatus(\"ALERT! HIGH VALUE\");\r\n\t}\r\n\t\r\n\t// Write the fields that you've set all at once.\r\n\tThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\r\n\t\r\n\tdelay(20000); // ThingSpeak will only accept updates every 15 seconds.\r\n}\r\n\r\n```\r\n## Read from a Public Channel\r\n```\r\n#include \"ThingSpeak.h\"\r\n\r\nTCPClient client;\r\n\r\nunsigned long weatherStationChannelNumber = 12397;\r\n\r\nvoid setup() { \r\n  ThingSpeak.begin(client);\r\n}\r\n\r\nvoid loop(){\r\n\t\r\n\t// Read latest measurements from the weather station in Natick, MA\r\n\tfloat temperature = ThingSpeak.readFloatField(weatherStationChannelNumber,4);\r\n\tfloat humidity = ThingSpeak.readFloatField(weatherStationChannelNumber,3);\r\n\t\r\n\tParticle.publish(\"thingspeak-weather\", \"Current weather conditions in Natick: \",60,PRIVATE);\r\n\tParticle.publish(\"thingspeak-weather\", String(temperature) + \" degrees F, \" + String(humidity) + \"% humidity\",60,PRIVATE); \r\n\t\r\n\tdelay(60000); // Note that the weather station only updates once a minute\r\n\r\n}\r\n```\r\n## Read from a Private Channel\r\n```\r\n#include \"ThingSpeak.h\"\r\n\r\nTCPClient client;\r\n\r\nunsigned long myChannelNumber = 31461;\r\nconst char * myReadAPIKey = \"NKX4Z5JGO4M5I18A\";\r\n\r\nvoid setup() { \r\n  ThingSpeak.begin(client);\r\n}\r\n\r\nvoid loop(){\r\n\t\r\n\t // Read the latest value from field 1 of channel 31461\r\n\tfloat value = ThingSpeak.readFloatField(myChannelNumber, 1, myReadAPIKey);\r\n\t\r\n\tParticle.publish(\"thingspeak-value\", \"Latest value is: \" + String(value),60,PRIVATE);\r\n\tdelay(30000);\r\n\r\n}\r\n```\r\n\r\n# <a id=\"documentation\">Documentation</a>\r\n\r\n## begin\r\nInitializes the ThingSpeak library and network settings.\r\n```\r\nbool begin (client)  // defaults to port 80\r\n```\r\n```\r\nbool begin (client, port)\r\n```\r\n| Parameter      | Type         | Description                                            |          \r\n|----------------|:-------------|:-------------------------------------------------------|\r\n| client         | Client &     | TCPClient created earlier in the sketch                |\r\n\r\n| port           | unsigned int | Specific port number to use                            |\r\n\r\n### Returns\r\nAlways returns true. This does not validate the information passed in, or generate any calls to ThingSpeak.\r\n\r\n## writeField\r\nWrite a value to a single field in a ThingSpeak channel.\r\n```\r\nint writeField(channelNumber, field, value, writeAPIKey)\r\n```\r\n| Parameter     | Type          | Description                                                                                     |          \r\n|---------------|:--------------|:------------------------------------------------------------------------------------------------|\r\n| channelNumber | unsigned long | Channel number                                                                                  |\r\n| field         | unsigned int  | Field number (1-8) within the channel to write to.                                              |\r\n| value         | int           | Integer value (from -32,768 to 32,767) to write.                                                |\r\n|               | long          | Long value (from -2,147,483,648 to 2,147,483,647) to write.                                     |\r\n|               | float         | Floating point value (from -999999000000 to 999999000000) to write.                             |\r\n|               | String        | String to write (UTF8 string). ThingSpeak limits this field to 255 bytes.                       |\r\n|               | const char *  | Character array (zero terminated) to write (UTF8). ThingSpeak limits this field to 255 bytes.   |\r\n| writeAPIKey   | const char *  | Write API key associated with the channel. If you share code with others, do not share this key |\r\n\r\n### Returns\r\nHTTP status code of 200 if successful. See Return Codes below for other possible return values.\r\n\r\n### Remarks\r\nSpecial characters will be automatically encoded by this method. See the note regarding special characters below.\r\n\r\n## writeFields\r\nWrite a multi-field update. Call setField() for each of the fields you want to write first. \r\n```\r\nint writeFields (channelNumber, writeAPIKey)\t\r\n```\r\n| Parameter     | Type          | Description                                                                                     |          \r\n|---------------|:--------------|:------------------------------------------------------------------------------------------------|\r\n| channelNumber | unsigned long | Channel number                                                                                  |\r\n| writeAPIKey   | const char *  | Write API key associated with the channel. If you share code with others, do not share this key |\r\n\r\n### Returns\r\nHTTP status code of 200 if successful. See Return Codes below for other possible return values.\r\n\r\n### Remarks\r\nSpecial characters will be automatically encoded by this method. See the note regarding special characters below.\r\n\r\n## writeRaw\r\nWrite a raw POST to a ThingSpeak channel. \r\n```\r\nint writeRaw (channelNumber, postMessage, writeAPIKey)\t\r\n```\r\n\r\n| Parameter     | Type          | Description                                                                                                                                       |          \r\n|---------------|:--------------|:--------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| channelNumber | unsigned long | Channel number                                                                                                                                    |\r\n| postMessage   | const char *  | Raw URL to write to ThingSpeak as a String. See the documentation at https://thingspeak.com/docs/channels#update_feed.                            |\r\n|               | String        | Raw URL to write to ThingSpeak as a character array (zero terminated). See the documentation at https://thingspeak.com/docs/channels#update_feed. | \r\n| writeAPIKey   | const char *  | Write API key associated with the channel. If you share code with others, do not share this key                                                   |\r\n\r\n### Returns\r\nHTTP status code of 200 if successful. See Return Codes below for other possible return values.\r\n\r\n### Remarks\r\nThis method will not encode special characters in the post message.  Use '%XX' URL encoding to send special characters. See the note regarding special characters below.\r\n\r\n## setField\r\nSet the value of a single field that will be part of a multi-field update.\r\n```\r\nint setField (field, value)\r\n```\r\n\r\n| Parameter | Type         | Description                                                                                   |          \r\n|-----------|:-------------|:----------------------------------------------------------------------------------------------|\r\n| field     | unsigned int | Field number (1-8) within the channel to set                                                  |\r\n| value     | int          | Integer value (from -32,768 to 32,767) to write.                                              |\r\n|           | long         | Long value (from -2,147,483,648 to 2,147,483,647) to write.                                   |\r\n|           | float        | Floating point value (from -999999000000 to 999999000000) to write.                           |\r\n|           | String       | String to write (UTF8 string). ThingSpeak limits this field to 255 bytes.                     |\r\n|           | const char * | Character array (zero terminated) to write (UTF8). ThingSpeak limits this field to 255 bytes. |\r\n\r\n### Returns\r\nHTTP status code of 200 if successful. See Return Codes below for other possible return values.\r\n\r\n## setStatus\r\nSet the status of a multi-field update. Use status to provide additonal details when writing a channel update. Additionally, status can be used by the ThingTweet App to send a message to Twitter.\r\n```\r\nint setStatus (status)\t\r\n```\r\n\r\n| Parameter | Type      | Description                                                                   |          \r\n|--------|:-------------|:------------------------------------------------------------------------------|\r\n| status | const char * | String to write (UTF8). ThingSpeak limits this to 255 bytes.                  |\r\n|        | String       | const character array (zero terminated). ThingSpeak limits this to 255 bytes. |\r\n\r\n### Returns\r\nHTTP status code of 200 if successful. See Return Codes below for other possible return values.\r\n\r\n## setLatitude\r\nSet the latitude of a multi-field update.\r\n```\r\nint setLatitude\t(latitude)\t\r\n```\r\n\r\n| Parameter | Type  | Description                                                                |          \r\n|-----------|:------|:---------------------------------------------------------------------------|\r\n| latitude  | float | Latitude of the measurement (degrees N, use negative values for degrees S) |\r\n\r\n### Returns\r\nHTTP status code of 200 if successful. See Return Codes below for other possible return values.\r\n\r\n## setLongitude\r\nSet the longitude of a multi-field update.\r\n```\r\nint setLongitude (longitude)\t\r\n```\r\n\r\n| Parameter | Type  | Description                                                                 |          \r\n|-----------|:------|:----------------------------------------------------------------------------|\r\n| longitude | float | Longitude of the measurement (degrees E, use negative values for degrees W) |\r\n\r\n### Returns\r\nHTTP status code of 200 if successful. See Return Codes below for other possible return values.\r\n\r\n## setElevation\r\nSet the elevation of a multi-field update.\r\n```\r\nint setElevation (elevation)\t\r\n```\r\n\r\n| Parameter | Type      | Description                                         |          \r\n|-----------|:------|:--------------------------------------------------------|\r\n| elevation | float | \tElevation of the measurement (meters above sea level) |\r\n\r\n### Returns\r\nHTTP status code of 200 if successful. See Return Codes below for other possible return values.\r\n\r\n## setCreatedAt\r\nSet the created-at date of a multi-field update. The timestamp string must be in the ISO 8601 format. Example \"2017-01-12 13:22:54\"\r\n```\r\nint setCreatedAt (createdAt)\r\n```\r\n\r\n| Parameter | Type         | Description                                                                                      |          \r\n|-----------|:-------------|:-------------------------------------------------------------------------------------------------|\r\n| createdAt | String       | Desired timestamp to be included with the channel update as a String.                            |\r\n|           | const char * | Desired timestamp to be included with the channel update as a character array (zero terminated). |\r\n\r\n### Returns\r\nHTTP status code of 200 if successful. See Return Codes below for other possible return values.\r\n\r\n### Remarks\r\nTimezones can be set using the timezone hour offset parameter. For example, a timestamp for Eastern Standard Time is: \"2017-01-12 13:22:54-05\". If no timezone hour offset parameter is used, UTC time is assumed.\r\n\r\n## setTwitterTweet\r\nSet the Twitter account and message to use for an update to be tweeted.\r\n```\r\nint setTwitterTweet\t(twitter, tweet)\t\r\n```\r\n\r\n| Parameter | Type         | Description                                                                      |          \r\n|-----------|:-------------|:---------------------------------------------------------------------------------|\r\n| twitter   | String       | Twitter account name as a String.                                                |\r\n|           | const char * | Twitter account name as a character array (zero terminated).                     |\r\n| tweet     | String       | Twitter message as a String (UTF-8) limited to 140 character.                    |\r\n|           | const char * | Twitter message as a character array (zero terminated) limited to 140 character. |\r\n\r\n### Returns\r\nHTTP status code of 200 if successful. See Return Codes below for other possible return values.\r\n\r\n### Remarks\r\nPrior to using this feature, a twitter account must be linked to your ThingSpeak account. To link your twitter account. login to ThingSpeak and go to Apps -> ThingTweet and click Link Twitter Account.\r\n\r\n## readStringField\r\nRead the latest string from a channel. Include the readAPIKey to read a private channel.\r\n```\r\nString readStringField (channelNumber, field, readAPIKey)\t\r\n```\r\n```\r\nString readStringField (channelNumber, field)\t\r\n```\r\n\r\n| Parameter     | Type          | Description                                                                                    |          \r\n|---------------|:--------------|:-----------------------------------------------------------------------------------------------|\r\n| channelNumber | unsigned long | Channel number                                                                                 |\r\n| field         | unsigned int  | Field number (1-8) within the channel to read from.                                            |\r\n| readAPIKey    | const char *  | Read API key associated with the channel. If you share code with others, do not share this key |\r\n\r\n### Returns\r\nValue read (UTF8 string), or empty string if there is an error.\r\n\r\n## readFloatField\r\nRead the latest float from a channel. Include the readAPIKey to read a private channel.\r\n```\r\nfloat readFloatField (channelNumber, field, readAPIKey)\t\r\n```\r\n```\r\nfloat readFloatField (channelNumber, field)\t\r\n```\r\n\r\n| Parameter     | Type          | Description                                                                                    |          \r\n|---------------|:--------------|:-----------------------------------------------------------------------------------------------|\r\n| channelNumber | unsigned long | Channel number                                                                                 |\r\n| field         | unsigned int  | Field number (1-8) within the channel to read from.                                            |\r\n| readAPIKey    | const char *  | Read API key associated with the channel. If you share code with others, do not share this key |\r\n\r\n### Returns\r\nValue read, or 0 if the field is text or there is an error. Use getLastReadStatus() to get more specific information. Note that NAN, INFINITY, and -INFINITY are valid results. \r\n\r\n## readLongField\r\nRead the latest long from a channel. Include the readAPIKey to read a private channel.\r\n```\r\nlong readLongField (channelNumber, field, readAPIKey)\t\r\n```\r\n```\r\nlong readLongField (channelNumber, field)\t\r\n```\r\n\r\n| Parameter     | Type          | Description                                                                                    |          \r\n|---------------|:--------------|:-----------------------------------------------------------------------------------------------|\r\n| channelNumber | unsigned long | Channel number                                                                                 |\r\n| field         | unsigned int  | Field number (1-8) within the channel to read from.                                            |\r\n| readAPIKey    | const char *  | Read API key associated with the channel. If you share code with others, do not share this key |\r\n\r\n### Returns\r\nValue read, or 0 if the field is text or there is an error. Use getLastReadStatus() to get more specific information. \r\n\r\n## readIntField\r\nRead the latest int from a channel. Include the readAPIKey to read a private channel.\r\n```\r\nint readIntField (channelNumber, field, readAPIKey)\t\t\r\n```\r\n```\r\nint readIntField (channelNumber, field)\t\t\r\n```\r\n\r\n| Parameter     | Type          | Description                                                                                    |          \r\n|---------------|:--------------|:-----------------------------------------------------------------------------------------------|\r\n| channelNumber | unsigned long | Channel number                                                                                 |\r\n| field         | unsigned int  | Field number (1-8) within the channel to read from.                                            |\r\n| readAPIKey    | const char *  | Read API key associated with the channel. If you share code with others, do not share this key |\r\n\r\n### Returns\r\nValue read, or 0 if the field is text or there is an error. Use getLastReadStatus() to get more specific information. If the value returned is out of range for an int, the result is undefined. \r\n\r\n## readStatus\r\nRead the latest status from a channel. Include the readAPIKey to read a private channel.\r\n```\r\nString readStatus (channelNumber, readAPIKey)\t\r\n```\r\n```\r\nString readStatus (channelNumber)\r\n```\r\n\r\n| Parameter     | Type          | Description                                                                                    |          \r\n|---------------|:--------------|:-----------------------------------------------------------------------------------------------|\r\n| channelNumber | unsigned long | Channel number                                                                                 |\r\n| readAPIKey    | const char *  | Read API key associated with the channel. If you share code with others, do not share this key |\r\n\r\n### Returns\r\nReturns the status field as a String.\r\n\r\n## String readCreatedAt()\r\nRead the created-at timestamp associated with the latest update to a channel. Include the readAPIKey to read a private channel.\r\n```\r\nString readCreatedAt (channelNumber, readAPIKey)\r\n```\r\n```\r\nString readCreatedAt (channelNumber)\t\r\n```\r\n\r\n| channelNumber | unsigned long | Channel number                                                                                 |\r\n| readAPIKey    | const char *  | Read API key associated with the channel. If you share code with others, do not share this key |\r\n\r\n### Returns\r\nReturns the created-at timestamp as a String.\r\n\r\n## readRaw\r\nRead a raw response from a channel. Include the readAPIKey to read a private channel.\r\n```\r\nString readRaw (channelNumber, URLSuffix, readAPIKey)\t\r\n```\r\n```\r\nString readRaw\t(channelNumber, URLSuffix)\r\n```\r\n\r\n| Parameter     | Type          | Description                                                                                                        |          \r\n|---------------|:--------------|:-------------------------------------------------------------------------------------------------------------------|\r\n| channelNumber | unsigned long | Channel number                                                                                                     |\r\n| URLSuffix     | String        | Raw URL to write to ThingSpeak as a String. See the documentation at https://thingspeak.com/docs/channels#get_feed |\r\n| readAPIKey    | const char *  | Read API key associated with the channel. If you share code with others, do not share this key.                    |     \r\n\r\n### Returns\r\nReturns the raw response from a HTTP request as a String.\r\n\r\n## getLastReadStatus\r\nGet the status of the previous read.\r\n```\r\nint getLastReadStatus ()\t\r\n```\r\n\r\n### Returns\r\nSee Return Codes below for other possible return values.\r\n\r\n## Return Codes\r\n| Value | Meaning                                                                                   |\r\n|-------|:----------------------------------------------------------------------------------------|\r\n| 200   | OK / Success                                                                            |\r\n| 404   | Incorrect API key (or invalid ThingSpeak server address)                                |\r\n| -101  | Value is out of range or string is too long (> 255 characters)                          |\r\n| -201  | Invalid field number specified                                                          |\r\n| -210  | setField() was not called before writeFields()                                          |\r\n| -301  | Failed to connect to ThingSpeak                                                         |\r\n| -302  | Unexpected failure during write to ThingSpeak                                           |\r\n| -303  | Unable to parse response                                                                |\r\n| -304  | Timeout waiting for server to respond                                                   |\r\n| -401  | Point was not inserted (most probable cause is the rate limit of once every 15 seconds) |\r\n|    0  | Other error                                                                             |\r\n\r\n## Special Characters\r\nSome characters require '%XX' style URL encoding before sending to ThingSpeak.  The writeField() and writeFields() methods will perform the encoding automatically.  The writeRaw() method will not.\r\n\r\n| Character  | Encoding |\r\n|------------|:---------|\r\n|     \"      | %22      |\r\n|     %      | %25      |\r\n|     &      | %26      |\r\n|     +      | %2B      |\r\n|     ;      | %3B      |\r\n\r\nControl characters, ASCII values 0 though 31, are not accepted by ThingSpeak and will be ignored.  Extended ASCII characters with values above 127 will also be ignored. \r\n\r\n# Additional Examples\r\n\r\nThe library source includes several examples to help you get started. These are accessible in ThingSpeak library section of the Particle Web IDE.\r\n\r\n* **CheerLights:** Reads the latest CheerLights color on ThingSpeak, and sets an RGB LED.\r\n* **ReadLastTemperature:** Reads the latest temperature from the public MathWorks weather station in Natick, MA on ThingSpeak.\r\n* **ReadPrivateChannel:** Reads the latest voltage value from a private channel on ThingSpeak.\r\n* **ReadWeatherStation:** Reads the latest weather data from the public MathWorks weather station in Natick, MA on ThingSpeak.\r\n* **WriteMultipleVoltages:** Reads analog voltages from pins A1-A6 and writes them to the fields of a channel on ThingSpeak.\r\n* **WriteVoltage:** Reads an analog voltage from pin 0, converts to a voltage, and writes it to a channel on ThingSpeak.\r\n",
  "allVersions": [
    "1.5.1",
    "1.5.0",
    "1.4.2",
    "1.4.1",
    "1.4.0",
    "1.3.1",
    "1.3.0",
    "1.1.5",
    "1.1.4",
    "1.1.3",
    "1.1.1",
    "1.1.0",
    "1.0.2",
    "1.0.1",
    "1.0.0"
  ]
}
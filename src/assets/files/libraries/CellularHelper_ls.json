{
  "type": "libraries",
  "id": "CellularHelper_ls",
  "links": {
    "download": "https://api.particle.io/v1/libraries/CellularHelper_ls/archive/0.0.5.tar.gz"
  },
  "attributes": {
    "name": "CellularHelper_ls",
    "version": "0.0.5",
    "installs": 486,
    "license": "MIT",
    "author": "rickkas7@rickkas7.com",
    "sentence": "Handy utility for the Electron cellular modem",
    "url": "https://github.com/rickkas7/CellularHelper",
    "repository": "https://github.com/rickkas7/CellularHelper.git",
    "architectures": [
      "particle-electron"
    ],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "c",
  "cardUrl": "/cards/libraries/c/CellularHelper_ls",
  "versions": {
    "0.0.5": {
      "builds": {
        "2.0.1": {
          "photon": {
            "1-simple": false,
            "2-show-carriers": false
          },
          "electron": {
            "1-simple": true,
            "2-show-carriers": true
          },
          "argon": {
            "1-simple": false,
            "2-show-carriers": false
          },
          "boron": {
            "1-simple": true,
            "2-show-carriers": true
          }
        },
        "1.5.2": {
          "photon": {
            "1-simple": false,
            "2-show-carriers": false
          },
          "electron": {
            "1-simple": true,
            "2-show-carriers": true
          },
          "argon": {
            "1-simple": false,
            "2-show-carriers": false
          },
          "boron": {
            "1-simple": true,
            "2-show-carriers": true
          }
        },
        "3.3.0": {
          "photon": {
            "1-simple": false,
            "2-show-carriers": false
          },
          "electron": {
            "1-simple": true,
            "2-show-carriers": true
          },
          "argon": {
            "1-simple": false,
            "2-show-carriers": false
          },
          "boron": {
            "1-simple": true,
            "2-show-carriers": true
          }
        }
      },
      "added": "2022-06-17T10:16:54.043Z"
    }
  },
  "readme": "# Cellular Helper\n\n**A library to access useful things from the Electron cellular modem**\n\nThis library uses the Logging functionality, so it can only be used with system firmware 0.6.0 and later. It also can only be used on an Electron, not a Photon/P1/Core, for obvious reasons.\n\n## Simple functions\n\nThe simple information calls query information from the modem and return a String.\n\n```\nLog.info(\"manufacturer=%s\", CellularHelper.getManufacturer().c_str());\n\nLog.info(\"model=%s\", CellularHelper.getModel().c_str());\n\nLog.info(\"firmware version=%s\", CellularHelper.getFirmwareVersion().c_str());\n\nLog.info(\"ordering code=%s\", CellularHelper.getOrderingCode().c_str());\n\nLog.info(\"IMEI=%s\", CellularHelper.getIMEI().c_str());\n\nLog.info(\"IMSI=%s\", CellularHelper.getIMSI().c_str());\n\nLog.info(\"ICCID=%s\", CellularHelper.getICCID().c_str());\n```\n\nThese are all just various bits of data from the modem or the SIM card. \n\n```\n0000008020 [app] INFO: manufacturer=u-blox\n0000008040 [app] INFO: model=SARA-U260\n0000008060 [app] INFO: firmware version=23.20\n0000008090 [app] INFO: ordering code=SARA-U260-00S-00\n```\n\nYou might find the ICCID (SIM Number) to be useful as well.\n\nCellular.on needs to have been called, which will be for automatic mode. \n\nNote that if you are using threaded mode with semi-automatic or manual mode you must also wait after turning the modem on. 4 seconds should be sufficient, because Cellular.on() is asynchronous and there's no call to determine if has completed yet.\n\n\n## Cellular connection functions\n\nThese functions can only be used after connecting to the cellular network.\n\n### getOperatorName\n\nReturns a string containing the operator name, for example AT&T or T-Mobile in the United States.\n\n```\nLog.info(\"operator name=%s\", CellularHelper.getOperatorName().c_str());\n```\n\nExample output:\n\n```\n0000008574 [app] INFO: operator name=AT&T\n```\n\n### getRSSIQual\n\nReturns the RSSI (signal strength) value and a quality value.\n\n```\nCellularHelperRSSIQualResponse rssiQual = CellularHelper.getRSSIQual();\nint bars = CellularHelperClass::rssiToBars(rssiQual.rssi);\n\nLog.info(\"rssi=%d, qual=%d, bars=%d\", rssiQual.rssi, rssiQual.qual, bars);\n```\n\n```\n0000008595 [app] INFO: rssi=-75, qual=2, bars=3\n```\n\nThe RSSI is in dBm, the standard measure of signal strength. It's a negative value, and values closer to 0 are higher signal strength.\n\nThe quality value is 0 (highest quality) to 7 (lowest quality) or 99 if the value unknown. It's typically 99 for 2G connections. The qual value is described in the u-blox documenation, and it's returned by the call, but you probably won't need to use it.\n\nThe rssiToBars() method converts the RSSI to a 0 to 5 bars, where 5 is the strongest signal.\n\n\n### getEnvironment\n\nThe method getEnvironment returns cell tower information. The is the u-blox AT+CGED comamnd.\n\n```\nCellularHelperEnvironmentResponseStatic<8> envResp;\n\nCellularHelper.getEnvironment(CellularHelper.ENVIRONMENT_SERVING_CELL_AND_NEIGHBORS, envResp);\nif (envResp.resp != RESP_OK) {\n\t// We couldn't get neighboring cells, so try just the receiving cell\n\tCellularHelper.getEnvironment(CellularHelper.ENVIRONMENT_SERVING_CELL, envResp);\n}\nenvResp.logResponse();\n\n```\n\nThe first line declares a variable to hold up to 8 neighbor towers.\n\nThe first getEnvironment call tries to get the serving cell (the one you're connected to) and the neighbor cells. This only works for me on the 2G (G350) Electron.\n\nIf that fails, it will try again only using the serving cell information.\n\nThis sample just prints the information to serial debug:\n\n```\n0000008645 [app] INFO: service rat=UMTS mcc=310, mnc=410, lac=2cf7 ci=8a5a782 band=UMTS 850 rssi=0 dlf=4384 ulf=4159\n```\n\nNote that the rssi will always be 0 for 3G towers. This information is only returned by the AT+CGED command for 2G towers. You can use getRSSIQual() to get the RSSI for the connected tower; that works for 3G.\n\n### getLocation\n\nThis function returns the location of the Electron, using cell tower location. This call may take 10 seconds to complete!\n\n```\nCellularHelperLocationResponse locResp = CellularHelper.getLocation();\nLog.info(locResp.toString());\n```\n\nThe locResp contains the member variables:\n\n- lat - The latitude (in degrees, -90 to +90)\n- lon - The longitude (in degrees, -180 to +180)\n- alt - The altitude (in meters)\n- uncertainty - The radius of the circle of uncertainty (in meters)\n\t\n\n## Miscellaneous Utilities\n\nThese are just handy functions.\n\n### ping\n\nUses the ping function (ICMP echo) to determine if a server on the Internet is accessible. Not all servers respond to ping. The function returns true if the ping is responded to. Only one attempt is made.\n\n```\nLog.info(\"ping 8.8.8.8=%d\", CellularHelper.ping(\"8.8.8.8\"));\n```\n\nResult:\n\n```\n0000014927 [app] INFO: ping 8.8.8.8=1\n```\n\n### dnsLookup\n\nThis does a DNS (domain name service) hostname lookup and returns an IP address for that server.\n\n```\nLog.info(\"dns device.spark.io=%s\", CellularHelper.dnsLookup(\"device.spark.io\").toString().c_str());\n```\n\nResult:\n\n```\n0000015857 [app] INFO: dns device.spark.io=54.225.2.62\n```\n\nIf the host name cannot be resolved (does not exist or no DNS available) then the empty IP address is returned. This can be tested for by checking:\n\n```\nif (addr)\n```\n\nOr when printed as above, will be 0.0.0.0.\n\n\n## Simple Demo\n\nThe simple demo tests all of the basic functions in the library, displaying the results to USB serial.\n\nThe code examples in this document were taken from this example.\n\n\n## Operator Scan Demo\n\nThis is a demo program that uses the cellular modem to scan for available operators, frequency band used, and signal strength. It prints a result like this to USB serial:\n\n```\n3G AT&T UMTS 850 2 bars\n3G AT&T UMTS 850 2 bars\n2G T-Mobile DCS 1800 or 1900 2 bars\n2G T-Mobile DCS 1800 or 1900 2 bars\n```\n\nIt should work even when you can't connect to a tower and also display carriers that are not supported by your SIM. (It only displays carriers compatible with the GSM modem, however, so it won't, for example, display Verizon in the United States since that requires a PCS modem.)\n\nThis is a very time consuming operation (it can take 2 minutes or longer to run) and it's pretty rarely needed, so it builds on the CellularHelper library but the commands it uses (COPS and COPN) are not part of the library itself because they're so rarely needed.\n\nTo build a binary for this, you can download the repository and use the Particle CLI compiler from the top level of it:\n\n```\nparticle compile electron examples/2-show-carriers/ --saveTo firmware.bin --target 0.6.0\n```\n\nThen you can flash it to your Electron in DFU mode (blinking yellow):\n\n```\nparticle flash --usb firmware.bin\n```\n",
  "allVersions": [
    "0.0.5"
  ]
}
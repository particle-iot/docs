{
  "type": "libraries",
  "id": "MPU9250_I2C",
  "links": {
    "download": "https://api.particle.io/v1/libraries/MPU9250_I2C/archive/0.0.3.tar.gz"
  },
  "attributes": {
    "name": "MPU9250_I2C",
    "version": "0.0.3",
    "installs": 2659,
    "author": "Juan David Velasquez Rosero <jdvr1994@hotmail.com>",
    "sentence": "An Implementation of Mpu9250 Library for the Particle Photon",
    "url": "https://github.com/jdvr1994/MPU9250PhotonLibrary",
    "repository": "https://github.com/jdvr1994/MPU9250PhotonLibrary.git",
    "architectures": [],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "m",
  "cardUrl": "/cards/libraries/m/MPU9250_I2C",
  "versions": {
    "0.0.3": {
      "builds": {
        "2.0.1": {
          "photon": {
            "readsensors": false
          },
          "electron": {
            "readsensors": false
          },
          "argon": {
            "readsensors": false
          },
          "boron": {
            "readsensors": false
          }
        },
        "1.5.2": {
          "photon": {
            "readsensors": false
          },
          "electron": {
            "readsensors": false
          },
          "argon": {
            "readsensors": false
          },
          "boron": {
            "readsensors": false
          }
        },
        "3.3.0": {
          "photon": {
            "readsensors": false
          },
          "electron": {
            "readsensors": false
          },
          "argon": {
            "readsensors": false
          },
          "boron": {
            "readsensors": false
          }
        }
      },
      "added": "2022-06-17T10:16:53.862Z"
    }
  },
  "readme": "# MPU9250Library\r\nThis is a library of MPU9250 devices (Inertial and Magnetic Array Sensors) for Particle Photon\r\n\r\n## Supported MPU9250 devices\r\n\r\n## Usage\r\n\r\nSet up the hardware:\r\n- A MPU9250 device with I2C Protocol\r\n\r\nFlash the [mpu9250 example](examples/mpu9250Example.cpp).\r\n\r\nAdapt it to your needs while keeping this general structure:\r\n\r\n```cpp\r\nMPU9250 margSensor();\r\nint16_t dataSensor[10];\r\n\r\nvoid setup() {\r\n  margSensor.begin();\r\n}\r\nvoid loop() {\r\n  margSensor.Read9Axis(dataSensor);\r\n  // The sensor values is stored in dataSensor[x] as follows:\r\n  // dataSensor[0] ~ dataSensor[2] (Acceleration X Axis - Acceleration Y Axis - Acceleration Z Axis)\r\n  // dataSensor[3] (Temperature)\r\n  // dataSensor[4] ~ dataSensor[6] (AngularRate X Axis - AngularRate Y Axis - AngularRate Z Axis)\r\n  // dataSensor[7] ~ dataSensor[9] ( MagneticComponent X Axis - MagneticComponent Y Axis - MagneticComponent Z Axis)\r\n}\r\n```\r\n\r\n## Documentation\r\n\r\n### `MPU9250`\r\n\r\n```\r\n// IMPORTANT: Create dataSensor array for to store all readings\r\nint16_t dataSensor[10];\r\n```\r\n\r\n### `begin`\r\n\r\n`margSensor.begin();`\r\n\r\nSets up the the operating mode of mpu9250 devices.\r\n\r\n### `getGyroOffsets`\r\n\r\n```\r\nint16_t GyroOffsets[3]; //we will save the readings of the offsets in this array\r\nmargSensor.getGyroOffsets(GyroOffsets);\r\nSerial.printlnf(\"GyroOffset X:  %d\", GyroOffsets[0]);\r\nSerial.printlnf(\"GyroOffset Y:  %d\", GyroOffsets[1]);\r\nSerial.printlnf(\"GyroOffset Z:  %d\", GyroOffsets[2]);\r\n```\r\n\r\nThis function allows us to read the offsets gyroscope Register and store them in the pointer GyroOffsets\r\n\r\n### `getAccelOffsets`\r\n\r\n```\r\nint16_t AccelOffsets[3]; //we will save the readings of the offsets in this array\r\nmargSensor.getAccelOffsets(AccelOffsets);\r\nSerial.printlnf(\"AccelOffset X:  %d\", AccelOffsets[0]);\r\nSerial.printlnf(\"AccelOffset Y:  %d\", AccelOffsets[1]);\r\nSerial.printlnf(\"AccelOffset Z:  %d\", AccelOffsets[2]);\r\n```\r\n\r\nThis function allows us to read the offsets accelerometer Register and store them in the pointer AccelOffsets\r\n\r\n### `setGyroOffsetX`\r\n### `setGyroOffsetY`\r\n### `setGyroOffsetZ`\r\n\r\n```\r\nint16_t gxOffset = 543;\r\nint16_t gyOffset = 25;\r\nint16_t gzOffset = -78;\r\n\r\nmargSensor.setGyroOffsetX(gxOffset);\r\nmargSensor.setGyroOffsetY(gyOffset);\r\nmargSensor.setGyroOffsetZ(gzOffset);\r\n\r\n```\r\n\r\nThese functions set up gyroscope offset register.\r\n\r\n### `setAccelOffsetX`\r\n### `setAccelOffsetY`\r\n### `setAccelOffsetZ`\r\n\r\n```\r\nint16_t axOffset = 2890;\r\nint16_t ayOffset = -13125;\r\nint16_t azOffset = -768;\r\n\r\nmargSensor.setAccelOffsetX(axOffset);\r\nmargSensor.setAccelOffsetY(ayOffset);\r\nmargSensor.setAccelOffsetZ(azOffset);\r\n\r\n```\r\n\r\nThese functions set up accelerometer offset register.\r\n\r\n### `setGyroScale`\r\n\r\n```\r\n/* ============================\r\n    Select Gyroscope Scale:\r\n    0 = ±250dps =\r\n    1 = ±500 dps =\r\n    2 = ±1000 dps =\r\n    3 = ±2000 dps =\r\n    ===============================*/\r\n margSensor.setGyroScale(3);// +-2000 dps\r\n```\r\n\r\nThis function set up gyroscope scale register.\r\n\r\n### `setAccelScale`\r\n\r\n```\r\n/* ============================\r\n    Select Accelerometer scale:\r\n    0 = ±2g\r\n    1 = ±4g\r\n    2 = ±8g\r\n    3 = ±16g\r\n    ===============================*/\r\n margSensor.setAccelScale(1);// +-4g\r\n```\r\n\r\nThis function set up accelerometer scale register.\r\n\r\n## Nuances\r\n\r\n## References\r\n\r\n- MPU-9250 Product Specification Revision 1.1(http://www.invensense.com/wp-content/uploads/2015/02/PS-MPU-9250A-01-v1.1.pdf) (Invensense)\r\n- MPU-9250 Register Map and Descriptions Revision 1.6(https://www.invensense.com/wp-content/uploads/2015/02/RM-MPU-9250A-00-v1.6.pdf) (Invensense)\r\n- AK8963 Datasheet(https://www.akm.com/akm/en/file/datasheet/AK8963C.pdf) (Asahi Kasei)\r\n\r\n## License\r\nCopyright 2018-2022 JDVR, Juan David Velasquez Rosero\r\n\r\nReleased under the LGPL license\r\n",
  "allVersions": [
    "0.0.3",
    "0.0.2",
    "0.0.1"
  ]
}
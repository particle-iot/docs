{
  "type": "libraries",
  "id": "Particle_BaroSensor",
  "links": {
    "download": "https://api.particle.io/v1/libraries/Particle_BaroSensor/archive/0.0.5.tar.gz"
  },
  "attributes": {
    "name": "Particle_BaroSensor",
    "version": "0.0.5",
    "installs": 4654,
    "license": "GPL V3",
    "author": "Carlo Cassinari <carlo@techmakers.io>",
    "sentence": "Barometric sensor library for Particle.io (Spark.io) Photon",
    "url": "https://github.com/techmakers/particle-barosensor",
    "repository": "https://github.com/techmakers/particle-barosensor.git",
    "architectures": [],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "p",
  "cardUrl": "/reference/device-os/libraries/p/Particle_BaroSensor",
  "versions": {
    "0.0.5": {
      "builds": {
        "2.0.1": {
          "photon": {
            "TempAndPressure": true
          },
          "electron": {
            "TempAndPressure": true
          },
          "argon": {
            "TempAndPressure": true
          },
          "boron": {
            "TempAndPressure": true
          }
        },
        "1.5.2": {
          "photon": {
            "TempAndPressure": true
          },
          "electron": {
            "TempAndPressure": true
          },
          "argon": {
            "TempAndPressure": true
          },
          "boron": {
            "TempAndPressure": true
          }
        },
        "3.3.0": {
          "photon": {
            "TempAndPressure": true
          },
          "electron": {
            "TempAndPressure": true
          },
          "argon": {
            "TempAndPressure": true
          },
          "boron": {
            "TempAndPressure": true
          }
        },
        "5.0.1": {
          "argon": {
            "TempAndPressure": true
          },
          "boron": {
            "TempAndPressure": true
          },
          "bsom": {
            "TempAndPressure": true
          },
          "b5som": {
            "TempAndPressure": true
          },
          "tracker": {
            "TempAndPressure": true
          },
          "p2": {
            "TempAndPressure": true
          }
        },
        "4.0.0": {
          "argon": {
            "TempAndPressure": true
          },
          "boron": {
            "TempAndPressure": true
          },
          "bsom": {
            "TempAndPressure": true
          },
          "b5som": {
            "TempAndPressure": true
          },
          "tracker": {
            "TempAndPressure": true
          },
          "esomx": {
            "TempAndPressure": true
          }
        }
      },
      "added": "2022-06-17T10:16:53.821Z"
    }
  },
  "readme": "# Particle-BaroSensor Library\nBarometric sensor library for Particle.io (Spark.io) Photon\nPorted from https://github.com/freetronics/BaroSensor\n\n# BaroSensor Library\n\nThis is a Particle.io Library for the for the MS5637-02BA03 Altimeter/Pressure sensor.\n\n# Known Issues\n\nNo known issues at the moment (2015-11-16). Just tested with some sample code.\n\n# All Available Functions\n\n## begin()\n\nUsage:\n\n    BaroSensor.begin()\n\nCall this in the `setup()` part of your sketch to initialise the BARO module. If the module later returns any errors for some reason, calling `begin()` again will reset it.\n\n## getTemperature()\n\nTakes a temperature reading and returns it.\n\n### Function signature:\n\n    float getTemperature(TempUnit scale = CELSIUS,\n                         BaroOversampleLevel level = OSR_8192);\n\n### Basic Usage:\n\n    float temp = BaroSensor.getTemperature();\n\n### Advanced Usage:\n\n     float temp = BaroSensor.getTemperature(FAHRENHEIT, OSR_1024);\n\n### Arguments:\n\n* `scale` default to CELSIUS but can be set to FAHRENHEIT if needed.\n* `level` specifies the oversampling level of the sensor. Higher\n  oversampling means higher accuracy but a slower reading. OSR_8192 is\n  the default and gives highest accuracy, however\n  a temperature reading takes 17 milliseconds. OSR_256 is the lowest\n  accuracy, a temperature reading takes 1 millisecond. Intermediate\n  values are OSR_512, OSR_1024, OSR_2048, OSR_4096.\n\n### Returns\n\nEither the temperature value as a floating point number, or -9999 if an error occurred.\n\n## getPressure()\n\nTakes an air pressure reading and returns it\n\n### Function signature:\n\n    float getPressure(BaroOversampleLevel level = OSR_8192);\n\n### Basic Usage:\n\n    float pressure = BaroSensor.getPressure();\n\n### Arguments\n\n* `level` specifies the oversampling level of the sensor. Higher\n  oversampling means higher accuracy but a slower reading. OSR_8192 is\n  the default and gives highest accuracy, however a pressure reading\n  takes 34 milliseconds. OSR_256 is the lowest accuracy, a pressure\n  reading takes 2 milliseconds. Intermediate values are OSR_512,\n  OSR_1024, OSR_2048, OSR_4096.\n\n### Returns\n\nEither the pressure value as a floating point number (mbar), or -1111 if an error occurred.\n\n## getTempAndPressure()\n\nThis function allows you to read both temperature and pressure in one\npass. This saves some overhead because a call to `getPressure()` has\nto read the temperature as well, but this value is not usually\nreturned.\n\nExecution time is roughly the same as the `getPressure` function.\n\nThe temperature and pressure variables are passed in as pointers to\nthe function. The result of the function is a boolean value, true for\nsuccess.\n\n### Function Signature\n\n     bool getTempAndPressure(float *temperature,\n                             float *pressure,\n                             TempUnit tempScale = CELSIUS,\n                             BaroOversampleLevel level = OSR_8192);\n\n### Basic Usage\n\n    float temp;\n    float pressure;\n    if(!BaroSensor.getTempAndPressure(&temp, &pressure) {\n      Serial.print(\"Error: \");\n      Serial.println(BaroSensor.getError());\n    } else {\n      Serial.print(\"Temp: \");\n      Serial.println(temp);\n      Serial.print(\"Pressure: \");\n      Serial.println(pressure);\n    }\n    \n\n## isOK() / getError()\n\n### Function Signatures:\n\n    bool isOK();\n    byte getError();\n\n### Basic Usage:\n\n    if(!BaroSensor.isOK()) {\n      Serial.print(\"Sensor error occurred. Error number: \"); \n      Serial.println(BaroSensor.getError());\n      BaroSensor.begin(); // Try to reinitialise the sensor if we can\n    }\n\n### Returns\n\n`isOK()` returns true if the sensor is working properly (after\n`begin()` has been called.) In this working state, `getError()` will\nreturn zero.\n\n`getError()` can otherwise return any of these error values:\n\n* 0 = No error, sensor working fine.\n* 2 = Received NACK on transmit of address (sensor may not be connected/powered properly.)\n* 3 = Received NACK on transmit of data (sensor connections may not be good enough quality.)\n* 4 = Other \"Wire\" library i2c error.\n* -3 = `begin()` hasn't been called yet.\n* -2 = Failed to read back values from sensor (sensor connections may not be good enough quality.)\n",
  "allVersions": [
    "0.0.5",
    "0.0.4"
  ]
}
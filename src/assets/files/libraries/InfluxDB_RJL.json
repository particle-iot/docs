{
  "type": "libraries",
  "id": "InfluxDB_RJL",
  "links": {
    "download": "https://api.particle.io/v1/libraries/InfluxDB_RJL/archive/0.1.0.tar.gz"
  },
  "attributes": {
    "name": "InfluxDB_RJL",
    "version": "0.1.0",
    "installs": 1092,
    "license": "LGPL",
    "author": "Richard Lyon <richardlyon@fastmail.com>",
    "sentence": "InfluxDB library for Particle",
    "paragraph": "Easy upload of time series data to an InfluxDB database.",
    "url": "https://github.com/richardjlyon/InfluxDB",
    "repository": "https://github.com/richardjlyon/InfluxDB.git",
    "architectures": [],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "i",
  "cardUrl": "/cards/libraries/i/InfluxDB_RJL",
  "versions": {
    "0.1.0": {
      "builds": {
        "2.0.1": {
          "photon": {
            "usage": false
          },
          "electron": {
            "usage": false
          },
          "argon": {
            "usage": false
          },
          "boron": {
            "usage": false
          }
        },
        "1.5.2": {
          "photon": {
            "usage": false
          },
          "electron": {
            "usage": false
          },
          "argon": {
            "usage": false
          },
          "boron": {
            "usage": false
          }
        },
        "3.3.0": {
          "photon": {
            "usage": false
          },
          "electron": {
            "usage": false
          },
          "argon": {
            "usage": false
          },
          "boron": {
            "usage": false
          }
        },
        "5.0.1": {
          "argon": {
            "usage": false
          },
          "boron": {
            "usage": false
          },
          "bsom": {
            "usage": false
          },
          "b5som": {
            "usage": false
          },
          "tracker": {
            "usage": false
          },
          "p2": {
            "usage": false
          }
        },
        "4.0.0": {
          "argon": {
            "usage": false
          },
          "boron": {
            "usage": false
          },
          "bsom": {
            "usage": false
          },
          "b5som": {
            "usage": false
          },
          "tracker": {
            "usage": false
          },
          "esomx": {
            "usage": false
          }
        }
      },
      "added": "2022-06-17T10:16:53.959Z"
    }
  },
  "readme": "# InfluxDB Particle library\n\nA Particle library for InfluxDB.\n\n## About InfluxDB Particle library\n\nInfluxDB is a time series database built to handle high write and query loads. It's a good backing store for timestamped IoT sensor data. More information can be found [here](https://docs.influxdata.com/influxdb/v1.4/).\nInfluxDB Particle library is a simple client for writing Particle data to an InfluxDB\ndatabase.  \n\n## Usage\n\nCreate an InfluxDB database called `test`, add the InfluxDB library to your project, and follow this simple example:\n\n```\n#include \"authenticate.h\" // InfluxDB credentials\n#include \"InfluxDB.h\"\nInfluxDB idb = InfluxDB(USERNAME, PASSWORD);\n\nlong int timestamp;\n\nvoid setup() {\n  Serial.begin(9600);\n  // initialise InfluxDB\n  idb.setDatabase(\"test\");        // defaults to 'sensordata'\n  idb.setDeviceName(\"elmon\");     // defaults to \"particle\"\n  idb.setDebug(true);             // defaults to false\n}\n\nint batchcount = 0;\nvoid loop() {\n  idb.add(\"single1\", 1.0);\n  delay(2000);\n\n  timestamp = Time.now();\n  idb.add(\"batch1\", 2.0, timestamp);\n  idb.add(\"batch2\", 3.0, timestamp);\n  idb.add(\"batch3\", 4.0, timestamp);\n  delay(2000);\n\n  idb.add(\"single2\", 5.0);\n  delay(2000);\n\n  if (idb.sendAll()) {            // call this to send points to InfluxDB\n    // Serial.println(\"InfluxDB updated\");\n  }\n  delay(1000);\n}\n```\n\nSee the [examples](examples) folder for more details.\n\n## Documentation\n\nCreate file `authenticate.h` with your InfluxDB authentication details as follows:\n\n    #define USERNAME \"your_username\"\n    #define PASSWORD \"your_password\"\n\nInitialise the client with your InfluxDB authentication details:\n\n    InfluxDB idb = InfluxDB(USERNAME, PASSWORD);\n\n\nInfluxDB supports a built-in HTTP API (described [here](https://docs.influxdata.com/influxdb/v1.4/guides/writing_data/)). InfluxDB uses the Particle HTTPClient library to send a `post` request to the `/write` endpoint.\n\nBy default, InfluxDB library writes to InfluxDB database `sensordata` i.e.\n\n    /write?db=sensordata\n\nChange the target database with:\n\n    idb.setDatabase(\"test\");        // defaults to 'sensordata'\n\nEnsure that `test` exists (future versions will check for you and create the database if necessary).\n\nPoints are stored as follows:\n\n    DEVICENAME deviceID=DEVICEID VARIABLEID1=VARIABLEVALUE1(,VARIABLEID2=VARIABLEVALUE2 etc) UNIX_TIMESTAMP\n\n`DEVICENAME` is the measurement name in the InfluxDB database. Future versions will retrieve your device name  from Particle Cloud and use it. It defaults currently to `particle`. For now, change it with:\n\n    idb.setDeviceName(\"my_device\");\n\n`DEVICEID` is the ID of your device as returned by `System.deviceID()`. Each point is tagged in the database with the device ID.\n\n`VARIABLEID` and `VARIABLEVALUE` are the id and value of variables.\n\n`UNIX_TIMESTAMP` is the Unix time of the sample in seconds\n\nPoints are buffered prior to sending. There are two ways of adding points to the buffer.\n\n    idb.add(\"photoresistor\", analogvalue);\n\nwill cause a single point to be written to the database, with the timestamp corresponding to the time `add()` is called.\n\n    timestamp = Time.now();\n    idb.add(\"batch1\", 2.0, timestamp);\n    idb.add(\"batch2\", 3.0, timestamp);\n\nwill cause all the points added at timestamp to be written to the datanbase in a single request, with the timestamp corresponding to `timestamp`.\n\nUp to `MAX_VALUES` (currently, 10) can be added between updates to the database. Values added beyond this limit are ignored. (This is an arbitrary limit pending further investigation of the API limits.)\n\nTo write the point buffer to the database i.e. make the API request, call:\n\n    idb.sendAll();\n\nThis returns `true` if the HTTP response code 204 (successful write operation) is received, `false` otherwise.\n\nPut the device in debug mode with:\n\n    idb.setDebug(true);\n\nThis will print to the serial line the data being sent to InfluxDB.\n\nThe library has been tested on a Particle Photon (System Firmware 0.6.3) and Core (unknown firmware version but recently updated).\n\n## Changelog\n\n### 0.1.0\nInitial release.\n\n## Contributing\n\nHere's how you can make changes to this library and eventually contribute those changes back.\n\nTo get started, [clone the library from GitHub to your local machine](https://help.github.com/articles/cloning-a-repository/).\n\nChange the name of the library in `library.properties` to something different. You can add your name at then end.\n\nModify the sources in <src> and <examples> with the new behavior.\n\nTo compile an example, use `particle compile examples/usage` command in [Particle CLI](https://docs.particle.io/guide/tools-and-features/cli#update-your-device-remotely) or use our [Desktop IDE](https://docs.particle.io/guide/tools-and-features/dev/#compiling-code).\n\nAfter your changes are done you can upload them with `particle library upload` or `Upload` command in the IDE. This will create a private (only visible by you) library that you can use in other projects. Do `particle library add InfluxDB_myname` to add the library to a project on your machine or add the InfluxDB_myname library to a project on the Web IDE or Desktop IDE.\n\nAt this point, you can create a [GitHub pull request](https://help.github.com/articles/about-pull-requests/) with your changes to the original library.\n\nIf you wish to make your library public, use `particle library publish` or `Publish` command.\n\n## LICENSE\nCopyright 2018 Richard Lyon\n\nLicensed under the GNU General Public license\n",
  "allVersions": [
    "0.1.0"
  ]
}
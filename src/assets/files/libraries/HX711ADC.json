{
  "type": "libraries",
  "id": "HX711ADC",
  "links": {
    "download": "https://api.particle.io/v1/libraries/HX711ADC/archive/0.0.3.tar.gz"
  },
  "attributes": {
    "name": "HX711ADC",
    "version": "0.0.3",
    "installs": 74885,
    "license": "LGPL",
    "author": "Bogde <https://github.com/bogde>",
    "sentence": "Library to interface the Avia Semiconductor HX711 24-Bit Analog-to-Digital Converter (ADC) for Weight Scales",
    "url": "https://github.com/eliteio/HX711ADC",
    "repository": "https://github.com/eliteio/HX711ADC.git",
    "architectures": [],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "h",
  "cardUrl": "/cards/libraries/h/HX711ADC",
  "versions": {
    "0.0.3": {
      "builds": {
        "2.0.1": {
          "photon": {
            "HX711Serial": true
          },
          "electron": {
            "HX711Serial": true
          },
          "argon": {
            "HX711Serial": true
          },
          "boron": {
            "HX711Serial": true
          }
        },
        "1.5.2": {
          "photon": {
            "HX711Serial": true
          },
          "electron": {
            "HX711Serial": true
          },
          "argon": {
            "HX711Serial": true
          },
          "boron": {
            "HX711Serial": true
          }
        },
        "3.3.0": {
          "photon": {
            "HX711Serial": true
          },
          "electron": {
            "HX711Serial": true
          },
          "argon": {
            "HX711Serial": true
          },
          "boron": {
            "HX711Serial": true
          }
        },
        "5.0.1": {
          "argon": {
            "HX711Serial": true
          },
          "boron": {
            "HX711Serial": true
          },
          "bsom": {
            "HX711Serial": true
          },
          "b5som": {
            "HX711Serial": true
          },
          "tracker": {
            "HX711Serial": true
          },
          "p2": {
            "HX711Serial": true
          }
        },
        "4.0.0": {
          "argon": {
            "HX711Serial": true
          },
          "boron": {
            "HX711Serial": true
          },
          "bsom": {
            "HX711Serial": true
          },
          "b5som": {
            "HX711Serial": true
          },
          "tracker": {
            "HX711Serial": true
          },
          "esomx": {
            "HX711Serial": true
          }
        }
      },
      "added": "2022-06-17T10:16:53.673Z"
    }
  },
  "readme": "HX711\r\n=====\r\n\r\nAn Arduino library to interface the Avia Semiconductor HX711 24-Bit Analog-to-Digital Converter (ADC) for Weight Scales.\r\n\r\nThis is my humble attempt at creating an Arduino library for this ADC:\r\nhttp://www.dfrobot.com/image/data/SEN0160/hx711_english.pdf\r\n\r\nOther libraries exist, including this very good one, which I first used and which is the starting point for my library:\r\nhttps://github.com/aguegu/ardulibs/tree/master/hx711\r\n\r\nAlthough other libraries exist, I needed a slightly different approach, so here's how my library is different than others:\r\n\r\n1. It provides a tare() function, which \"resets\" the scale to 0. Many other implementations calculate the tare weight when the ADC is initialized only. I needed a way to be able to set the tare weight at any time. Use case: place an empty container on the scale, call tare() to reset the readings to 0, fill the container and get the weight of the content.\r\n\r\n2. It provides a power_down() function, to put the ADC into a low power mode. According to the datasheet, \"When PD_SCK pin changes from low to high and stays at high for longer than 60μs, HX711 enters power down mode\". Use case: battery powered scales. Accordingly, there is a power_up() function to get the chip out of the low power mode.\r\n\r\n3. It has a set_gain(byte gain) function that allows you to set the gain factor and select the channel. According to the datasheet, \"Channel A can be programmed with a gain of 128 or 64, corresponding to a full-scale differential input voltage of ±20mV or ±40mV respectively, when a 5V supply is connected to AVDD analog power supply pin. Channel B has a fixed gain of 32.\". The same function is used to select the channel A or channel B, by passing 128 or 64 for channel A, or 32 for channel B as the parameter. The default value is 128, which means \"channel A with a gain factor of 128\", so one can simply call set_gain(). Also, the function is called from the constructor.\r\n\r\n4. The constructor has an extra parameter \"gain\" that allows you to set the gain factor and channel. The constructor calls the \"set_gain\" function mentioned above.\r\n\r\n5. The \"get_value\" and \"get_units\" functions can receive an extra parameter \"times\", and they will return the average of multiple readings instead of a single reading.\r\n\r\nHow to Calibrate Your Scale\r\n\r\n1. Call set_scale() with no parameter.\r\n2. Call tare() with no parameter.\r\n3. Place a known weight on the scale and call get_units(10).\r\n4. Divide the result in step 3 to your known weight. You should get about the parameter you need to pass to set_scale.\r\n5. Adjust the parameter in step 4 until you get an accurate reading.\r\n",
  "allVersions": [
    "0.0.3",
    "0.0.2",
    "0.0.1"
  ]
}
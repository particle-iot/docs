{
  "type": "libraries",
  "id": "SparkIntervalTimer",
  "links": {
    "download": "https://api.particle.io/v1/libraries/SparkIntervalTimer/archive/1.3.8.tar.gz"
  },
  "attributes": {
    "name": "SparkIntervalTimer",
    "version": "1.3.8",
    "installs": 306365,
    "license": "Unknown",
    "author": "Paul Kourany",
    "sentence": "Particle Interval Timer using hardware timers for Core/Photon/Electron",
    "url": "https://github.com/pkourany/SparkIntervalTimer",
    "repository": "https://github.com/pkourany/SparkIntervalTimer.git",
    "architectures": [],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "s",
  "cardUrl": "/reference/device-os/libraries/s/SparkIntervalTimer",
  "versions": {
    "1.3.8": {
      "builds": {
        "2.0.1": {
          "photon": {
            "SparkIntervalTimerDemo": true
          },
          "electron": {
            "SparkIntervalTimerDemo": true
          },
          "argon": {
            "SparkIntervalTimerDemo": false
          },
          "boron": {
            "SparkIntervalTimerDemo": false
          }
        },
        "1.5.2": {
          "photon": {
            "SparkIntervalTimerDemo": true
          },
          "electron": {
            "SparkIntervalTimerDemo": true
          },
          "argon": {
            "SparkIntervalTimerDemo": false
          },
          "boron": {
            "SparkIntervalTimerDemo": false
          }
        },
        "3.3.0": {
          "photon": {
            "SparkIntervalTimerDemo": true
          },
          "electron": {
            "SparkIntervalTimerDemo": true
          },
          "argon": {
            "SparkIntervalTimerDemo": false
          },
          "boron": {
            "SparkIntervalTimerDemo": false
          }
        },
        "5.0.1": {
          "argon": {
            "SparkIntervalTimerDemo": false
          },
          "boron": {
            "SparkIntervalTimerDemo": false
          },
          "bsom": {
            "SparkIntervalTimerDemo": false
          },
          "b5som": {
            "SparkIntervalTimerDemo": false
          },
          "tracker": {
            "SparkIntervalTimerDemo": false
          },
          "p2": {
            "SparkIntervalTimerDemo": false
          }
        },
        "4.0.0": {
          "argon": {
            "SparkIntervalTimerDemo": false
          },
          "boron": {
            "SparkIntervalTimerDemo": false
          },
          "bsom": {
            "SparkIntervalTimerDemo": false
          },
          "b5som": {
            "SparkIntervalTimerDemo": false
          },
          "tracker": {
            "SparkIntervalTimerDemo": false
          },
          "esomx": {
            "SparkIntervalTimerDemo": false
          }
        }
      },
      "added": "2022-06-17T10:16:53.640Z"
    }
  },
  "readme": "/* Copyright (c) 2014 Paul Kourany, based on work by Dianel Gilbert\n\n - UPDATED Jan 29, 2016 - update to Libraries 2.0\n - UPDATED Jan 5, 2016 - Udpated/fixed example\n - UPDATED Sept 3, 2015 - Added support for Particle Photon\n - BUG FIX Oct 5, 2015 - Fix for manual/auto SIT allocation (thanks @lige!)`\n\nCopyright (c) 2013 Daniel Gilbert, loglow@gmail.com\nCopyright (c) 2014 Paul Kourany, pkourany@gmail.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without limitation the rights to use, copy,\nmodify, merge, publish, distribute, sublicense, and/or sell copies of the Software,\nand to permit persons to whom the Software is furnished to do so, subject to the\nfollowing conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */\n\nSparkIntervalTimer \n==================\n\nIntervalTimer uses interrupts to call a function at a precise timing \ninterval. Advanced programming is required to properly use \nIntervalTimer, because your function runs as an interrupt. See below for \ndetails. \n\nIntervalTimer is generally recommended for use only in libraries and \nadvanced applications which require highly precise timing. Usually \nelapsedMillis variables are easier to use, because they avoid the \npitfalls of interrupt programming. \n\n1. Using Hardware Timers \n------------------------\n\nUp to 5 (3 on the Core) IntervalTimer objects may be active simultaneously. The\nPhoton hardware timers TMR3, TMR4, TMR5, TMR6 and TMR7 will allocated while the Core \nhardware timers TMR2, TMR3 and TMR4 will be allocated as required (in those orders).\n\nHardware timers are used for providing PWM output via the analogWrite() function.\nAllocating a hardware timer will disable PWM capabilities to certain pins based\non the timer allocated as follows:\n\n```\nCORE:\nPIN\t\tTMR2\tTMR3\tTMR4\n----------------------------\nD0\t\t\t\t\t\t x\nD1\t\t\t\t\t\t x\nA0\t\t x\nA1\t\t x\nA4\t\t\t\t x\nA5\t\t\t\t x\nA6\t\t\t\t x\nA7 \t\t\t\t x\n\nPHOTON:\nPIN\t\tTMR3\tTMR4\tTMR5\tTMR6\tTMR7\n--------------------------------------------\nD0\t\t\t  \t x\nD1\t\t\t  \t x\nD2\t\t x\nD3\t\t x\nA4\t\t x\nA5\t\t x\nWKP\t\t\t\t\t     x\n\n```\nNote that digital I/O (read/write) will still functions on the affected pins.  Also not that on the Photon, TMR6 and TMR7 are not mapped to any I/O pins.\n\n2. IntervalTimer Usage \n----------------------\n\n```\nIntervalTimer myTimer;\n```\nCreate an IntervalTimer object. You may create as many IntervalTimers as \nneeded, but only a limited number (3 on Core, 5 on Photon) may be active\nsimultaneously. Normally IntervalTimer objects should be created as global\nvariables. \n\n\n```\nmyTimer.begin(function, time, timebase);  \t\t//AUTO allocate timer\n```\nAuto-allocate a timer from the pool and start it. The interval is specified in \nmicroseconds or (half) milliseconds based on the selected timebase: uSec for \nmicroseconds and hmSec for half-milliseconds. The time specified as a uint16_t.\nThe function returns true if successful. False is returned if all hardware\ntimer resources are allocated and used by other IntervalTimer objects.\n\nThe functions specified to be called by IntervalTimer should be short, run as\nquickly as possible, and should avoid calling other functions if possible.\n\n\n```\nmyTimer.begin(function, time, timebase, id);  //MANUALLY allocate timer\n```\nManually allocate a timer from the pool by specifying its id and start it.\nThe specified id corresponds to a hardware timer - Core = TIMER2, TIMER3\nor TIMER4 and Photon = TIMER3, TIMER4, TIMER5, TIMER6, TIMER7.The remaining\nparameters are the same as above.\n\n\n```\nmyTimer.resetPeriod_SIT(time, timebase);\n```\nReset the timer's time and timebase.  Timer will be stopped and restarted with\nnew settings.  See above for parameter details.\n\n\n```\nmyTimer.interrupt_SIT(action);\n```\nEnables (action = INT_ENABLE) or disables (action = INT_DISABLE) an active\nIntervalTimer's interrupts without deleting the object\n\n\n```\nmyTimer.isAllocated_SIT();\n```\nReturns -1 if timer is not allocated or allocated timer id (Core = TIMER2,\nTIMER3, TIMER4 and Photon = TIMER3, TIMER4, TIMER5, TIMER6, TIMER7).\n\n\n```\nmyTimer.end();\n```\nStop the timer (and interrupts) and deallocate it from the timer pool. The hardware\nresource becomes available for use by other IntervalTimer objects. \n\n\n3. Example Program \n------------------\n\nThe included demo program will create 3 or 5 Interval Timers (maximum \nallowed on Core or Photon) to blink three LEDs at different intervals.\nThe first timer will blink the onboard LED while 2 (Core) or 4 (Photon)\nextra LEDs (and small current limiting resistors) must be added by the\nuser on pins D3 and D4 on Core and D3, D4, D5 and D6 on Photon. After\n100 blinks, Timer1 will reset to 1/4 of its interval (250ms) and\nafter 200 more blinks, Timer1 is shut down and will stop blinking.\n\n\n4. Interrupt Context Issues \n---------------------------\n\nIntervalTimer will call your function from interrupt context. Because it \ncan interrupt your program at any moment, special design is necessary to \nshare data with the rest of your program. Many ordinary functions are \nnot designed to work properly from interrupt context. String objects \nshould be avoided. A general guideline is to keep your function short \nand avoid calling other functions if possible. \n\nVariables usually need to be \"volatile\" types. Volatile tells the \ncompiler to avoid optimizations that assume variable can not \nspontaneously change. Because your function may change variables while \nyour program is using them, the compiler needs this hint. But volatile \nalone is often not enough. \n\nWhen accessing shared variables, usually interrupts must be disabled. \nEven with volatile, if the interrupt changes a multi-byte variable \nbetween a sequence of instructions, it can be read incorrectly. If your \ndata is multiple variables, such as an array and a count, usually \ninterrupts need to be disabled for the entire sequence of your code \nwhich accesses the data. \n",
  "allVersions": [
    "1.3.8",
    "1.3.7",
    "1.3.6",
    "1.3.5",
    "1.3.4",
    "1.3.3",
    "1.3.2",
    "1.2.0",
    "1.1.1",
    "1.1.0",
    "1.0.0"
  ]
}
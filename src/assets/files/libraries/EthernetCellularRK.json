{
  "type": "libraries",
  "id": "EthernetCellularRK",
  "links": {
    "download": "https://api.particle.io/v1/libraries/EthernetCellularRK/archive/0.0.3.tar.gz"
  },
  "attributes": {
    "name": "EthernetCellularRK",
    "version": "0.0.3",
    "installs": 1898,
    "license": "MIT",
    "author": "Rick Kaseguma <rickkas7@rickkas7.com>",
    "sentence": "Ethernet with cellular backup for Particle devices",
    "url": "https://github.com/rickkas7/EthernetCellularRK",
    "repository": "https://github.com/rickkas7/EthernetCellularRK.git",
    "architectures": [
      "*"
    ],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "e",
  "cardUrl": "/reference/device-os/libraries/e/EthernetCellularRK",
  "versions": {
    "0.0.2": {
      "builds": {
        "2.0.1": {
          "photon": {
            "1-simple": false
          },
          "electron": {
            "1-simple": false
          },
          "argon": {
            "1-simple": false
          },
          "boron": {
            "1-simple": true
          }
        },
        "1.5.2": {
          "photon": {
            "1-simple": false
          },
          "electron": {
            "1-simple": false
          },
          "argon": {
            "1-simple": false
          },
          "boron": {
            "1-simple": true
          }
        }
      }
    },
    "0.0.3": {
      "builds": {
        "2.0.1": {
          "photon": {
            "1-simple": false
          },
          "electron": {
            "1-simple": false
          },
          "argon": {
            "1-simple": true
          },
          "boron": {
            "1-simple": true
          }
        },
        "1.5.2": {
          "photon": {
            "1-simple": false
          },
          "electron": {
            "1-simple": false
          },
          "argon": {
            "1-simple": true
          },
          "boron": {
            "1-simple": true
          }
        },
        "3.3.0": {
          "photon": {
            "1-simple": false
          },
          "electron": {
            "1-simple": false
          },
          "argon": {
            "1-simple": true
          },
          "boron": {
            "1-simple": true
          }
        },
        "5.0.1": {
          "argon": {
            "1-simple": true
          },
          "boron": {
            "1-simple": true
          },
          "bsom": {
            "1-simple": true
          },
          "b5som": {
            "1-simple": true
          },
          "tracker": {
            "1-simple": true
          },
          "p2": {
            "1-simple": false
          }
        },
        "4.0.0": {
          "argon": {
            "1-simple": true
          },
          "boron": {
            "1-simple": true
          },
          "bsom": {
            "1-simple": true
          },
          "b5som": {
            "1-simple": true
          },
          "tracker": {
            "1-simple": true
          },
          "esomx": {
            "1-simple": true
          }
        }
      },
      "added": "2022-06-17T10:16:53.937Z"
    }
  },
  "readme": "# EthernetCellularRK\n\n- Github: [https://github.com/rickkas7/EthernetCellularRK](https://github.com/rickkas7/EthernetCellularRK)\n- License: MIT (can use in open-source or closed-source products including commercial products)\n\nThis class and library is used with Gen 3 cellular devices (Boron, B Series SoM) that also have Ethernet connectivity. It is used for the case that you want to default to Ethernet, but fall back to cellular if the device loses its Ethernet connection.\n\nThis requires additional hardware such as the Ethernet FeatherWing (Boron) or the B Series evaluation board or the equivalent WizNET W5500 circuitry on your own custom B Series Base Board.\n\nYour data operations quota is the same for both cellular and Ethernet, but extra non-cloud data (TCP or UDP) are measured for cellular but not for Ethernet. Thus if you have a large amount of non-cloud data to external servers, Ethernet can reduce your costs.\n\nThis class is necessary because Device OS will default to Ethernet, however it will only fall back to cellular if Ethernet is unplugged (no link or no DHCP). The built-in behavior will not switch if the Ethernet LAN loses Internet connectivity and is only providing local LAN access. By adding this class, you can make the device fall back to cellular on losing Internet on the Ethernet LAN.\n\nOne caveat to this is that only one network interface can be active at a time. You should expect that it will take a minute or two to fall back to cellular and connect (depending on settings). The default is to check every 5 minutes if Ethernet has come back. The caveat to this is that cloud connectivity is lost during the retry attempts, so you don't want to make the period too short, but making it very long will cause you to stay on cellular longer than necessary.\n\nIn your main application file, include the library header:\n\n```cpp\n#include \"EthernetCellularRK.h\"\n```\n\nOptionally enable logging:\n\n```cpp\nSerialLogHandler LogHandler(LOG_LEVEL_TRACE);\n```\n\nYou must use system thread enabled and SEMI_AUTOMATIC mode for this library to function properly!\n\n```cpp\nSYSTEM_THREAD(ENABLED);\nSYSTEM_MODE(SEMI_AUTOMATIC);\n```\n\nThis class is a singleton; you do not create one as a global, on the stack, or with new.\n\nThis class is a singleton; you do not create one as a global, on the stack, or with new.\n\nFrom global application setup you must call: \n```cpp\nEthernetCellular::instance().setup();\n```\n\nFrom global application loop you must call: \n```cpp\nEthernetCellular::instance().loop();\n```\n\nIf you want to override default settings, use methods like: \n```cpp\nEthernetCellular::instance().withRetryEthernetPeriod(10min);\n```\n\nBy default, the code replaces cyan blinking or breathing of the RGB status LED to yellow when on cellular backup. To not do this and keep the cyan color always, use: \n```cpp\nEthernetCellular::instance().withCellularBackupColor(RGB_COLOR_CYAN);\n```\n\n## Members\n\nThe [full browsable API documentation, including internal methods and fields](https://rickkas7.github.io/EthernetCellularRK/) is available, however the important methods you are most likely to need are summarized below.\n\n---\n\n### void EthernetCellular::setup() \n\nPerform setup operations; call this from global application setup()\n\n```\nvoid setup()\n```\n\nYou typically use EthernetCellular::instance().setup();\n\n---\n\n### void EthernetCellular::loop() \n\nPerform application loop operations; call this from global application loop()\n\n```\nvoid loop()\n```\n\nYou typically use EthernetCellular::instance().loop();\n\n---\n\n### EthernetCellular & EthernetCellular::withEthernetKeepAlive(std::chrono::seconds value) \n\nSet an Ethernet keep-alive value (default: 25 seconds)\n\n```\nEthernetCellular & withEthernetKeepAlive(std::chrono::seconds value)\n```\n\n#### Parameters\n* `value` The value as a chrono-literal, such as 25s for 25 seconds or 5min for 5 minutes.\n\nWhen the network is Ethernet, a keep-alive is required to keep the UDP port forwarding active so the cloud can communicate with the device. This could be as short as 30 seconds or be minutes or even hours. Since the data in Ethernet is rarely metered, this defaults to 25 seconds but can be made longer on a site-specific basis.\n\nIf the limit is too long, at the end of the period the cloud will not longer be able to communicate with the device if the connection is otherwise idle.\n\nIf you are publishing, reading variables, or calling functions, this will reset the keep-alive timer so if you are frequently sending data they keep-alive may never be reached.\n\nIf you want to pass in a regular integer (`int`) instead of a chrono literal, you can use a construct like:\n\n```cpp\nint keepAliveSec = 300;\n\nEthernetCellular::instance().withEthernetKeepAlive(std::chrono::seconds(keepAliveSec));\n```\n\n---\n\n### int EthernetCellular::getEthernetKeepAlive() const \n\nReturns the Ethernet keep-alive value (in seconds)\n\n```\nint getEthernetKeepAlive() const\n```\n\n---\n\n### EthernetCellular & EthernetCellular::withCellularKeepAlive(std::chrono::seconds value) \n\nSet an cellular keep-alive value (default: 23 minutes)\n\n```\nEthernetCellular & withCellularKeepAlive(std::chrono::seconds value)\n```\n\n#### Parameters\n* `value` The value as a chrono-literal, such as 25s for 25 seconds or 5min for 5 minutes.\n\nWhen the network is cellular, a keep-alive is required to keep the UDP port forwarding active so the cloud can communicate with the device. This rarely needs to be set when using the Particle SIM, but is almost certainly required for a 3rd-party SIM. With a 3rd-party SIM the value could be as low as 30 seconds, but could be a few minutes.\n\nIf the limit is too long, at the end of the period the cloud will not longer be able to communicate with the device if the connection is otherwise idle.\n\nIf you are publishing, reading variables, or calling functions, this will reset the keep-alive timer so if you are frequently sending data they keep-alive may never be reached.\n\nIf you want to pass in a regular integer (`int`) instead of a chrono literal, you can use a construct like:\n\n```cpp\nint keepAliveSec = 300;\n\nEthernetCellular::instance().withEthernetKeepAlive(std::chrono::seconds(keepAliveSec));\n```\n\n---\n\n### int EthernetCellular::getCellularKeepAlive() const \n\nReturns the cellular keep-alive value (in seconds)\n\n```\nint getCellularKeepAlive() const\n```\n\n---\n\n### EthernetCellular & EthernetCellular::withRetryEthernetPeriod(std::chrono::milliseconds value) \n\nSet the period to try switching back to Ethernet from cellular. Default: 5 minutes.\n\n```\nEthernetCellular & withRetryEthernetPeriod(std::chrono::milliseconds value)\n```\n\n#### Parameters\n* `value` The value as a chrono-literal, such as 25s for 25 seconds or 5min for 5 minutes.\n\nBecause the Ethernet and cellular networks cannot be on at the same time, after switching to cellular backup we need to periodically switch back to Ethernet to see if it's back up. This will interrupt network connectivity for a short period of time, so you don't want to make it too short. However, you also won't switch back until this period is reached, so you'll stay on backup longer than necessary if you set it too long. The default is 5 minutes.\n\nIf you want to pass in a regular integer (`int`) instead of a chrono literal, you can use a construct like:\n\n```cpp\nint retryEthernetSecs = 300;\n\nEthernetCellular::instance().withRetryEthernetPeriod(std::chrono::milliseconds(retryEthernetSecs));\n```\n\n---\n\n### int EthernetCellular::getRetryEthernetPeriod() const \n\nReturns the period to try switching back to Ethernet from cellular (in milliseconds)\n\n```\nint getRetryEthernetPeriod() const\n```\n\n---\n\n### EthernetCellular & EthernetCellular::withCellularConnectTimeout(std::chrono::milliseconds value) \n\nSet the maximum time to connect to cellular (blinking green). Default: 5 minutes.\n\n```\nEthernetCellular & withCellularConnectTimeout(std::chrono::milliseconds value)\n```\n\n#### Parameters\n* `value` The value as a chrono-literal, such as 25s for 25 seconds or 5min for 5 minutes.\n\nThe recommended value is from 5 to 10 minutes. Setting it to short values may prevent ever being able to connect to cellular.\n\nIf you want to pass in a regular integer (`int`) instead of a chrono literal, you can use a construct like:\n\n```cpp\nint timeoutMillisecs = 60000;\n\nEthernetCellular::instance().withCellularConnectTimeout(std::chrono::milliseconds(timeoutMillisecs));\n```\n\n---\n\n### int EthernetCellular::getCellularConnectTimeout() const \n\nReturns the maximum time to connect to cellular (blinking green) (in milliseconds)\n\n```\nint getCellularConnectTimeout() const\n```\n\n---\n\n### EthernetCellular & EthernetCellular::withCellularCloudConnectTimeout(std::chrono::milliseconds value) \n\nSet the maximum time to connect to the cloud while connected to cellular (blinking cyan). Default: 2 minutes.\n\n```\nEthernetCellular & withCellularCloudConnectTimeout(std::chrono::milliseconds value)\n```\n\n#### Parameters\n* `value` The value as a chrono-literal, such as 25s for 25 seconds or 5min for 5 minutes.\n\nThe default is 2 minutes. It's normally fast, but in areas with low signal strength it make take longer.\n\nIf you want to pass in a regular integer (`int`) instead of a chrono literal, you can use a construct like:\n\n```cpp\nint timeoutMillisecs = 60000;\n\nEthernetCellular::instance().withCellularCloudConnectTimeout(std::chrono::milliseconds(timeoutMillisecs));\n```\n\n---\n\n### int EthernetCellular::getCellularCloudConnectTimeout() const \n\nReturns the maximum time to connect to the cloud while connected to cellular (blinking cyan) (in milliseconds)\n\n```\nint getCellularCloudConnectTimeout() const\n```\n\n---\n\n### EthernetCellular & EthernetCellular::withEthernetConnectTimeout(std::chrono::milliseconds value) \n\nSet the maximum time to connect to Ethernet (blinking green). Default: 30 seconds.\n\n```\nEthernetCellular & withEthernetConnectTimeout(std::chrono::milliseconds value)\n```\n\n#### Parameters\n* `value` The value as a chrono-literal, such as 25s for 25 seconds or 5min for 5 minutes.\n\nThis should normally be really fast, but if for some reason your Ethernet network takes a long time to establish a connection you could make the timeout longer.\n\nIf you want to pass in a regular integer (`int`) instead of a chrono literal, you can use a construct like:\n\n```cpp\nint timeoutMillisecs = 60000;\n\nEthernetCellular::instance().withEthernetConnectTimeout(std::chrono::milliseconds(timeoutMillisecs));\n```\n\n---\n\n### int EthernetCellular::getEthernetConnectTimeout() const \n\nReturns the maximum time to connect to Ethernet (blinking green) (in milliseconds)\n\n```\nint getEthernetConnectTimeout() const\n```\n\n---\n\n### EthernetCellular & EthernetCellular::withEthernetCloudConnectTimeout(std::chrono::milliseconds value) \n\nSet the maximum time to connect to the cloud while connected to Ethernet (blinking cyan). Default: 30 seconds.\n\n```\nEthernetCellular & withEthernetCloudConnectTimeout(std::chrono::milliseconds value)\n```\n\n#### Parameters\n* `value` The value as a chrono-literal, such as 25s for 25 seconds or 5min for 5 minutes.\n\nThe default is 30 seconds. It should normally only take a few seconds.\n\nIf you want to pass in a regular integer (`int`) instead of a chrono literal, you can use a construct like:\n\n```cpp\nint timeoutMillisecs = 60000;\n\nEthernetCellular::instance().withEthernetCloudConnectTimeout(std::chrono::milliseconds(timeoutMillisecs));\n```\n\n---\n\n### int EthernetCellular::getEthernetCloudConnectTimeout() const \n\nReturns the maximum time to connect to the cloud while connected to Ethernet (blinking cyan) (in milliseconds)\n\n```\nint getEthernetCloudConnectTimeout() const\n```\n\n---\n\n### EthernetCellular & EthernetCellular::withCellularBackupColor(uint32_t value) \n\nSets the status LED color when using cellular backup, replacing blinking or breathing cyan (default: yellow)\n\n```\nEthernetCellular & withCellularBackupColor(uint32_t value)\n```\n\n#### Parameters\n* `value` Color value, such as RGB_COLOR_CYAN, RGB_COLOR_YELLOW, or RGB_COLOR_ORANGE\n\nWhen switching to cellular backup, the cloud connection color (typically blinking cyan, followed by breathing cyan) can be overridden. The default in this class is to use yellow (blinking yellow followed by breathing yellow) when on cellular backup so you can tell it's on backup, and that color is not currently used by Device OS.\n\nIf you don't want the status LED color to be overridden, make this call with no parameter or use `RGB_COLOR_CYAN` to use the Device OS default.\n\nNote that this does not override the blinking green (connecting to network) which will be blinking green for both cellular and Ethernet, however it's normally not in this state for very long and there are only so many available colors.\n\n---\n\n### uint32_t EthernetCellular::getCellularBackupColor() const \n\nReturns the status LED color when using cellular backup.\n\n```\nuint32_t getCellularBackupColor() const\n```\n\nValue is an RGB color as a uint32_t of the form 0x00RRGGBB, matching the format of constants like RGB_COLOR_CYAN, RGB_COLOR_YELLOW, or RGB_COLOR_ORANGE.\n\n---\n\n### ActiveInterface EthernetCellular::getActiveInterface() const \n\nReturns the enumeration for the currently active interface (NONE, CELLULAR, or ETHERNET)\n\n```\nActiveInterface getActiveInterface() const\n```\n\n---\n\n### EthernetCellular & EthernetCellular::withInterfaceChangeCallback(std::function< void(ActiveInterface oldInterface, ActiveInterface newInterface)> callback) \n\nSets a notification callback for when the active interface changes.\n\n```\nEthernetCellular & withInterfaceChangeCallback(std::function< void(ActiveInterface oldInterface, ActiveInterface newInterface)> callback)\n```\n\nYou can only have one interface change callback.\n\n---\n\n## Version History\n\n### 0.0.3 (2022-05-23)\n\n- Can be compiled on Wi-Fi devices like the Argon. It should work but is currently untested.\n\n### 0.0.2 (2021-10-13)\n\n- Added getActiveInterface() and withInterfaceChangeCallback()\n\n### 0.0.1 (2021-08-11)\n\n- Initial version\n",
  "allVersions": [
    "0.0.3",
    "0.0.2",
    "0.0.1"
  ]
}
{
  "type": "libraries",
  "id": "spark-usb-host",
  "links": {
    "download": "https://api.particle.io/v1/libraries/spark-usb-host/archive/0.0.2.tar.gz"
  },
  "attributes": {
    "name": "spark-usb-host",
    "version": "0.0.2",
    "installs": 387,
    "license": "MIT",
    "author": "Ported by Ben L.",
    "sentence": "USB host library for Spark Core support for Arduino USB host sheild MAX3421E",
    "url": "https://github.com/otelconsulting/spark-usb-host",
    "repository": "https://github.com/otelconsulting/spark-usb-host.git",
    "architectures": [],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "s",
  "cardUrl": "/cards/libraries/s/spark-usb-host",
  "versions": {
    "0.0.2": {
      "builds": {},
      "noExamples": true
    }
  },
  "readme": "# USB Host Library Rev.2.0\n\nThe code is released under the GNU General Public License.\n__________\n\n# Summary\nThis is Revision 2.0 of MAX3421E-based USB Host Shield Library for AVR's.\n\nProject main web site is: <http://www.circuitsathome.com>.\n\nSome information can also be found at: <http://blog.tkjelectronics.dk/>.\n\nThe shield can be purchased at the main site: <http://www.circuitsathome.com/products-page/arduino-shields> or from [TKJ Electronics](http://tkjelectronics.com/): <http://shop.tkjelectronics.dk/product_info.php?products_id=43>.\n\n![USB Host Shield](http://www.circuitsathome.com/wp/wp-content/uploads/2012/02/UHS_20_main-288x216.jpg)\n\nFor more information about the hardware see the [Hardware Manual](http://www.circuitsathome.com/usb-host-shield-hardware-manual).\n\n# Developed By\n\n* __Oleg Mazurov, Circuits@Home__ - <mazurov@circuitsathome.com>\n* __Alexei Glushchenko, Circuits@Home__ - <alex-gl@mail.ru>\n\t* Developers of the USB Core, HID, FTDI, ADK, ACM, and PL2303 libraries\n* __Kristian Lauszus, TKJ Electronics__ - <kristianl@tkjelectronics.com>\n\t* Developer of the [BTD](#bluetooth-libraries), [BTHID](#bthid-library), [SPP](#spp-library), [PS4](#ps4-library), [PS3](#ps3-library), [Wii](#wii-library), and [Xbox](#xbox-library) libraries\n* __Andrew Kroll__ - <xxxajk@gmail.com>\n\t* Major contributor to mass storage code\n\n# How to include the library\n\nFirst download the library by clicking on the following link: <https://github.com/felis/USB_Host_Shield_2.0/archive/master.zip>.\n\nThen uncompress the zip folder and rename the directory to \"USB\\_Host\\_Shield\\_20\", as any special characters are not supported by the Arduino IDE.\n\nNow open up the Arduino IDE and open \"File>Preferences\". There you will see the location of your sketchbook. Open that directory and create a directory called \"libraries\" inside that directory.\nNow move the \"USB\\_Host\\_Shield\\_20\" directory to the \"libraries\" directory.\n\nThe final structure should look like this:\n\n* Arduino/\n\t* libraries/\n\t\t* USB\\_Host\\_Shield\\_20/\n\nNow quit the Arduino IDE and reopen it.\n\nNow you should be able to go open all the examples codes by navigating to \"File>Examples>USB\\_Host\\_Shield\\_20\" and then select the example you will like to open.\n\nFor more information visit the following site: <http://arduino.cc/en/Guide/Libraries>.\n\n# How to use the library\n\n### Documentation\n\nDocumentation for the library can be found at the following link: <http://felis.github.com/USB_Host_Shield_2.0/>.\n\n### Enable debugging\n\nBy default serial debugging is disabled. To turn it on simply change ```ENABLE_UHS_DEBUGGING``` to 1 in [settings.h](settings.h) like so:\n\n```C++\n#define ENABLE_UHS_DEBUGGING 1\n```\n\n### Boards\n\nCurrently the following boards are supported by the library:\n\n* All official Arduino AVR boards (Uno, Duemilanove, Mega, Mega 2560, Mega ADK, Leonardo etc.)\n* Arduino Due\n    * If you are using the Arduino Due, then you must include the Arduino SPI library like so: ```#include <SPI.h>``` in your .ino file.\n* Teensy (Teensy++ 1.0, Teensy 2.0, Teensy++ 2.0, and Teensy 3.x)\n\t* Note if you are using the Teensy 3.x you should download this SPI library as well: <https://github.com/xxxajk/spi4teensy3>. You should then add ```#include <spi4teensy3.h>``` to your .ino file.\n* Balanduino\n* Sanguino\n* Black Widdow\n\nThe following boards need to be activated manually in [settings.h](settings.h):\n\n* Arduino Mega ADK\n\t* If you are using Arduino 1.5.5 or newer there is no need to activate the Arduino Mega ADK manually\n* Black Widdow\n\nSimply set the corresponding value to 1 instead of 0.\n\n### [Bluetooth libraries](BTD.cpp)\n\nThe [BTD library](BTD.cpp) is a general purpose library for an ordinary Bluetooth dongle.\nThis library make it easy to add support for different Bluetooth services like a PS3 or a Wii controller or SPP which is a virtual serial port via Bluetooth.\nSome different examples can be found in the [example directory](examples/Bluetooth).\n\nThe BTD library also makes it possible to use multiple services at once, the following example sketch is an example of this:\n[PS3SPP.ino](examples/Bluetooth/PS3SPP/PS3SPP.ino).\n\n### [BTHID library](BTHID.cpp)\n\nThe [Bluetooth HID library](BTHID.cpp) allows you to connect HID devices via Bluetooth to the USB Host Shield.\n\nCurrently HID mice and keyboards are supported.\n\nIt uses the standard Boot protocol by default, but it is also able to use the Report protocol as well. You would simply have to call ```setProtocolMode()``` and then parse ```HID_RPT_PROTOCOL``` as an argument. You will then have to modify the parser for your device. See the example: [BTHID.ino](examples/Bluetooth/BTHID/BTHID.ino) for more information.\n\nThe [PS4 library](#ps4-library) also uses this class to handle all Bluetooth communication.\n\nFor information see the following blog post: <http://blog.tkjelectronics.dk/2013/12/bluetooth-hid-devices-now-supported-by-the-usb-host-library/>.\n\n### [SPP library](SPP.cpp)\n\nSPP stands for \"Serial Port Profile\" and is a Bluetooth protocol that implements a virtual comport which allows you to send data back and forth from your computer/phone to your Arduino via Bluetooth.\nIt has been tested successfully on Windows, Mac OS X, Linux, and Android.\n\nTake a look at the [SPP.ino](examples/Bluetooth/SPP/SPP.ino) example for more information.\n\nMore information can be found at these blog posts:\n\n* <http://www.circuitsathome.com/mcu/bluetooth-rfcommspp-service-support-for-usb-host-2-0-library-released>\n* <http://blog.tkjelectronics.dk/2012/07/rfcommspp-library-for-arduino/>\n\nTo implement the SPP protocol I used a Bluetooth sniffing tool called [PacketLogger](http://www.tkjelectronics.com/uploads/PacketLogger.zip) developed by Apple.\nIt enables me to see the Bluetooth communication between my Mac and any device.\n\n### PS4 Library\n\nThe PS4BT library is split up into the [PS4BT](PS4BT.h) and the [PS4USB](PS4USB.h) library. These allow you to use the Sony PS4 controller via Bluetooth and USB.\n\nThe [PS4BT.ino](examples/Bluetooth/PS4BT/PS4BT.ino) and [PS4USB.ino](examples/PS4USB/PS4USB.ino) examples shows how to easily read the buttons, joysticks, touchpad and IMU on the controller via Bluetooth and USB respectively. It is also possible to control the rumble and light on the controller and get the battery level.\n\nBefore you can use the PS4 controller via Bluetooth you will need to pair with it.\n\nSimply create the PS4BT instance like so: ```PS4BT PS4(&Btd, PAIR);``` and then hold down the Share button and then hold down the PS without releasing the Share button. The PS4 controller will then start to blink rapidly indicating that it is in paring mode.\n\nIt should then automatically pair the dongle with your controller. This only have to be done once.\n\nFor information see the following blog post: <http://blog.tkjelectronics.dk/2014/01/ps4-controller-now-supported-by-the-usb-host-library/>.\n\nAlso check out this excellent Wiki by Frank Zhao about the PS4 controller: <http://eleccelerator.com/wiki/index.php?title=DualShock_4> and this Linux driver: <https://github.com/chrippa/ds4drv>.\n\n### PS3 Library\n\nThese libraries consist of the [PS3BT](PS3BT.cpp) and [PS3USB](PS3USB.cpp). These libraries allows you to use a Dualshock 3, Navigation or a Motion controller with the USB Host Shield both via Bluetooth and USB.\n\nIn order to use your Playstation controller via Bluetooth you have to set the Bluetooth address of the dongle internally to your PS3 Controller. This can be achieved by first plugging in the Bluetooth dongle and wait a few seconds. Now plug in the controller via USB and wait until the LEDs start to flash. The library has now written the Bluetooth address of the dongle to the PS3 controller.\n\nFinally simply plug in the Bluetooth dongle again and press PS on the PS3 controller. After a few seconds it should be connected to the dongle and ready to use.\n\n__Note:__ You will have to plug in the Bluetooth dongle before connecting the controller, as the library needs to read the address of the dongle. Alternatively you could set it in code like so: [PS3BT.ino#L20](examples/Bluetooth/PS3BT/PS3BT.ino#L20).\n\nFor more information about the PS3 protocol see the official wiki: <https://github.com/felis/USB_Host_Shield_2.0/wiki/PS3-Information>.\n\nAlso take a look at the blog posts:\n\n* <http://blog.tkjelectronics.dk/2012/01/ps3-controller-bt-library-for-arduino/>\n* <http://www.circuitsathome.com/mcu/sony-ps3-controller-support-added-to-usb-host-library>\n* <http://www.circuitsathome.com/mcu/arduino/interfacing-ps3-controllers-via-usb>\n\nA special thanks go to the following people:\n\n1. _Richard Ibbotson_ who made this excellent guide: <http://www.circuitsathome.com/mcu/ps3-and-wiimote-game-controllers-on-the-arduino-host-shield-part>\n2. _Tomoyuki Tanaka_ for releasing his code for the Arduino USB Host shield connected to the wiimote: <http://www.circuitsathome.com/mcu/rc-car-controlled-by-wii-remote-on-arduino>\n\nAlso a big thanks all the people behind these sites about the Motion controller:\n\n* <http://thp.io/2010/psmove/>\n* <http://www.copenhagengamecollective.org/unimove/>\n* <https://github.com/thp/psmoveapi>\n* <http://code.google.com/p/moveonpc/>\n\n### Xbox Libraries\n\nThe library supports both the original Xbox controller via USB and the Xbox 360 controller both via USB and wirelessly.\n\n#### Xbox library\n\nThe [XBOXOLD](XBOXOLD.cpp) class implements support for the original Xbox controller via USB.\n\nAll the information are from the following sites:\n\n* <https://github.com/torvalds/linux/blob/master/Documentation/input/xpad.txt>\n* <https://github.com/torvalds/linux/blob/master/drivers/input/joystick/xpad.c>\n* <http://euc.jp/periphs/xbox-controller.ja.html>\n* <https://github.com/Grumbel/xboxdrv/blob/master/PROTOCOL#L15>\n\n#### Xbox 360 Library\n\nThe library support one Xbox 360 via USB or up to four Xbox 360 controllers wirelessly by using a [Xbox 360 wireless receiver](http://blog.tkjelectronics.dk/wp-content/uploads/xbox360-wireless-receiver.jpg).\n\nTo use it via USB use the [XBOXUSB](XBOXUSB.cpp) library or to use it wirelessly use the [XBOXRECV](XBOXRECV.cpp) library.\n\n__Note that a Wireless controller can NOT be used via USB!__\n\nExamples code can be found in the [examples directory](examples/Xbox).\n\nAlso see the following blog posts:\n\n* <http://www.circuitsathome.com/mcu/xbox360-controller-support-added-to-usb-host-shield-2-0-library>\n* <http://blog.tkjelectronics.dk/2012/07/xbox-360-controller-support-added-to-the-usb-host-library/>\n* <http://blog.tkjelectronics.dk/2012/12/xbox-360-receiver-added-to-the-usb-host-library/>\n\nAll the information regarding the Xbox 360 controller protocol are form these sites:\n\n* <http://tattiebogle.net/index.php/ProjectRoot/Xbox360Controller/UsbInfo>\n* <http://tattiebogle.net/index.php/ProjectRoot/Xbox360Controller/WirelessUsbInfo>\n* <https://github.com/Grumbel/xboxdrv/blob/master/PROTOCOL>\n\n### [Wii library](Wii.cpp)\n\nThe [Wii](Wii.cpp) library support the Wiimote, but also the Nunchuch and Motion Plus extensions via Bluetooth. The Wii U Pro Controller is also supported via Bluetooth.\n\nFirst you have to pair with the controller, this is done automatically by the library if you create the instance like so:\n\n```C++\nWII Wii(&Btd, PAIR);\n```\n\nAnd then press 1 & 2 at once on the Wiimote or press sync if you are using a Wii U Pro Controller.\n\nAfter that you can simply create the instance like so:\n\n```C++\nWII Wii(&Btd);\n```\n\nThen just press any button on the Wiimote and it will then connect to the dongle.\n\nTake a look at the example for more information: [Wii.ino](examples/Bluetooth/Wii/Wii.ino).\n\nAlso take a look at the blog post:\n\n* <http://blog.tkjelectronics.dk/2012/08/wiimote-added-to-usb-host-library/>\n\nThe Wii IR camera can also be used, but you will have to activate the code for it manually as it is quite large. Simply set ```ENABLE_WII_IR_CAMERA``` to 1 in [settings.h](settings.h).\n\nThe [WiiIRCamera.ino](examples/Bluetooth/WiiIRCamera/WiiIRCamera.ino) example shows how it can be used.\n\n\nAll the information about the Wii controllers are from these sites:\n\n* <http://wiibrew.org/wiki/Wiimote>\n* <http://wiibrew.org/wiki/Wiimote/Extension_Controllers>\n* <http://wiibrew.org/wiki/Wiimote/Extension_Controllers/Nunchuck>\n* <http://wiibrew.org/wiki/Wiimote/Extension_Controllers/Wii_Motion_Plus>\n* The old library created by _Tomoyuki Tanaka_: <https://github.com/moyuchin/WiiRemote_on_Arduino> also helped a lot.\n\n# FAQ\n\n> When I plug my device into the USB connector nothing happens?\n\n* Try to connect a external power supply to the Arduino - this solves the problem in most cases.\n* You can also use a powered hub between the device and the USB Host Shield. You should then include the USB hub library: ```#include <usbhub.h>``` and create the instance like so: ```USBHub Hub1(&Usb);```.",
  "allVersions": [
    "0.0.2"
  ]
}
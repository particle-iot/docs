{
  "type": "libraries",
  "id": "EEPROM-Storage",
  "links": {
    "download": "https://api.particle.io/v1/libraries/EEPROM-Storage/archive/2.0.0.tar.gz"
  },
  "attributes": {
    "name": "EEPROM-Storage",
    "version": "2.0.0",
    "license": "LGPL-3",
    "author": "Daniel Porrey",
    "maintainer": "Daniel M. Porrey",
    "sentence": "Generic class to wrap an EEPROM variable on the Particle and Arduino platforms.",
    "paragraph": "The EEPROM Storage library provides the ability to access variables stored in EEPROM just as if they were stored in RAM.",
    "category": "Data Storages",
    "url": "https://github.com/porrey/EEPROM-Storage/blob/master/README.md",
    "repository": "https://github.com/porrey/EEPROM-Storage.git",
    "architectures": [
      "particle-photon",
      "particle-electron",
      " avr",
      " renesas_uno",
      " esp8266"
    ],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "e",
  "cardUrl": "/reference/device-os/libraries/e/EEPROM-Storage",
  "versions": {
    "1.0.0": {
      "builds": {
        "2.0.1": {
          "photon": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "electron": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "argon": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "boron": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          }
        },
        "1.5.2": {
          "photon": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "electron": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "argon": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "boron": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          }
        },
        "3.3.0": {
          "photon": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "electron": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "argon": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "boron": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          }
        },
        "5.0.1": {
          "argon": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "boron": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "bsom": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "b5som": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "tracker": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "p2": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          }
        },
        "4.0.0": {
          "argon": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "boron": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "bsom": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "b5som": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "tracker": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "esomx": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          }
        },
        "5.6.0": {
          "argon": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "boron": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "bsom": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "b5som": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "tracker": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "p2": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          }
        },
        "4.2.0": {
          "argon": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "boron": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "bsom": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "b5som": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "tracker": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "esomx": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          }
        },
        "6.2.0": {
          "boron": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "bsom": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "b5som": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "tracker": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "p2": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          },
          "msom": {
            "address": false,
            "cloud": true,
            "demo": true,
            "sizeof": true,
            "tests": false
          }
        }
      },
      "added": "2022-06-17T10:16:53.772Z"
    },
    "1.1.0": {
      "added": "2025-02-01T16:19:22.299Z",
      "builds": {
        "6.2.0": {
          "boron": {
            "address1": false,
            "address2": false,
            "advanced-struct": false,
            "assignment": false,
            "basic-structure": false,
            "byte-index": false,
            "checksum": true,
            "clear": false,
            "cloud": true,
            "demo": false,
            "invalid-address": false,
            "shadow": false,
            "simple1": false,
            "simple2": true,
            "sizeof": false,
            "tests": false
          },
          "bsom": {
            "address1": false,
            "address2": false,
            "advanced-struct": false,
            "assignment": false,
            "basic-structure": false,
            "byte-index": false,
            "checksum": true,
            "clear": false,
            "cloud": true,
            "demo": false,
            "invalid-address": false,
            "shadow": false,
            "simple1": false,
            "simple2": true,
            "sizeof": false,
            "tests": false
          },
          "b5som": {
            "address1": false,
            "address2": false,
            "advanced-struct": false,
            "assignment": false,
            "basic-structure": false,
            "byte-index": false,
            "checksum": true,
            "clear": false,
            "cloud": true,
            "demo": false,
            "invalid-address": false,
            "shadow": false,
            "simple1": false,
            "simple2": true,
            "sizeof": false,
            "tests": false
          },
          "tracker": {
            "address1": false,
            "address2": false,
            "advanced-struct": false,
            "assignment": false,
            "basic-structure": false,
            "byte-index": false,
            "checksum": true,
            "clear": false,
            "cloud": true,
            "demo": false,
            "invalid-address": false,
            "shadow": false,
            "simple1": false,
            "simple2": true,
            "sizeof": false,
            "tests": false
          },
          "p2": {
            "address1": false,
            "address2": false,
            "advanced-struct": false,
            "assignment": false,
            "basic-structure": false,
            "byte-index": false,
            "checksum": true,
            "clear": false,
            "cloud": true,
            "demo": false,
            "invalid-address": false,
            "shadow": false,
            "simple1": false,
            "simple2": true,
            "sizeof": false,
            "tests": false
          },
          "msom": {
            "address1": false,
            "address2": false,
            "advanced-struct": false,
            "assignment": false,
            "basic-structure": false,
            "byte-index": false,
            "checksum": true,
            "clear": false,
            "cloud": true,
            "demo": false,
            "invalid-address": false,
            "shadow": false,
            "simple1": false,
            "simple2": true,
            "sizeof": false,
            "tests": false
          }
        },
        "5.6.0": {
          "argon": {
            "address1": false,
            "address2": false,
            "advanced-struct": false,
            "assignment": false,
            "basic-structure": false,
            "byte-index": false,
            "checksum": true,
            "clear": false,
            "cloud": true,
            "demo": false,
            "invalid-address": false,
            "shadow": false,
            "simple1": false,
            "simple2": true,
            "sizeof": false,
            "tests": false
          },
          "boron": {
            "address1": false,
            "address2": false,
            "advanced-struct": false,
            "assignment": false,
            "basic-structure": false,
            "byte-index": false,
            "checksum": true,
            "clear": false,
            "cloud": true,
            "demo": false,
            "invalid-address": false,
            "shadow": false,
            "simple1": false,
            "simple2": true,
            "sizeof": false,
            "tests": false
          },
          "bsom": {
            "address1": false,
            "address2": false,
            "advanced-struct": false,
            "assignment": false,
            "basic-structure": false,
            "byte-index": false,
            "checksum": true,
            "clear": false,
            "cloud": true,
            "demo": false,
            "invalid-address": false,
            "shadow": false,
            "simple1": false,
            "simple2": true,
            "sizeof": false,
            "tests": false
          },
          "b5som": {
            "address1": false,
            "address2": false,
            "advanced-struct": false,
            "assignment": false,
            "basic-structure": false,
            "byte-index": false,
            "checksum": true,
            "clear": false,
            "cloud": true,
            "demo": false,
            "invalid-address": false,
            "shadow": false,
            "simple1": false,
            "simple2": true,
            "sizeof": false,
            "tests": false
          },
          "tracker": {
            "address1": false,
            "address2": false,
            "advanced-struct": false,
            "assignment": false,
            "basic-structure": false,
            "byte-index": false,
            "checksum": true,
            "clear": false,
            "cloud": true,
            "demo": false,
            "invalid-address": false,
            "shadow": false,
            "simple1": false,
            "simple2": true,
            "sizeof": false,
            "tests": false
          },
          "p2": {
            "address1": false,
            "address2": false,
            "advanced-struct": false,
            "assignment": false,
            "basic-structure": false,
            "byte-index": false,
            "checksum": true,
            "clear": false,
            "cloud": true,
            "demo": false,
            "invalid-address": false,
            "shadow": false,
            "simple1": false,
            "simple2": true,
            "sizeof": false,
            "tests": false
          }
        },
        "4.2.0": {
          "argon": {
            "address1": false,
            "address2": false,
            "advanced-struct": false,
            "assignment": false,
            "basic-structure": false,
            "byte-index": false,
            "checksum": true,
            "clear": false,
            "cloud": true,
            "demo": false,
            "invalid-address": false,
            "shadow": false,
            "simple1": false,
            "simple2": true,
            "sizeof": false,
            "tests": false
          },
          "boron": {
            "address1": false,
            "address2": false,
            "advanced-struct": false,
            "assignment": false,
            "basic-structure": false,
            "byte-index": false,
            "checksum": true,
            "clear": false,
            "cloud": true,
            "demo": false,
            "invalid-address": false,
            "shadow": false,
            "simple1": false,
            "simple2": true,
            "sizeof": false,
            "tests": false
          },
          "bsom": {
            "address1": false,
            "address2": false,
            "advanced-struct": false,
            "assignment": false,
            "basic-structure": false,
            "byte-index": false,
            "checksum": true,
            "clear": false,
            "cloud": true,
            "demo": false,
            "invalid-address": false,
            "shadow": false,
            "simple1": false,
            "simple2": true,
            "sizeof": false,
            "tests": false
          },
          "b5som": {
            "address1": false,
            "address2": false,
            "advanced-struct": false,
            "assignment": false,
            "basic-structure": false,
            "byte-index": false,
            "checksum": true,
            "clear": false,
            "cloud": true,
            "demo": false,
            "invalid-address": false,
            "shadow": false,
            "simple1": false,
            "simple2": true,
            "sizeof": false,
            "tests": false
          },
          "tracker": {
            "address1": false,
            "address2": false,
            "advanced-struct": false,
            "assignment": false,
            "basic-structure": false,
            "byte-index": false,
            "checksum": true,
            "clear": false,
            "cloud": true,
            "demo": false,
            "invalid-address": false,
            "shadow": false,
            "simple1": false,
            "simple2": true,
            "sizeof": false,
            "tests": false
          },
          "esomx": {
            "address1": false,
            "address2": false,
            "advanced-struct": false,
            "assignment": false,
            "basic-structure": false,
            "byte-index": false,
            "checksum": true,
            "clear": false,
            "cloud": true,
            "demo": false,
            "invalid-address": false,
            "shadow": false,
            "simple1": false,
            "simple2": true,
            "sizeof": false,
            "tests": false
          }
        },
        "2.3.0": {
          "photon": {
            "address1": false,
            "address2": false,
            "advanced-struct": false,
            "assignment": false,
            "basic-structure": false,
            "byte-index": false,
            "checksum": true,
            "clear": false,
            "cloud": true,
            "demo": false,
            "invalid-address": false,
            "shadow": false,
            "simple1": false,
            "simple2": true,
            "sizeof": false,
            "tests": false
          },
          "electron": {
            "address1": false,
            "address2": false,
            "advanced-struct": false,
            "assignment": false,
            "basic-structure": false,
            "byte-index": false,
            "checksum": true,
            "clear": false,
            "cloud": true,
            "demo": false,
            "invalid-address": false,
            "shadow": false,
            "simple1": false,
            "simple2": true,
            "sizeof": false,
            "tests": false
          }
        }
      }
    },
    "2.0.0": {
      "added": "2025-03-01T11:03:28.909Z",
      "builds": {},
      "noExamples": true
    }
  },
  "readme": "Arduino Build (image removed)\nParticle Build (image removed)\nGitHub release (image removed)\n\n# EEPROM-Storage Library\n## Overview\nThe EEPROM Storage library provides the ability to access variables stored in EEPROM just as if they were stored in normal RAM.\n\n## EEPROMStorage\\<T\\> vs EEPROMCache\\<T\\>\nThere are two classes that provide the similar access to EEEPROM. The first is the Direct Storage class which reads and writes to directly to and from EEPROM. The second is the Cache Access whichs reads and writes from memory and writes to the EEPROM when directed.\n\nOther than the `restore()` and `commit()` (*see description below*) methods on the cache based class, these objects can be used interchangably.\n\n### Direct Storage (EEPROMStorage\\<T\\>)\nThis class writes directly to the EEPROM whenever the variable value is updated and reads directly from EEPROM when the variable value is accessed.\n\nWithin the library, examples of how to use this type of access can be found in the **Storage** folder under **Examples**.\n\n### Cached Access (EEPROMCache\\<T\\>)\nThis class reads and writes the variable value from RAM and only updates the value from EEPROM when `restore()` is called. Subsequently it only writes to EEPROM when `commit()` is called.\n\nWithin the library, examples of how to use this type of access can be found in the **Cache** folder under **Examples**.\n\n## General Usage\nOnce defined, a variable can be used in in the same manner as its underlying type. For example, a variable defined as an integer (int) would be defined as follows:\n\n    int i = 0;\n\nThroughout the code this variable can be read and written in various ways. For example, to increment the variable, we would use the statement\n\n    i++;\n\nTo set the value to a specific value we would, for example, use the statement\n\n    i = 12;\n\nThis is all standard coding to even the novice programmer but is used here to show the simplicity of the EEPROM Storage/Cache class. An integer variable stored in EEPROM would be defined in the following manner:\n\n    EEPROMStorage<int> i(0, 0);\n    \nor\n\n\tEEPROMCache<int> i(0, 0);\n\nwhere the first parameter of the constructor defines the address of the variable in EEPROM, and the second parameter defines the default value.\n\nAfter the definition, the variable `i` can be used in the same manner, `i++` and `i = 12` will work the same way they did before, but now the value is stored and retrieved to and from EEPROM.\n\n## EEPROM Address\n### Memory Requirement\n---\nWhen defining an EEPROM Storage variable, it is important to understand the number of bytes required for the underlying type and ensuring that the variables are spaced appropriately so they do not collide.\n\nEach variable requires enough memory to store the underlying type plus one additional byte for a checksum.\n\nConsider the following variable definitions.\n\n\tEEPROMStorage<uint8_t> v1(0, 0);\t// 2 bytes (1 + 1 checksum), positions 0 and 1\n\tEEPROMStorage<uint16_t> v2(2, 0);\t// 3 bytes (2 + 1 checksum), positions 2, 3 and 4\n\tEEPROMStorage<uint32_t> v3(5, 0);\t// 5 bytes (4 + 1 checksum), positions 5, 6, 6, 8 and 9\n\tEEPROMStorage<float> v4(10, 0.0);\t// 5 bytes (4 + 1 checksum), positions 10, 11, 12, 13 and 14\n\tEEPROMStorage<bool> v5(15, false);\t// 2 bytes (1 + 1 checksum), positions 15, 16, 17, 18 and 19\n\nThe best way to think about EEPROM memory is to think about it as a large byte array with a base index of 0. In fact, the Arduino libraries construct access to EEPROM in this manner. \n\nIn the above definitions, `v1` is stored at position 0 and occupies two bytes. The first byte is for the data type and the second byte is for the one-byte checksum. The variable `v1` requires two bytes and thus occupies EEPROM memory locations 0 and 1,\n\nThe next variable, `v2`, is in the position 2, immediately following `v1`, and occupies three bytes. The variables `v3`, `v4` and `v5` follow in the same contiguous manner, ensuring that no two variables occupy the same memory positions.\n\n> Aligning variables at the beginning of memory or aligning them in a contiguous nature is not required. This just makes it easier, in my opinion, to keep track. You are free to arrange them in any manner that suits your needs.\n\nIf you need help determining the proper address for your `EEPROMStorage` instances, open the example sketch called **address.ino** and follow the instructions.\n\nUsing the nextAddress() method will make it easier to align your variables in memory.\n\n\tEEPROMStorage<uint8_t> v1(0, 0);\t\t\t// 2 bytes (1 + 1 checksum), positions 0 and 1\n\tEEPROMStorage<uint16_t> v2(v1.nextAddress(), 0);\t// 3 bytes (2 + 1 checksum), positions 2, 3 and 4\n\tEEPROMStorage<uint32_t> v3(v2.nextAddress(), 0);\t// 5 bytes (4 + 1 checksum), positions 5, 6, 6, 8 and 9\n\tEEPROMStorage<float> v4(v3.nextAddress(), 0.0);\t\t// 5 bytes (4 + 1 checksum), positions 10, 11, 12, 13 and 14\n\tEEPROMStorage<bool> v5(v4.nextAddress(), false);\t// 2 bytes (1 + 1 checksum), positions 15, 16, 17, 18 and 19\n\n### Determining Data Type Size ###\n---\nIf you are not sure of the memory requirement for a given data type, you can use the `sizeof` operator. User the Serial port to display the size of any data type.\n\n    Serial.print(\"The size of int is \"); Serial.print(sizeof(int)); DEBUG_INFO(\".\");\n\nWhen using the `sizeof` operator to determine the number of bytes to preserve remember to add one extra byte for the **checksum**.\n\nTo see a full demonstration of this, open the example sketch called **sizeof.ino**.\n\n## EEPROM Storage Initialization\nWhen data has never been stored EEPROM on a micro-controller the memory is in an uninitialized state. Since each byte of memory must have a value between 0 and 255, it is not always possible to detect an uninitialized byte. This behavior could have unexpected side effects if you define a variable and fail to detect whether the instance has been initialized.\n\nFor this reason, the EEPROM Storage library uses a one-byte checksum to determine if the instance has been initialized or not. When an instance is constructed, a default value is specified. This default value is always returned until a value is set thus initializing the location. Each write operation to EEPROM will update the checksum.\n\n## Scope\nIt is important to note that since `EEPROMStorage` variables are in fact, stored in the Micro-controllers EEPROM, the scope of these variables is always global. In fact it is possible to instantiate more than one instance using the same address that as a result will keep the two instances in sync.\n\n> The `EEPROMStorage` variable never caches the value internally and will read the value from EEPROM each time it is requested. Similarly, each time the instance value is updated it is written directly to EEPROM.\n\n# Usage\n## Declaration\nAn instance of `EEPROMStorage` can be declared globally, within a class or within a function keeping in mind, as stated previously, that the address controls whether two or more instances share the same value.\n\nThe syntax for declaration is as follows:\n\n    EEPROMStorage<data type> variableName(address, default value);\n\n### Data Type\n---\nSpecifies the underlying data type for the given instance.\n\n### Address\n---\nSpecifies the starting index in EEPROM where the value will be stored.\n\n### Default Value\n---\nSpecifies the value that will be returned by the instance when the EEPROM memory location has not been initialized (initialization is determined by the checksum).\n\n### Example\n---\nTo initialize an instance with an underlying data type of int located in position 50 of the EEPROM and a default value of 10, the syntax would be as follows:\n\n\tEEPROMStorage<int> myInt(50, 10);\n\n## Assignment\nUsing the previous example, assigning a value to the instance is as simple as the assignment shown here.\n\n\tmyInt = 100; \n\nThe `EEPROMStorage` class also defines a `set()` method that can be used.\n\n\tmyInt.set(100);\n\n## Retrieving\nTo get the instance value, simply assign it to a variable, as shown below,\n\n\tint x = myInt;\n\nor pass it as an argument in any function that takes an int argument as shown below.\n\n\tSerial.print(\"myInt = \"); DEBUG_INFO(myInt);\n\nThe `EEPROMStorage` class also defines a `get()` method that can be used.\n\n\tint x = myInt.get();\n\n## Platform/Boards Used in Testing\n1. Arduino on Mega 2560\n2. Arduino on ESP8266 [ESPino (ESP-12 Module)]\n3. Particle on Argon with OS version 6.2.1\n4. Particle on Photon with OS version 3.3.1\n5. Particle on Electron with OS version 3.3.1\n\n## LICENSE\n*Licensed under the GPL-3.0 license*\n\n*Copyright 2017-2025 Daniel Porrey*\n",
  "allVersions": [
    "2.0.0",
    "1.1.0",
    "1.0.3",
    "1.0.2",
    "1.0.0"
  ]
}
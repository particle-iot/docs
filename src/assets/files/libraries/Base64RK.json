{
  "type": "libraries",
  "id": "Base64RK",
  "links": {
    "download": "https://api.particle.io/v1/libraries/Base64RK/archive/0.0.1.tar.gz"
  },
  "attributes": {
    "name": "Base64RK",
    "version": "0.0.1",
    "installs": 7982,
    "license": "MIT",
    "author": "rickkas7@rickkas7.com",
    "sentence": "Base64 encoded and decoder",
    "url": "https://github.com/rickkas7/Base64RK",
    "repository": "https://github.com/rickkas7/Base64RK.git",
    "architectures": [
      "*"
    ],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "b",
  "cardUrl": "/cards/libraries/b/Base64RK",
  "versions": {
    "0.0.1": {
      "builds": {
        "2.0.1": {
          "photon": {
            "1-tester-Base64": true,
            "2-unittest-Base64": true
          },
          "electron": {
            "1-tester-Base64": true,
            "2-unittest-Base64": true
          },
          "argon": {
            "1-tester-Base64": true,
            "2-unittest-Base64": true
          },
          "boron": {
            "1-tester-Base64": true,
            "2-unittest-Base64": true
          }
        },
        "1.5.2": {
          "photon": {
            "1-tester-Base64": true,
            "2-unittest-Base64": true
          },
          "electron": {
            "1-tester-Base64": true,
            "2-unittest-Base64": true
          },
          "argon": {
            "1-tester-Base64": true,
            "2-unittest-Base64": true
          },
          "boron": {
            "1-tester-Base64": true,
            "2-unittest-Base64": true
          }
        }
      }
    }
  },
  "readme": "# Base64RK - Base64 Encoder/Decoder for Particle\n\nUseful for transmitting binary data in places where only text strings are allowed. On the Particle platform, functions, publish, and subscribe need encoding of binary data.\n\n- [https://en.wikipedia.org/wiki/Base64](https://en.wikipedia.org/wiki/Base64)\n- [https://tools.ietf.org/html/rfc4648](https://tools.ietf.org/html/rfc4648)\n\n\n## API\n\n### encode\n\nEncode binary data to Base64\n\n```\nstatic bool encode(const uint8_t *src, size_t srcLen, char *dst, size_t &dstLen, bool nullTerminate);\n```\n\n- src Pointer to the binary data to encode.\n\n- srcLen Length of the binary data to encode in bytes.\n\n- dst Pointer to the buffer to hold the character string. See getEncodedSize() for\ninformation on how large of a buffer you need.\n\n- dstLen On input, the length of the buffer pointed to by dst. On successful return,\nthe number of bytes of text data.\n\n- nullTerminate true to add a null terminator, false to not. Note that the length in dstLen\ndoes NOT include the null terminator if included.\n\n- Returns true on success or false on failure (buffer too small, for example)\n\nThis method does not break the data into lines. The intended use case of this is things like\nParticle.publish and the line breaks are not helpful and just use up extra bytes.\n\nThis method does not allocate memory. It is MT safe.\n\t \n--\n\n### getEncodedSize\n\nDetermine the buffer size for the encoded Base64 data\n\n```\nstatic size_t getEncodedSize(size_t srcLen, bool nullTerminate);\n```\n- srcLen The size of the data in bytes\n\n- nullTerminate true if you will be adding a null terminator or false if not\n\nThe size is (srcLen + 2) / 3 * 4.\n\nThis method does not allocate memory. It is MT safe.\n\t \n--\n\n### encodeToString\n\nEncode binary data and return it as a String object.\n\n```\nstatic String encodeToString(const uint8_t *src, size_t srcLen);\n```\n\n- src Pointer to the binary data to encode.\n\n- srcLen Length of the binary data to encode in bytes.\n\n- Returns A String object containing Base64 data\n\nThis method does not break the data into lines. The intended use case of this is things like\nParticle.publish and the line breaks are not helpful and just use up extra bytes.\n\nThis is relatively efficient (the buffer is only allocated once using reserve) but using\nthe other encode() method does not require a memory allocation and is more efficient.\n\nThis method is MT safe.\n\t \n--\n\n### decode (c-string)\n\nDecode Base64 encoded data back to binary data from a c-string\n\n```\nstatic bool decode(const char *src, uint8_t *dst, size_t &dstLen);\n```\n\t\n- src Pointer to the source string. You can directly pass a String object if desired.\n\n- dst Pointer to a buffer to store te binary data in\n\n- dstLen On input, the size of the buffer pointed to by dst. On successful return, the\nnumber of actual bytes.\n\n- Returns true on a successful decode or false on error (invalid input or dstLen too small)\n\nThe input src must not contain line breaks (CRLF). The intended use case of this is things like\nParticle.publish and the line breaks are not helpful and just use up extra bytes.\n\nThis method does not allocate memory. It is MT safe.\n\n--\n\n### decode (buffer and length)\n\nDecode Base64 encoded data back to binary data from a buffer and length\n\n```\nstatic bool decode(const char *src, size_t srcLen, uint8_t *dst, size_t &dstLen);\n```\n\n- src Pointer to the source string. It does not need to be null terminated.\n\n- srcLen The length of the source string in bytes\n\n- dst Pointer to a buffer to store te binary data in\n\n- dstLen On input, the size of the buffer pointed to by dst. On successful return, the\nnumber of actual bytes.\n\n- Returns true on a successful decode or false on error (invalid input or dstLen too small)\n\nThe input src must not contain line breaks (CRLF). The intended use case of this is things like\nParticle.publish and the line breaks are not helpful and just use up extra bytes.\n\nThis method does not allocate memory. It is MT safe.\n\n--\n\n### getMaxDecodedSize\n\nGet the maximum size of the decoded data, given Base64 encoded string of srcLen\n\n```\nstatic size_t getMaxDecodedSize(size_t srcLen);\n```\n\nThis is ((srcLen + 3) / 4) * 3. The actual data may be smaller than this if it's not a multiple\nof 3 bytes and padding is inserted. The actual length will be returned in dstLen for decode.\n\nThis method does not allocate memory. It is MT safe.\n\t \n\n## Examples\n\n\n### examples/1-tester-Base64\n\nThis example uses Particle functions and publish to test the various methods.\n\nFor example, given the code running on device test2:\n\n```\nparticle call test2 text \"hello world\"\n```\n\nThe following will appear on debug serial and published:\n\n```\ntext->base64 aGVsbG8gd29ybGQ=\n```\n\nYou can then decode this to hex:\n\n```\nparticle call test2 base64 aGVsbG8gd29ybGQ=\n``` \n\nwhich generates:\n\n```\nbase64->hex 68656c6c6f20776f726c64\n```\n\nYou can also convert hex back to base64:\n\n```\nparticle call test2 hex \"68656c6c6f20776f726c64\"\n```\n\n```\nhex->base64 aGVsbG8gd29ybGQ=\n```\n\n\n### examples/2-unittest-Base64\n\nThis example runs pre-generated sample data through the parser and decoder to make sure they work properly.\n\n## Test Code\n\nThere is also code in the test directory, for off-device testing. \n\n### generate-test-data\n\nThis is the node.js tool that generated the test data used in the unit tests (both on-device and off-device).\n\n### unit-test\n\nThe unit-test is designed to run on a standard gcc environment, such as Mac or Linux, or cygwin. It encodes and decodes a variety of data samples and makes sure they match the expected data.\n\nData from size 0 to 16 bytes is tested, as well as other sizes up to 512 bytes, to make sure a variety of padding circumstances are tested, as well as a large number of bit combinations.\n\nParticularly useful is running under Linux with [valgrind](http://valgrind.org/) installed. The `make check` target runs the unit-test program under valgrind. The tool detects common memory errors including if the code:\n\n- Accesses memory it shouldn't (areas not yet allocated, areas that have been freed, areas past the end of heap blocks, inaccessible areas of the stack).\n- Uses uninitialized values in dangerous ways.\n- Leaks memory.\n- Does bad frees of heap blocks (double frees, mismatched frees).\n- Passes overlapping source and destination memory blocks to memcpy() and related functions.\n\n\n\n ",
  "allVersions": [
    "0.0.1"
  ]
}
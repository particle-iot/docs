{
  "type": "libraries",
  "id": "RTClibrary",
  "links": {
    "download": "https://api.particle.io/v1/libraries/RTClibrary/archive/1.2.1.tar.gz"
  },
  "attributes": {
    "name": "RTClibrary",
    "version": "1.2.1",
    "installs": 17120,
    "author": "Adafruit",
    "sentence": "A fork of Jeelab's fantastic RTC library",
    "paragraph": "A fork of Jeelab's fantastic RTC library",
    "url": "https://github.com/adafruit/RTClib",
    "architectures": [
      "*"
    ],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "r",
  "cardUrl": "/cards/libraries/r/RTClibrary",
  "versions": {
    "1.2.1": {
      "builds": {
        "2.0.1": {
          "photon": {
            "datecalc": true,
            "ds1307": true,
            "ds1307SqwPin": true,
            "ds1307nvram": true,
            "ds3231": true,
            "pcf8523": true,
            "softrtc": true,
            "usage": false
          },
          "electron": {
            "datecalc": true,
            "ds1307": true,
            "ds1307SqwPin": true,
            "ds1307nvram": true,
            "ds3231": true,
            "pcf8523": true,
            "softrtc": true,
            "usage": false
          },
          "argon": {
            "datecalc": true,
            "ds1307": true,
            "ds1307SqwPin": true,
            "ds1307nvram": true,
            "ds3231": true,
            "pcf8523": true,
            "softrtc": true,
            "usage": false
          },
          "boron": {
            "datecalc": true,
            "ds1307": true,
            "ds1307SqwPin": true,
            "ds1307nvram": true,
            "ds3231": true,
            "pcf8523": true,
            "softrtc": true,
            "usage": false
          }
        },
        "1.5.2": {
          "photon": {
            "datecalc": true,
            "ds1307": true,
            "ds1307SqwPin": true,
            "ds1307nvram": true,
            "ds3231": true,
            "pcf8523": true,
            "softrtc": true,
            "usage": false
          },
          "electron": {
            "datecalc": true,
            "ds1307": true,
            "ds1307SqwPin": true,
            "ds1307nvram": true,
            "ds3231": true,
            "pcf8523": true,
            "softrtc": true,
            "usage": false
          },
          "argon": {
            "datecalc": true,
            "ds1307": true,
            "ds1307SqwPin": true,
            "ds1307nvram": true,
            "ds3231": true,
            "pcf8523": true,
            "softrtc": true,
            "usage": false
          },
          "boron": {
            "datecalc": true,
            "ds1307": true,
            "ds1307SqwPin": true,
            "ds1307nvram": true,
            "ds3231": true,
            "pcf8523": true,
            "softrtc": true,
            "usage": false
          }
        }
      }
    }
  },
  "readme": "# RTClibrary\n\nA Particle library for RTClibrary\n\n## Welcome to your library!\n\nTo get started, modify the sources in [src](src). Rename the example folder inside [examples](examples) to a more meaningful name and add additional examples in separate folders.\n\nTo compile your example you can use `particle compile examples/usage` command in [Particle CLI](https://docs.particle.io/guide/tools-and-features/cli#update-your-device-remotely) or use our [Desktop IDE](https://docs.particle.io/guide/tools-and-features/dev/#compiling-code).\n\nLibraries can also depend on other libraries. To add a dependency use [`particle library add`](https://docs.particle.io/guide/tools-and-features/cli#adding-a-library) or [library management](https://docs.particle.io/guide/tools-and-features/dev/#managing-libraries) in Desktop IDE.\n\nAfter the library is done you can upload it with `particle library upload` or `Upload` command in the IDE. This will create a private (only visible by you) library that you can use in other projects. If you wish to make your library public, use `particle library publish` or `Publish` command.\n\n_TODO: update this README_\n\n## Usage\n\nConnect XYZ hardware, add the RTClibrary library to your project and follow this simple example:\n\n```\n#include \"RTClibrary.h\"\nRTClibrary rTClibrary;\n\nvoid setup() {\n  rTClibrary.begin();\n}\n\nvoid loop() {\n  rTClibrary.process();\n}\n```\n\nSee the [examples](examples) folder for more details.\n\n## Documentation\n\nTODO: Describe `RTClibrary`\n\n## Contributing\n\nHere's how you can make changes to this library and eventually contribute those changes back.\n\nTo get started, [clone the library from GitHub to your local machine](https://help.github.com/articles/cloning-a-repository/).\n\nChange the name of the library in `library.properties` to something different. You can add your name at then end.\n\nModify the sources in <src> and <examples> with the new behavior.\n\nTo compile an example, use `particle compile examples/usage` command in [Particle CLI](https://docs.particle.io/guide/tools-and-features/cli#update-your-device-remotely) or use our [Desktop IDE](https://docs.particle.io/guide/tools-and-features/dev/#compiling-code).\n\nAfter your changes are done you can upload them with `particle library upload` or `Upload` command in the IDE. This will create a private (only visible by you) library that you can use in other projects. Do `particle library add RTClibrary_myname` to add the library to a project on your machine or add the RTClibrary_myname library to a project on the Web IDE or Desktop IDE.\n\nAt this point, you can create a [GitHub pull request](https://help.github.com/articles/about-pull-requests/) with your changes to the original library. \n\nIf you wish to make your library public, use `particle library publish` or `Publish` command.\n\n## LICENSE\nCopyright 2018 Adafruit\n\nLicensed under the <insert your choice of license here> license\n\nThis is a fork of JeeLab's fantastic real time clock library for Arduino.\n\nFor details on using this library with an RTC module like the DS1307, PCF8523, or DS3231, see the guide at: https://learn.adafruit.com/ds1307-real-time-clock-breakout-board-kit/overview\n\nTo download. click the DOWNLOADS button to the right, and rename the uncompressed folder RTClib.\n\nPlace the RTClib folder in your *arduinosketchfolder*/libraries/ folder. \nYou may need to create the libraries subfolder if its your first library. Restart the IDE.\n\nPlease note that dayOfTheWeek() ranges from 0 to 6 inclusive with 0 being 'Sunday'\n\n<!-- START COMPATIBILITY TABLE -->\n\n## Compatibility\n\nMCU                | Tested Works | Doesn't Work | Not Tested  | Notes\n------------------ | :----------: | :----------: | :---------: | -----\nAtmega328 @ 16MHz  |      X       |             |            | \nAtmega328 @ 12MHz  |      X       |             |            | \nAtmega32u4 @ 16MHz |      X       |             |            | Use SDA/SCL on pins D3 &amp; D2\nAtmega32u4 @ 8MHz  |      X       |             |            | Use SDA/SCL on pins D3 &amp; D2\nESP8266            |      X       |             |            | SDA/SCL default to pins 4 &amp; 5 but any two pins can be assigned as SDA/SCL using Wire.begin(SDA,SCL)\nAtmega2560 @ 16MHz |      X       |             |            | Use SDA/SCL on Pins 20 &amp; 21\nATSAM3X8E          |      X       |             |            | Use SDA1 and SCL1\nATSAM21D           |      X       |             |            | \nATtiny85 @ 16MHz   |      X       |             |            | \nATtiny85 @ 8MHz    |      X       |             |            | \nIntel Curie @ 32MHz |             |             |     X       | \nSTM32F2            |             |             |     X       | \n\n  * ATmega328 @ 16MHz : Arduino UNO, Adafruit Pro Trinket 5V, Adafruit Metro 328, Adafruit Metro Mini\n  * ATmega328 @ 12MHz : Adafruit Pro Trinket 3V\n  * ATmega32u4 @ 16MHz : Arduino Leonardo, Arduino Micro, Arduino Yun, Teensy 2.0\n  * ATmega32u4 @ 8MHz : Adafruit Flora, Bluefruit Micro\n  * ESP8266 : Adafruit Huzzah\n  * ATmega2560 @ 16MHz : Arduino Mega\n  * ATSAM3X8E : Arduino Due\n  * ATSAM21D : Arduino Zero, M0 Pro\n  * ATtiny85 @ 16MHz : Adafruit Trinket 5V\n  * ATtiny85 @ 8MHz : Adafruit Gemma, Arduino Gemma, Adafruit Trinket 3V\n\n<!-- END COMPATIBILITY TABLE -->\n\n",
  "allVersions": [
    "1.2.1"
  ]
}
{
  "type": "libraries",
  "id": "APNHelperRK",
  "links": {
    "download": "https://api.particle.io/v1/libraries/APNHelperRK/archive/0.0.2.tar.gz"
  },
  "attributes": {
    "name": "APNHelperRK",
    "version": "0.0.2",
    "installs": 9792,
    "license": "MIT",
    "author": "Rick Kaseguma <rickkas7@rickk.com>",
    "sentence": "Utilities for managing multiple 3rd-party SIM APNs from a single Electron binary",
    "url": "https://github.com/rickkas7/APNHelperRK",
    "repository": "https://github.com/rickkas7/APNHelperRK.git",
    "architectures": [
      "particle-electron"
    ],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "a",
  "cardUrl": "/cards/libraries/a/APNHelperRK",
  "versions": {
    "0.0.2": {
      "builds": {
        "2.0.1": {
          "photon": {
            "1-simple-apn": false
          },
          "electron": {
            "1-simple-apn": true
          },
          "argon": {
            "1-simple-apn": false
          },
          "boron": {
            "1-simple-apn": true
          }
        },
        "1.5.2": {
          "photon": {
            "1-simple-apn": false
          },
          "electron": {
            "1-simple-apn": true
          },
          "argon": {
            "1-simple-apn": false
          },
          "boron": {
            "1-simple-apn": true
          }
        },
        "3.3.0": {
          "photon": {
            "1-simple-apn": false
          },
          "electron": {
            "1-simple-apn": true
          },
          "argon": {
            "1-simple-apn": false
          },
          "boron": {
            "1-simple-apn": true
          }
        },
        "5.0.1": {
          "argon": {
            "1-simple-apn": false
          },
          "boron": {
            "1-simple-apn": true
          },
          "bsom": {
            "1-simple-apn": true
          },
          "b5som": {
            "1-simple-apn": true
          },
          "tracker": {
            "1-simple-apn": true
          },
          "p2": {
            "1-simple-apn": false
          }
        },
        "4.0.0": {
          "argon": {
            "1-simple-apn": false
          },
          "boron": {
            "1-simple-apn": true
          },
          "bsom": {
            "1-simple-apn": true
          },
          "b5som": {
            "1-simple-apn": true
          },
          "tracker": {
            "1-simple-apn": true
          },
          "esomx": {
            "1-simple-apn": true
          }
        }
      },
      "added": "2022-06-17T10:16:53.767Z"
    }
  },
  "readme": "# Dynamically setting the Electron APN\n\nWhen you are using a [third-party SIM card](https://docs.particle.io/faq/particle-devices/electron-3rdparty-sims/electron/) it's necessary to set the APN (\"Access Point Name\") for your cellular provider.\n\nThis is normally done in your code like this:\n\n```\nSTARTUP(cellular_credentials_set(\"fast.tmobile.com\", \"\", \"\", NULL));\n```\n\nHowever, it's also possible to set it dynamically, allowing for different SIMs with only a single firmware binary.\n\n## ICCID format\n\nFortunately, the ICCID is a formatted number that begins with the Issuer identification number:\n\n> Issuer identification number (IIN)\n\n> Maximum of seven digits:\n\n> Major industry identifier (MII), 2 fixed digits, 89 for telecommunication purposes.\n> Country code, 1–3 digits, as defined by ITU-T recommendation E.164.\n> Issuer identifier, 1–4 digits.\n\nParticle SIM cards begin with 89340765. T-Mobile SIM cards in the US begin with 8901260, and so on. You can use this to determine which APN to use based on the SIM card that is inserted.\n\n## APNHelperRK\n\nThe APNHelperRK library is in the community libraries and also [on Github](https://github.com/rickkas7/APNHelperRK).\n\nThe 1-simple-apn example should be straightforward to adapt to any application:\n\n```\n#include \"Particle.h\"\n#include \"APNHelperRK.h\"\n\n// SEMI_AUTOMATIC or MANUAL mode is required. This won't work using AUTOMATIC mode\nSYSTEM_MODE(SEMI_AUTOMATIC);\n\n// Note: Requires system firmware 0.6.0 or later!\n\n// Optional: If you include this information will be printed to debugging serial\nSerialLogHandler logHandler;\n\n// Add APNs to this table\nconst APNHelperAPN apns[1] = {\n\t// Always begins with 89, then country 01, provider 260 = T-Mobile\n\t{ \"8901260\", \"fast.t-mobile.com\" }\n\n\t// You don't need to specify the Particle SIM here. If there isn't otherwise a match, the\n\t// code will just continue and use the default settings.\n};\nAPNHelper apnHelper(apns, sizeof(apns) / sizeof(apns[0]));\n\nvoid setup() {\n\tSerial.begin(9600);\n\n\t// Optional: If you don't do this the debugging print statements will probably output before you're\n\t// able to attach the serial debugging terminal\n\t// delay(8000);\n\n\t// This must be done from setup, you can't do it from STARTUP.\n\tapnHelper.setCredentials();\n\n\t// You can't connect before you setCredentials. If the connection is lost in SEMI_AUTOMATIC mode it\n\t// will be retried automatically.\n\tParticle.connect();\n}\n\nvoid loop() {\n\n}\n\n```\n\nOf particular note:\n\n- You must use `SYSTEM_MODE(SEMI_AUTOMATIC)` or `SYSTEM_MODE(MANUAL)`.\n- System firmware 0.6.0 or later is required.\n- You can include as many APNs in the table as you want (limited by flash size).\n- Make sure you call `apnHelper.setCredentials` from `setup()`. It can't be called from `STARTUP()`. \n- Makes sure you call `apnHelper.setCredentials` before calling `Particle.connect`.\n\n\n\n",
  "allVersions": [
    "0.0.2",
    "0.0.1"
  ]
}
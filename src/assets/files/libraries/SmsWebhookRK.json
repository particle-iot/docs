{
  "type": "libraries",
  "id": "SmsWebhookRK",
  "links": {
    "download": "https://api.particle.io/v1/libraries/SmsWebhookRK/archive/0.0.2.tar.gz"
  },
  "attributes": {
    "name": "SmsWebhookRK",
    "version": "0.0.2",
    "installs": 575,
    "license": "MIT",
    "author": "Rick Kaseguma <rickkas7@rickkas7.com>",
    "sentence": "Library for Particle devices to easily send SMS via a webhook to Twilio",
    "url": "https://github.com/rickkas7/SmsWebhookRK",
    "repository": "https://github.com/rickkas7/SmsWebhookRK.git",
    "architectures": [
      "*"
    ],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "s",
  "cardUrl": "/cards/libraries/s/SmsWebhookRK",
  "versions": {
    "0.0.2": {
      "builds": {
        "2.0.1": {
          "photon": {
            "01-simple": true
          },
          "electron": {
            "01-simple": true
          },
          "argon": {
            "01-simple": true
          },
          "boron": {
            "01-simple": true
          }
        },
        "1.5.2": {
          "photon": {
            "01-simple": true
          },
          "electron": {
            "01-simple": true
          },
          "argon": {
            "01-simple": true
          },
          "boron": {
            "01-simple": true
          }
        }
      }
    }
  },
  "readme": "# SmsWebhookRK\n\n*Library for Particle devices to easily send SMS via a webhook to Twilio*\n\n- [Github repository](https://github.com/rickkas7/SmsWebhookRK)\n- [Full browsable API](https://rickkas7.github.io/SmsWebhookRK/index.html)\n- License: MIT (can be used in open or closed-source projects, including commercial projects, with no attribution required)\n- Library: SmsWebhookRK\n\n## Using the library\n\n- Add the library to your project. Using Particle Workbench, from the Command Palette **Particle: Install Library** and add **SmsWebhookRK**. It's also avaiable in the community libraries in the Web IDE.\n\n- Add the include statement to your main .ino or .cpp source file:\n\n```cpp\n#include \"SmsWebhookRK.h\"\n```\n\n- Add a call from setup():\n\n```cpp\nvoid setup() {\n    SmsWebhook::instance().setup();\n}\n```\n\n- Add a call from loop():\n\n```\nvoid loop() {\n    SmsWebhook::instance().loop();\n}\n```\n\nNote that both setup and loop calls are required! You should make the loop call on every loop; if there is nothing to do it returns quickly.\n\n- To send a SMS message you specify the recipient phone number and the message. Note that the phone number must be in +country code format, so in the United States it will always begin with `+1`.\n\n```cpp\nSmsMessage mesg;\nmesg.withRecipient(\"+12125551212\")\n    .withMessage(\"testing!\");\nSmsWebhook::instance().queueSms(msg);\n```\nThis queues the SMS message to send. If the device is online and connected to the Particle cloud, it will be sent immediately. Otherwise, it will be queued to send later. \n\nIf an error occurs and the publish fails, the message will be retried later.\n\nIf you are only sending SMS to yourself from your own devices, you can leave the recipient phone number out and instead encode it in the webhook, that way you don't need to code your phone number in your application code. \n\nThere are more options available as described in the Examples section, below.\n\n\n## Setup\n\n\n### Twilio Setup\n\nThis method could easily be updated to work with other SMS providers, however you may need to change authentication methods and the keys where the data is stored.\n\n- [Sign up for a trial Twilio account](https://www.twilio.com/try-twilio) if you don't already have an account set up.\n\n- Follow the instructions to [Buy a number](https://www.twilio.com/docs/sms/quickstart/node). Make sure it has SMS enabled!\n\n![Buy Number](images/buy-number.jpg)\n\n- In the [Twilio Dashboard](https://www.twilio.com/console) (1), note the **Account SID** (2) and **Auth Token** (3). You'll need these to create the webhook.\n\n![Twilio Dashboard](images/dashboard.png)\n\n\n### Webhook Setup\n\n- Open the [Particle Console](https://console.particle.io) and select the **Integrations** tab.\n\n- Create a new **Webhook** integration.\n\n![Basic configuration](images/webhook-1.png)\n\n- Select an **Event Name**. The default configured in the library is **SendSmsEvent** (case-sensitive!) but you can change it and use the `withEventName()` method to reconfigure the library. They must match and follow event naming rules (1 - 64 ASCII characters; only use letters, numbers, underscores, dashes and slashes. Spaces and special characters should not be used). Also note that the event name is a prefix, so any event name beginning with that string will trigger the webhook.\n\n- Enter the **URL**. Make sure you subtitute your Account SID for `$TWILIO_ACCOUNT_SID`! \n\n```\nhttps://api.twilio.com/2010-04-01/Accounts/$TWILIO_ACCOUNT_SID/Messages.json\n```\n\n- **Request Type: POST** is the default and the correct value.\n\n- **Request Format: Web Form** is the default and the correct value.\n\n- **Device: Any** is the default. You could also restrict the webhook to a specific device so only that device could send SMS messages.\n\n- Open the **Advanced Settings**.\n\n![Advanced Settings](images/webhook-2.png)\n\n- In **Form Fields** select **Custom**.\n\n  - Enter **From** (case-sensitive) and the SMS phone number you want to send from. This must be a Twilio Programmable Messaging phone number, not your actual phone number! Also note that it must be begin with `+` then country code, so it will begin with `+1` in the United States.\n  - Enter **To** and `{{{t}}}` (case-sensitive). The triple curly brackets are required. If you are only going to ever send to your own phone, you could enter your phone number here instead of `{{{t}}}` but make sure it begins with a `+`.\n  - Enter **Body** and `{{{b}}}` (case-sensitive). \n\n- **Query Parameters** should remain empty.\n\n- In **HTTP Basic Auth** enter:\n\n  - In **Username** enter your Account SID. Note that your Account SID goes in two places: the URL and the Username!\n\n  - In **Password** enter your account Auth Token.\n\n- In **HTTP Headers** the default **Content-Type** of `application/x-www-form-urlencoded` is correct.\n\n- Save the Webhook.\n\n## Examples\n\n### examples/01-simple\n\nHere's the full code for the simple example. Tapping the MODE (or SETUP) button once will send a SMS.\n\n```cpp\n#include \"SmsWebhookRK.h\"\n\nSerialLogHandler logHandler;\n\nSYSTEM_THREAD(ENABLED);\nSYSTEM_MODE(SEMI_AUTOMATIC);\n\nvoid buttonHandler(system_event_t event, int data);\n\nbool buttonPressed = false;\n\n\nvoid setup() {\n    SmsWebhook::instance().setup();\n\n    System.on(button_final_click, buttonHandler);\n    Particle.connect();\n}\n\nvoid loop() {\n    SmsWebhook::instance().loop();\n\n    if (buttonPressed) {\n        static unsigned int counter = 0;\n\n        buttonPressed = false;\n\n        SmsMessage mesg;\n        mesg.withRecipient(\"+12125551212\")\n            .withMessage(String::format(\"Message %d!\", ++counter));\n\n        Log.info(\"queued %s\", mesg.getMessage());\n\n        SmsWebhook::instance().queueSms(mesg);\n    }\n}\n\nvoid buttonHandler(system_event_t event, int data) {\n    int clicks = system_button_clicks(data);\n    if (clicks == 1) {\n        buttonPressed = true;\n    }\n}\n\n```\n\nDigging into the code:\n\nInclude the header file. Note that you must add the library as well, just adding the include is not sufficient.\n\n```\n#include \"SmsWebhookRK.h\"\n```\n\nThis is so log message can be seen by the USB serial debugging output. The library uses \"sms\" as the logging category so you can turn off the messages if desired.\n\n```\nSerialLogHandler logHandler;\n```\n\nSystem threading enabled is recommended for this library. The code can be used in both `AUTOMATIC` and `SEMI_AUTOMATIC` mode.\n\n```\nSYSTEM_THREAD(ENABLED);\nSYSTEM_MODE(SEMI_AUTOMATIC);\n```\n\nThis is a forward declaration, because we use the function in a call to `System.on()` before it's implemented in the .cpp file.\n\n```\nvoid buttonHandler(system_event_t event, int data);\n```\n\nThe button handler can be called at interrupt time, so it's best to just set a flag and handle it from loop.\n\n```\nbool buttonPressed = false;\n```\n\nYou must call the setup method for the library from global app `setup()`. The library object is a singleton, which you always get using `SmsWebhook::instance()`. You never create the object as a global or allocate it with new.\n\n```\nvoid setup() {\n    SmsWebhook::instance().setup();\n```\n\nAdd the button handler:\n\n```\n    System.on(button_final_click, buttonHandler);\n```\n\nSince we used `SYSTEM_MODE(SEMI_AUTOMATIC)` it's necessary to call `Particle.connect()` to connect to the cloud. If you use `AUTOMATIC` you don't need this.\n\n```\n    Particle.connect();\n}\n```\n\nYou must call `SmsWebhook::instance().loop()` from global application `loop()`!\n\n```\nvoid loop() {\n    SmsWebhook::instance().loop();\n```\n\nThis checks the flag set by the button handler.\n\n```\n    if (buttonPressed) {\n        static unsigned int counter = 0;\n\n        buttonPressed = false;\n```\n\nAnd this is the part that sends the SMS. \n\n- Create a `SmsMessage` object on the stack (it's small)\n- Set the recipient phone number using `withRecipient()`. Note that the phone number must be in + country code format, so in the United States it will begin with `+1`.\n- Set the text of the message using `withMessage()`. In this case, we format a message with a counter that increases each time a message is sent.\n- Logs the message to the USB serial debug\n- Queues the message to send using `SmsWebhook::instance().queueSms(mesg)`.\n\n```\n        SmsMessage mesg;\n        mesg.withRecipient(\"+12125551212\")\n            .withMessage(String::format(\"Message %d!\", ++counter));\n\n        Log.info(\"queued %s\", mesg.getMessage());\n\n        SmsWebhook::instance().queueSms(mesg);\n    }\n}\n```\n\nWhen the MODE/SETUP button is tapped once, this handles it and sets a flag to be handled from loop().\n\n```\nvoid buttonHandler(system_event_t event, int data) {\n    int clicks = system_button_clicks(data);\n    if (clicks == 1) {\n        buttonPressed = true;\n    }\n}\n```\n\n### more-examples/02-eeprom\n\nThis example uses the [CloudConfigRK](https://github.com/rickkas7/CloudConfigRK/) library to store the recipient phone number in the emulated EEPROM on the device. This allows a per-device phone number, without requiring the phone number be hardcoded in the user firmware. This is also helpful if you are creating a product, so you can have individual customer phone numbers and have one firmware binary and one webhook.\n\nThe library has many options, including:\n\n- Storing the data in retained memory, EEPROM, or a file on the Gen 3 flash file system.\n- Setting the data using a Particle function (demonstrated here), as well as published message, device notes, or a Google spreadsheet.\n\nThe code to hook the two libraries together and set the phone number with a function call (once), store it in EEPROM, then use it for any SMS notification is mostly just this:\n\n```cpp\nCloudConfig::instance()\n    .withUpdateMethod(new CloudConfigUpdateFunction(\"setConfig\"))\n    .withStorageMethod(new CloudConfigStorageEEPROM<128>(EEPROM_OFFSET))\n    .setup();\n\nSmsWebhook::instance().setup();\n\nSmsWebhook::instance()\n    .withEventName(\"SendSmsEvent\")\n    .withRecipientCallback([](String &recipient) {\n        // This function is called to find out the recipient's SMS phone number\n        // If this has not been set yet, the string will be empty and we will\n        // try again later.\n        recipient = CloudConfig::instance().getString(\"t\");\n        return (recipient.length() > 0);\n    });\n\n```\n\nTo set the phone number make a function call `setConfig` with the data \n\n```\n{\"t\":\"+12125551212\"}\n```\n\nRemember that the phone number must be in + country code format, so in the United States it will begin with `+1`.\n\nIf you want to use the Particle CLI, the command to set the phone number for the device named \"test2\" is:\n\n```\nparticle call test2 setConfig '{\"t\":\"+12125551212\"}'\n```\n\nTapping the MODE (or SETUP) button sends the SMS to the configured phone number.\n\n## Version History\n\n### 0.0.2 (2021-06-07)\n\n- Add SmsMessageDelayed class\n\n### 0.0.1 (2021-03-03)\n\n- Initial version\n",
  "allVersions": [
    "0.0.2",
    "0.0.1"
  ]
}
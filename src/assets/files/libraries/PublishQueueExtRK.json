{
  "type": "libraries",
  "id": "PublishQueueExtRK",
  "links": {
    "download": "https://api.particle.io/v1/libraries/PublishQueueExtRK/archive/0.0.10.tar.gz"
  },
  "attributes": {
    "name": "PublishQueueExtRK",
    "version": "0.0.10",
    "license": "MIT",
    "author": "Rick Kaseguma <rickkas7@rickkas7.com>",
    "sentence": "Queued publish for Particle devices using typed and extended publish",
    "url": "https://github.com/rickkas7/PublishQueueExtRK",
    "repository": "https://github.com/rickkas7/PublishQueueExtRK.git",
    "architectures": [
      "*"
    ],
    "dependencies": {
      "sequential-file-rk": "0.0.4"
    },
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "p",
  "cardUrl": "/reference/device-os/libraries/p/PublishQueueExtRK",
  "versions": {
    "0.0.1": {
      "added": "2025-03-01T11:15:44.978Z",
      "builds": {},
      "noExamples": true
    },
    "0.0.2": {
      "added": "2025-04-01T12:24:50.175Z",
      "builds": {
        "6.2.0": {
          "boron": {
            "2-test-suite": false
          },
          "bsom": {
            "2-test-suite": false
          },
          "b5som": {
            "2-test-suite": false
          },
          "tracker": {
            "2-test-suite": false
          },
          "p2": {
            "2-test-suite": false
          },
          "msom": {
            "2-test-suite": false
          }
        },
        "5.6.0": {
          "argon": {
            "2-test-suite": false
          },
          "boron": {
            "2-test-suite": false
          },
          "bsom": {
            "2-test-suite": false
          },
          "b5som": {
            "2-test-suite": false
          },
          "tracker": {
            "2-test-suite": false
          },
          "p2": {
            "2-test-suite": false
          }
        },
        "4.2.0": {
          "argon": {
            "2-test-suite": false
          },
          "boron": {
            "2-test-suite": false
          },
          "bsom": {
            "2-test-suite": false
          },
          "b5som": {
            "2-test-suite": false
          },
          "tracker": {
            "2-test-suite": false
          },
          "esomx": {
            "2-test-suite": false
          }
        },
        "2.3.0": {
          "photon": {
            "2-test-suite": false
          },
          "electron": {
            "2-test-suite": false
          }
        }
      }
    },
    "0.0.5": {
      "added": "2025-05-01T11:21:26.553Z",
      "builds": {
        "6.2.0": {
          "boron": {
            "2-test-suite": false
          },
          "bsom": {
            "2-test-suite": false
          },
          "b5som": {
            "2-test-suite": false
          },
          "tracker": {
            "2-test-suite": false
          },
          "p2": {
            "2-test-suite": false
          },
          "msom": {
            "2-test-suite": false
          }
        },
        "5.6.0": {
          "argon": {
            "2-test-suite": false
          },
          "boron": {
            "2-test-suite": false
          },
          "bsom": {
            "2-test-suite": false
          },
          "b5som": {
            "2-test-suite": false
          },
          "tracker": {
            "2-test-suite": false
          },
          "p2": {
            "2-test-suite": false
          }
        },
        "4.2.0": {
          "argon": {
            "2-test-suite": false
          },
          "boron": {
            "2-test-suite": false
          },
          "bsom": {
            "2-test-suite": false
          },
          "b5som": {
            "2-test-suite": false
          },
          "tracker": {
            "2-test-suite": false
          },
          "esomx": {
            "2-test-suite": false
          }
        },
        "2.3.0": {
          "photon": {
            "2-test-suite": false
          },
          "electron": {
            "2-test-suite": false
          }
        }
      }
    },
    "0.0.9": {
      "added": "2025-06-02T09:40:31.658Z",
      "builds": {
        "6.2.0": {
          "boron": {
            "2-test-suite": false
          },
          "bsom": {
            "2-test-suite": false
          },
          "b5som": {
            "2-test-suite": false
          },
          "tracker": {
            "2-test-suite": false
          },
          "p2": {
            "2-test-suite": false
          },
          "msom": {
            "2-test-suite": false
          }
        },
        "5.6.0": {
          "argon": {
            "2-test-suite": false
          },
          "boron": {
            "2-test-suite": false
          },
          "bsom": {
            "2-test-suite": false
          },
          "b5som": {
            "2-test-suite": false
          },
          "tracker": {
            "2-test-suite": false
          },
          "p2": {
            "2-test-suite": false
          }
        },
        "4.2.0": {
          "argon": {
            "2-test-suite": false
          },
          "boron": {
            "2-test-suite": false
          },
          "bsom": {
            "2-test-suite": false
          },
          "b5som": {
            "2-test-suite": false
          },
          "tracker": {
            "2-test-suite": false
          },
          "esomx": {
            "2-test-suite": false
          }
        },
        "2.3.0": {
          "photon": {
            "2-test-suite": false
          },
          "electron": {
            "2-test-suite": false
          }
        }
      }
    },
    "0.0.10": {
      "added": "2025-09-30T10:28:08.688Z",
      "builds": {
        "6.2.0": {
          "boron": {
            "2-test-suite": true
          },
          "bsom": {
            "2-test-suite": true
          },
          "b5som": {
            "2-test-suite": true
          },
          "tracker": {
            "2-test-suite": false
          },
          "p2": {
            "2-test-suite": true
          },
          "msom": {
            "2-test-suite": true
          }
        },
        "5.6.0": {
          "argon": {
            "2-test-suite": true
          },
          "boron": {
            "2-test-suite": true
          },
          "bsom": {
            "2-test-suite": true
          },
          "b5som": {
            "2-test-suite": true
          },
          "tracker": {
            "2-test-suite": false
          },
          "p2": {
            "2-test-suite": true
          }
        },
        "4.2.0": {
          "argon": {
            "2-test-suite": true
          },
          "boron": {
            "2-test-suite": true
          },
          "bsom": {
            "2-test-suite": true
          },
          "b5som": {
            "2-test-suite": true
          },
          "tracker": {
            "2-test-suite": false
          },
          "esomx": {
            "2-test-suite": true
          }
        },
        "2.3.0": {
          "photon": {
            "2-test-suite": false
          },
          "electron": {
            "2-test-suite": false
          }
        }
      }
    }
  },
  "readme": "# PublishQueueExtRK\n\n**Queued publish for Particle devices using typed and extended publish**\n\nThis is version of [PublishQueuePosixRK](https://github.com/rickkas7/PublishQueuePosixRK/) that is designed for\nuse with [typed and extended publish](https://docs.particle.io/reference/device-os/typed-publish/) in Device OS 6.3.0 and later.\n\nThis library can only be used Device OS 6.3.0 and later, but offers several benefits:\n\n- Increased publish rate limit, no longer limited to 1 publish per second\n- Increased event data size, up to 16384 bytes\n- Binary and structured values in event data\n\nYou can also find [full browseable API documentation](https://rickkas7.github.io/PublishQueueExtRK/index.html) at the link\nor in the docs directory of this repository.\n\n- Repository: https://github.com/rickkas7/PublishQueueExtRK\n- License: MIT\n\n\n## Usage\n\nIn many cases, you simply call this from setup:\n\n```cpp\nPublishQueueExt::instance().setup();\n```\n\nAnd this from loop:\n\n```cpp\nPublishQueueExt::instance().setup();\n```\n\nTo publish you do something like this:\n\n```\nPublishQueueExt::instance().publish(\"testEvent\", buf, PRIVATE | WITH_ACK);\n```\n\n### File queue\n\nThe default maximum file queue size is 100, which corresponds to 100 events. Each event takes is stored in \na single file. In many cases, an event will fit in a single 4096-byte flash sector, but it could require more. \nA full 16K event could take 5 sectors.\n\n```cpp\nPublishQueueExt::instance().withFileQueueSize(50);\n```\n\n## Dependencies\n\nThis library depends on an additional library:\n\n- [SequentialFileRK](https://github.com/rickkas7/SequentialFileRK) manages the queue on the flash file system\n\n\n## API\n\n---\n\n### void PublishQueueExt::setup() \n\nYou must call this from setup() to initialize this library.\n\n```\nvoid setup()\n```\n\n---\n\n### void PublishQueueExt::loop() \n\nYou must call the loop method from the global loop() function!\n\n```\nvoid loop()\n```\n---\n\n### PublishQueueExt & PublishQueueExt::withFileQueueSize(size_t size) \n\nSets the file-based queue size (default is 100)\n\n```\nPublishQueueExt & withFileQueueSize(size_t size)\n```\n\n#### Parameters\n* `size` The maximum number of files to store (one event per file)\n\nIf you exceed this number of events, the oldest event is discarded.\n\n---\n\n### size_t PublishQueueExt::getFileQueueSize() const \n\nGets the file queue size.\n\n```\nsize_t getFileQueueSize() const\n```\n\n---\n\n### PublishQueueExt & PublishQueueExt::withDirPath(const char * dirPath) \n\nSets the directory to use as the queue directory. This is required!\n\n```\nPublishQueueExt & withDirPath(const char * dirPath)\n```\n\n#### Parameters\n* `dirPath` the pathname, Unix-style with / as the directory separator.\n\nTypically you create your queue either at the top level (\"/myqueue\") or in /usr (\"/usr/myqueue\"). The directory will be created if necessary, however only one level of directory will be created. The parent must already exist.\n\nThe dirPath can end with a slash or not, but if you include it, it will be removed.\n\nYou must call this as you cannot use the root directory as a queue!\n\n---\n\n### const char * PublishQueueExt::getDirPath() const \n\nGets the directory path set using withDirPath()\n\n```\nconst char * getDirPath() const\n```\n\nThe returned path will not end with a slash.\n\n---\n\n### bool PublishQueueExt::publish(CloudEvent event) \n\nThis is the recommended version to use, which takes a `CloudEvent` that includes the event name and \ncan include typed data, binary data, or structured data.\n\n```\nbool publish(CloudEvent event);\n```\n\n---\n\n### bool PublishQueueExt::publish(const char * eventName, const Variant &data, ContentType type) \n\nYou can also `Variant` that can include typed data, binary data, or structured data.\n\n```\nbool publish(const char *eventName, const Variant &data);\n```\n\n#### Parameters\n* `eventName` The name of the event (63 character maximum).\n\n* `data` The event data as a `Variant` object reference.\n\n* `type` The `ContentType` of the data\n\nThe data is written to a file on the file system before this call returns.\n\n```\nContent Type Constant    MIME Type\t                Value\nContentType::TEXT        text/plain; charset=utf-8  0\nContentType::JPEG        image/jpeg                 22\nContentType::PNG         image/png                  23\nContentType::BINARY      application/octet-stream   42\nContentType::STRUCTURED                             65001\n```\n\n### bool PublishQueueExt::publish(const char * eventName, const Variant &data) \n\nThis overload takes a `Variant` but not a `ContentType`. It should only be used when passing\na `VariantMap` for structured data.\n\n```\nbool publish(const char *eventName, const Variant &data);\n```\n\n#### Parameters\n* `eventName` The name of the event (63 character maximum).\n\n* `data` The event data as a `Variant` object reference.\n\nThe data is written to a file on the file system before this call returns.\n\n---\n\n### bool PublishQueueExt::publish(const char * eventName) \n\nOverload for publishing an event.\n\n```\nbool publish(const char * eventName)\n```\n\n#### Parameters\n* `eventName` The name of the event (63 character maximum).\n\n\n#### Returns\ntrue if the event was queued or false if it was not.\n\nThis function almost always returns true. If you queue more events than fit in the buffer the oldest (sometimes second oldest) is discarded.\n\n---\n\n### bool PublishQueueExt::publish(const char * eventName, const char * data) \n\nOverload for publishing an event.\n\n```\nbool publish(const char * eventName, const char * data)\n```\n\n#### Parameters\n* `eventName` The name of the event (63 character maximum).\n\n* `data` The event data as UTF-8 text. Up to 1024 bytes depending on the Device OS version and device.\n\n#### Returns\ntrue if the event was queued or false if it was not.\n\nFor larger data and typed data, use the overload that takes a `CloudEvent` or `Variant`.\n\nThis function almost always returns true. If you queue more events than fit in the buffer the oldest (sometimes second oldest) is discarded.\n\n---\n\n### void PublishQueueExt::clearQueues() \n\nEmpty both the RAM and file based queues. Any queued events are discarded.\n\n```\nvoid clearQueues()\n```\n\n---\n\n### void PublishQueueExt::setPausePublishing(bool value) \n\nPause or resume publishing events.\n\n```\nvoid setPausePublishing(bool value)\n```\n\n#### Parameters\n* `value` The value to set, true = pause, false = normal operation\n\nIf called while a publish is in progress, that publish will still proceed, but the next event (if any) will not be attempted.\n\nThis is used by the automated test tool; you probably won't need to manually manage this under normal circumstances.\n\n---\n\n### bool PublishQueueExt::getPausePublishing() const \n\nGets the state of the pause publishing flag.\n\n```\nbool getPausePublishing() const\n```\n---\n\n### bool PublishQueueExt::getCanSleep() const \n\nDetermine if it's a good time to go to sleep. \n\n```\nbool getCanSleep() const\n```\n\nIf a publish is not in progress and the queue is empty, returns true.\n\nIf pausePublishing is true, then return true if either the current publish has completed, or not cloud connected.\n\n---\n\n### size_t PublishQueueExt::getNumEvents() \n\nGets the total number of events queued.\n\n```\nsize_t getNumEvents()\n```\n\nThis is the number of events in the RAM-based queue and the file-based queue. This operation is fast; the file queue length is stored in RAM, so this command does not need to access the file system.\n\nIf an event is currently being sent, the result includes this event.\n\n---\n\n### void PublishQueueExt::lock() \n\nLock the queue protection mutex.\n\n```\nvoid lock()\n```\n\nThis is done internally; you probably won't need to call this yourself. It needs to be public for the WITH_LOCK() macro to work properly.\n\n---\n\n### bool PublishQueueExt::tryLock() \n\nAttempt the queue protection mutex.\n\n```\nbool tryLock()\n```\n\n---\n\n### void PublishQueueExt::unlock() \n\nUnlock the queue protection mutex.\n\n```\nvoid unlock()\n```\n\n## Version History\n\n### 0.0.10 (2025-09-29)\n\n- Updated to SequentialFileRK 0.0.4 to fix an issue that could cause file system corruption.\n\n### 0.0.9 (2205-05-22)\n\n- Added a limit to the number of files to remove from the queue on checkQueueLimits\n\n### 0.0.8 (2025-05-20)\n\n- Removed unnecessary lock that could cause deadlock.\n\n### 0.0.7 (2025-05-12)\n\n- Fixed bug when you have no event data.\n- Fixed a bug when non-structured, non-variant events could have garbage data at the end of the event data.\n\n### 0.0.6 (2025-05-09)\n\n- Corrected sector size (is 4096 bytes not 512).\n\n### 0.0.5 (2025-04-11)\n\n- Added support for withPublishCompleteUserCallback(). It was not previously implemented, though the call to set it\nwas left over from PublishQueuePosixRK. The new prototype only has a CloudEvent object you can use the determine\nsuccess or failure, the event name, or the event data.\n\n### 0.0.4 (2025-04-08)\n\n- Fixed a bug where queue cleanup did not work properly and could also leave corrupted files in the queue if you exceeded the file queue size.\n\n### 0.0.3 (2025-04-07)\n\n- Fixed a bug where if a queued file failed to publish (such as because of a connectivity issue), the file in the queue would be corrupted and would be discarded instead of retransmitted later.\n\n### 0.0.2 (2025-03-24)\n\n- Moved 2-test-suite.cpp into the example directory. It as accidentally in the src directory.\n\n### 0.0.1 (2025-02-19)\n\n- Initial version\n",
  "allVersions": [
    "0.0.10",
    "0.0.9",
    "0.0.8",
    "0.0.7",
    "0.0.6",
    "0.0.5",
    "0.0.4",
    "0.0.3",
    "0.0.2",
    "0.0.1"
  ]
}
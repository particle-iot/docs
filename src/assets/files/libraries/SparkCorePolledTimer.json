{
  "type": "libraries",
  "id": "SparkCorePolledTimer",
  "links": {
    "download": "https://api.particle.io/v1/libraries/SparkCorePolledTimer/archive/1.0.0.tar.gz"
  },
  "attributes": {
    "name": "SparkCorePolledTimer",
    "version": "1.0.0",
    "installs": 24273,
    "license": "Open",
    "author": "David Fowler <david.fowler@gmail.com>",
    "sentence": "Simple Timer Library for the Spark Core which enables time based events.",
    "url": "https://github.com/dfowler7437/sparkcorepolledtimer",
    "repository": "https://github.com/dfowler7437/sparkcorepolledtimer.git",
    "architectures": [],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "s",
  "cardUrl": "/cards/libraries/s/SparkCorePolledTimer",
  "versions": {
    "1.0.0": {
      "builds": {
        "2.0.1": {
          "photon": {
            "PolledTimerExample": true
          },
          "electron": {
            "PolledTimerExample": true
          },
          "argon": {
            "PolledTimerExample": true
          },
          "boron": {
            "PolledTimerExample": true
          }
        },
        "1.5.2": {
          "photon": {
            "PolledTimerExample": true
          },
          "electron": {
            "PolledTimerExample": true
          },
          "argon": {
            "PolledTimerExample": true
          },
          "boron": {
            "PolledTimerExample": true
          }
        }
      }
    }
  },
  "readme": "SparkCorePolledTimer\n====================\nSimple Timer Library for the Spark Core. Lets you do time based events.\nThis library is open I only ask that you let me know of any improvements \nand that you drop me an emial about your project. I may link back to it \nfrom my blog...\nDavid Fowler AKA uCHobby - david.fowler@gmail.com - http://www.uchobby.com\n\nEample Usage\n\nPolledTimer updateTimer(1000);  //Create a timer object and set it's timeout in milliseconds\nvoid OnTimer(void);   //Prototype for timer callback method\n\nsetup(){  //Standard setup function...\n    updateTimer.SetCallback(OnTimer);  //Tell the time about the handler function.\n}\n  \nloop(){  //Standard loop function...\n    updateTimer.Update();  //Must call this often in your loop. It will call the\n                           //handler method automatically when it's time too\n}\n\nvoid OnTimer(void) {  //Handler for the timer, will be called automatically\n     //do your time based stuff here...\n}\n",
  "allVersions": [
    "1.0.0"
  ]
}
{
  "type": "libraries",
  "id": "ReclaimerLabs_ADS1118",
  "links": {
    "download": "https://api.particle.io/v1/libraries/ReclaimerLabs_ADS1118/archive/0.9.6.tar.gz"
  },
  "attributes": {
    "name": "ReclaimerLabs_ADS1118",
    "version": "0.9.6",
    "installs": 391,
    "license": "MIT",
    "author": "Jason Cerundolo",
    "maintainer": "Jason Cerundolo",
    "sentence": "Library for the ADS1118 ADC",
    "paragraph": "",
    "category": "Sensors",
    "url": "https://github.com/ReclaimerLabs/ReclaimerLabs_ADS1118",
    "repository": "ReclaimerLabs/ReclaimerLabs_ADS1118",
    "architectures": [],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "r",
  "cardUrl": "/cards/libraries/r/ReclaimerLabs_ADS1118",
  "versions": {
    "0.9.6": {
      "builds": {
        "2.0.1": {
          "photon": {
            "thermocouple_monitor": true
          },
          "electron": {
            "thermocouple_monitor": true
          },
          "argon": {
            "thermocouple_monitor": true
          },
          "boron": {
            "thermocouple_monitor": true
          }
        },
        "1.5.2": {
          "photon": {
            "thermocouple_monitor": true
          },
          "electron": {
            "thermocouple_monitor": true
          },
          "argon": {
            "thermocouple_monitor": true
          },
          "boron": {
            "thermocouple_monitor": true
          }
        }
      }
    }
  },
  "readme": "# Introduction\r\n\r\nThe [**ADS1118**](http://www.ti.com/product/ADS1118) is a small, low power, 16-bit ADC with a built-in temperature sensor. It is ideally suited for measuring thermocouples with cold junction compensation. \r\n\r\nAlso check out the [**Reclaimer Labs Thermocouple library**](https://github.com/ReclaimerLabs/ReclaimerLabs_Thermocouple) and the [**Remote Thermal Monitor board**](https://github.com/ReclaimerLabs/Remote-Thermal-Monitor). \r\n\r\n# Example Usage\r\n\r\nUsually, you will want to use the readADC_Diff_0_1_mV() and readADC_Diff_2_3_mV() functions with the readTemp_C() function. This provides everything you need to accurately measure temperature with a thermocouple. \r\n\r\n```\r\nconst uint16_t pin_CS0 = A2;\r\nReclaimerLabs_ADS1118 therm01(pin_CS0);\r\n\r\nvoid setup() {\r\n    // set chip select pins high\r\n    pinMode(pin_CS0, OUTPUT);\r\n    digitalWrite(pin_CS0, HIGH);\r\n    \r\n    therm01.setGain(GAIN_SIXTEEN);\r\n}\r\n\r\nvoid loop() {\r\n\tfloat temp_mV, tempRef_C, temp_C;\r\n\tint32 error_code;\r\n\ttemp_mV = therm01.readADC_Diff_0_1_mV();\r\n    error_code = ReclaimerLabs_Thermocouple::calc_temp(TYPE_K, temp_mV, tempRef_C, &temp_C);\r\n}\r\n```\r\n# Other functions\r\n\r\n### uint16_t readADC_SingleEnded(uint8_t channel);\r\n\r\nTakes in a channel number (0 to 3) and returns a 16-bit ADC reading referencing GND and VDD as full-scale. \r\n\r\n### int16_t readADC_Differential_0_1(void);\r\n\r\nReturns the raw 16-bit ADC value of the differential voltage of channel 0 minus 1. \r\n\r\n### int16_t readADC_Differential_2_3(void);\r\n\r\nReturns the raw 16-bit ADC value of the differential voltage of channel 2 minus 3. \r\n\r\n### int16_t readTemp_Raw(void);\r\n\r\nReturns the raw 14-bit ADC value of the on-chip temperature sensor. Negative numbers use twos complement. One 14-bit LSB equals 0.03125 degrees C. \r\n\r\n### void setGain(adsGain_t gain);\r\n\r\nsetGain() and getGain() use the enum adsGain_t. \r\n* GAIN_TWOTHIRDS, full-scale = 6.144 V\r\n* GAIN_ONE, full-scale = 4.096 V\r\n* GAIN_TWO, full-scale = 2.048 V\r\n* GAIN_FOUR, full-scale = 1.024 V\r\n* GAIN_EIGHT, full-scale = 0.512 V\r\n* GAIN_SIXTEEN, full-scale = 0.256 V\r\n\r\n# Questions and Comments\r\n\r\nIf you have questions or comments, you can email me directly at jason@reclaimerlabs.com. \r\n",
  "allVersions": [
    "0.9.6",
    "0.9.4",
    "0.9.3",
    "0.9.2",
    "0.9.1"
  ]
}
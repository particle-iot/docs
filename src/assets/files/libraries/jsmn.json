{
  "type": "libraries",
  "id": "jsmn",
  "links": {
    "download": "https://api.particle.io/v1/libraries/jsmn/archive/1.0.1.tar.gz"
  },
  "attributes": {
    "name": "jsmn",
    "version": "1.0.1",
    "installs": 423,
    "license": "MIT",
    "author": "zserge",
    "sentence": "Minimalistic JSON parser in C",
    "url": "http://zserge.com/jsmn.html",
    "repository": "https://github.com/zserge/jsmn/tree/master",
    "architectures": [
      "particle-photon"
    ],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "j",
  "cardUrl": "/cards/libraries/j/jsmn",
  "versions": {
    "1.0.1": {
      "builds": {},
      "noExamples": true,
      "added": "2022-06-17T10:16:54.060Z"
    }
  },
  "readme": "\nJSMN\n====\n\njsmn (pronounced like 'jasmine') is a minimalistic JSON parser in C.  It can be\neasily integrated into resource-limited or embedded projects.\n\nYou can find more information about JSON format at [json.org][1]\n\nLibrary sources are available at https://github.com/zserge/jsmn\n\nThe web page with some information about jsmn can be found at\n[http://zserge.com/jsmn.html][2]\n\nPhilosophy\n----------\n\nMost JSON parsers offer you a bunch of functions to load JSON data, parse it\nand extract any value by its name. jsmn proves that checking the correctness of\nevery JSON packet or allocating temporary objects to store parsed JSON fields\noften is an overkill. \n\nJSON format itself is extremely simple, so why should we complicate it?\n\njsmn is designed to be\t**robust** (it should work fine even with erroneous\ndata), **fast** (it should parse data on the fly), **portable** (no superfluous\ndependencies or non-standard C extensions). And of course, **simplicity** is a\nkey feature - simple code style, simple algorithm, simple integration into\nother projects.\n\nFeatures\n--------\n\n* compatible with C89\n* no dependencies (even libc!)\n* highly portable (tested on x86/amd64, ARM, AVR)\n* about 200 lines of code\n* extremely small code footprint\n* API contains only 2 functions\n* no dynamic memory allocation\n* incremental single-pass parsing\n* library code is covered with unit-tests\n\nDesign\n------\n\nThe rudimentary jsmn object is a **token**. Let's consider a JSON string:\n\n\t'{ \"name\" : \"Jack\", \"age\" : 27 }'\n\nIt holds the following tokens:\n\n* Object: `{ \"name\" : \"Jack\", \"age\" : 27}` (the whole object)\n* Strings: `\"name\"`, `\"Jack\"`, `\"age\"` (keys and some values)\n* Number: `27`\n\nIn jsmn, tokens do not hold any data, but point to token boundaries in JSON\nstring instead. In the example above jsmn will create tokens like: Object\n[0..31], String [3..7], String [12..16], String [20..23], Number [27..29].\n\nEvery jsmn token has a type, which indicates the type of corresponding JSON\ntoken. jsmn supports the following token types:\n\n* Object - a container of key-value pairs, e.g.:\n\t`{ \"foo\":\"bar\", \"x\":0.3 }`\n* Array - a sequence of values, e.g.:\n\t`[ 1, 2, 3 ]`\n* String - a quoted sequence of chars, e.g.: `\"foo\"`\n* Primitive - a number, a boolean (`true`, `false`) or `null`\n\nBesides start/end positions, jsmn tokens for complex types (like arrays\nor objects) also contain a number of child items, so you can easily follow\nobject hierarchy.\n\nThis approach provides enough information for parsing any JSON data and makes\nit possible to use zero-copy techniques.\n\nInstall\n-------\n\nTo clone the repository you should have Git installed. Just run:\n\n\t$ git clone https://github.com/zserge/jsmn\n\nRepository layout is simple: jsmn.c and jsmn.h are library files, tests are in\nthe jsmn\\_test.c, you will also find README, LICENSE and Makefile files inside.\n\nTo build the library, run `make`. It is also recommended to run `make test`.\nLet me know, if some tests fail.\n\nIf build was successful, you should get a `libjsmn.a` library.\nThe header file you should include is called `\"jsmn.h\"`.\n\nAPI\n---\n\nToken types are described by `jsmntype_t`:\n\n\ttypedef enum {\n\t\tJSMN_UNDEFINED = 0,\n\t\tJSMN_OBJECT = 1,\n\t\tJSMN_ARRAY = 2,\n\t\tJSMN_STRING = 3,\n\t\tJSMN_PRIMITIVE = 4\n\t} jsmntype_t;\n\n**Note:** Unlike JSON data types, primitive tokens are not divided into\nnumbers, booleans and null, because one can easily tell the type using the\nfirst character:\n\n* <code>'t', 'f'</code> - boolean \n* <code>'n'</code> - null\n* <code>'-', '0'..'9'</code> - number\n\nToken is an object of `jsmntok_t` type:\n\n\ttypedef struct {\n\t\tjsmntype_t type; // Token type\n\t\tint start;       // Token start position\n\t\tint end;         // Token end position\n\t\tint size;        // Number of child (nested) tokens\n\t} jsmntok_t;\n\n**Note:** string tokens point to the first character after\nthe opening quote and the previous symbol before final quote. This was made \nto simplify string extraction from JSON data.\n\nAll job is done by `jsmn_parser` object. You can initialize a new parser using:\n\n\tjsmn_parser parser;\n\tjsmntok_t tokens[10];\n\n\tjsmn_init(&parser);\n\n\t// js - pointer to JSON string\n\t// tokens - an array of tokens available\n\t// 10 - number of tokens available\n\tjsmn_parse(&parser, js, strlen(js), tokens, 10);\n\nThis will create a parser, and then it tries to parse up to 10 JSON tokens from\nthe `js` string.\n\nA non-negative return value of `jsmn_parse` is the number of tokens actually\nused by the parser.\nPassing NULL instead of the tokens array would not store parsing results, but\ninstead the function will return the value of tokens needed to parse the given\nstring. This can be useful if you don't know yet how many tokens to allocate.\n\nIf something goes wrong, you will get an error. Error will be one of these:\n\n* `JSMN_ERROR_INVAL` - bad token, JSON string is corrupted\n* `JSMN_ERROR_NOMEM` - not enough tokens, JSON string is too large\n* `JSMN_ERROR_PART` - JSON string is too short, expecting more JSON data\n\nIf you get `JSON_ERROR_NOMEM`, you can re-allocate more tokens and call\n`jsmn_parse` once more.  If you read json data from the stream, you can\nperiodically call `jsmn_parse` and check if return value is `JSON_ERROR_PART`.\nYou will get this error until you reach the end of JSON data.\n\nOther info\n----------\n\nThis software is distributed under [MIT license](http://www.opensource.org/licenses/mit-license.php),\n so feel free to integrate it in your commercial products.\n\n[1]: http://www.json.org/\n[2]: http://zserge.com/jsmn.html\n",
  "allVersions": [
    "1.0.1",
    "1.0.0"
  ]
}
{
  "type": "libraries",
  "id": "NFC_UICR_RK",
  "links": {
    "download": "https://api.particle.io/v1/libraries/NFC_UICR_RK/archive/0.0.1.tar.gz"
  },
  "attributes": {
    "name": "NFC_UICR_RK",
    "version": "0.0.1",
    "license": "MIT",
    "author": "Rick Kaseguma <rickkas7@rickkas7.com>",
    "sentence": "Library for manipulating the NFC settings in the UICR bytes on nRF52840 (Gen 3) devices.",
    "url": "https://github.com/rickkas7/NFC_UICR_RK",
    "repository": "https://github.com/rickkas7/NFC_UICR_RK.git",
    "architectures": [
      "*"
    ],
    "visibility": "public",
    "mine": false
  },
  "kind": "community library",
  "letter": "n",
  "cardUrl": "/reference/device-os/libraries/n/NFC_UICR_RK",
  "versions": {
    "0.0.1": {
      "added": "2025-05-01T11:23:02.763Z",
      "builds": {
        "6.2.0": {
          "boron": {
            "01-simple": true,
            "02-show-state": true
          },
          "bsom": {
            "01-simple": true,
            "02-show-state": true
          },
          "b5som": {
            "01-simple": true,
            "02-show-state": true
          },
          "tracker": {
            "01-simple": true,
            "02-show-state": true
          },
          "p2": {
            "01-simple": true,
            "02-show-state": true
          },
          "msom": {
            "01-simple": true,
            "02-show-state": true
          }
        },
        "5.6.0": {
          "argon": {
            "01-simple": true,
            "02-show-state": true
          },
          "boron": {
            "01-simple": true,
            "02-show-state": true
          },
          "bsom": {
            "01-simple": true,
            "02-show-state": true
          },
          "b5som": {
            "01-simple": true,
            "02-show-state": true
          },
          "tracker": {
            "01-simple": true,
            "02-show-state": true
          },
          "p2": {
            "01-simple": true,
            "02-show-state": true
          }
        },
        "4.2.0": {
          "argon": {
            "01-simple": true,
            "02-show-state": true
          },
          "boron": {
            "01-simple": true,
            "02-show-state": true
          },
          "bsom": {
            "01-simple": true,
            "02-show-state": true
          },
          "b5som": {
            "01-simple": true,
            "02-show-state": true
          },
          "tracker": {
            "01-simple": true,
            "02-show-state": true
          },
          "esomx": {
            "01-simple": true,
            "02-show-state": true
          }
        },
        "2.3.0": {
          "photon": {
            "01-simple": true,
            "02-show-state": true
          },
          "electron": {
            "01-simple": true,
            "02-show-state": true
          }
        }
      }
    }
  },
  "readme": "# NFC_UICR_RK\n\n*Library for manipulating the NFC settings in the UICR bytes on nRF52840 (Gen 3) devices.*\n\nParticle Gen 3 devices (nRF52840 MCU) have the capability of supporting NFC tag mode.\n\n| Device      | Platform        | NFC Enabled | NFC Disabled |\n| :---------- | :-------------- | :---------: | :----------: |\n| Argon       | `argon`         | x           |              |\n| Boron       | `boron`         | x           |              |\n| B-SoM       | `bsom`, `b5som` | x           |              |\n| E404X       | `esomx`         |             | x            |\n| Electron 2  | `electron2`     | x           |              |\n| Monitor One | `tracker`       |             | x            |\n| Tracker One | `tracker`       | x           |              |\n\nThe two devices that have NFC disabled from the factory (E-SoM and Monitor One) have it disabled because the pins are needed for additional GPIO. \n\nYou also have the ability to do this on devices that have it enabled from the factory. Reusing NFC pins as GPIO really only makes sense on the B-SoM because the NFC pins are included on M.2 connector. On the Argon, Boron, and Electron 2 the NFC pins are only available on a U.FL connector. \n\n- Github: https://github.com/rickkas7/NFC_UICR_RK\n- License: MIT\n- Full browsable API documentation available [here](https://rickkas7.github.io/NFC_UICR_RK/index.html) as well as in the docs directory \n\n## Why is this process needed?\n\nThere's a diode that kicks in when the voltage differential between NFC1 and NFC2 is greater than 2.0V. This is designed to protect the MCU from induced voltage from the NFC coils, but obviously would have bad side effects if using as GPIO.\n\nThis protection diode can be disabled by setting a register in the the UICR bytes (nRF52 configuration data). These are  persistent and will not be reset by flashing application firmware, Device OS, bootloader, or SoftDevice.\n\nNormally you would change the UICR bytes using a SWD/JTAG programmer, but you can also do it from application firmware. One important caveat is that the MCU must be reset after updating the UICR bytes.\n\nYou can only set the UICR byte bits from 1 to 0 in application firmware or by SWD! In order to \nset a 0 value (NFC disabled) back to 1 (NFC enabled), you need to chip erase the device which reset the UICR back to 1 values. It will also erase the bootloader, soft devies, Device OS, and application firmware, and other UICR settings.\n\nDevice Restore USB does not affect the UICR bytes.\n\nThe Device Restore JTAG .hex files for platforms other than Tracker include the default UICR bytes.\n\n## Using SWD/JTAG\n\n### SWD programming using hex files\n\nIncluded in this Github is the file `uicr_nfc_disable.hex`\n\nYou can flash this using a SWD/JTAG programmer to update the settings. Reset the device after updating.\n\nIf you are using a CMSIS/DAP debugger you should be able to drag and drop `uicr_nfc_disable.hex` on the debugger DAPLINK volume.\n\nIf you are using the Segger J/LINK with nrfjprog you might use a command like:\n\n```\nnfrjprog -f NRF52 --program uicr_nfc_disable.hex\n```\n\n### Restoring UICR bytes\n\nTo restore the UICR bytes:\n\n```\nnfrjprog -f NRF52 --program uicr.hex --chiperase\nnfrjprog -f NRF52 --program device-restore.hex\n```\n\nYou cannot restore UICR bytes with a CMSIS/DAP debugger drag-and-drop. \n\nThe OpenOCD `nrf5 mass_erase` option can be used, along with the the device restore JTAG .hex file.\n\n### SWD programming manually\n\nThe NFC function is at offset 0x20C. The default value is enabled (0xffffffff) and to disable NFC, set bit 0 to 0, so 0xfffffffe. There's more information in the [Nordic UICR documentation](https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.nrf52832.ps.v1.1%2Fuicr.html). \n\nThe offset is relative to the UICR base address 0x10001000, but the exact way to set it depends on which tool you are using. \n\nYou cannot set single UICR bits back to 1; you must chip erase and flash the entire device image to restore NFC mode.\n\n## Using this library\n\nIf you cannot use SWD to programmer during your device setup and initial programming, it is possible to do it from user firmware. This could be from the actual user firmware you will be using, or a setup or test firmware build.\n\nOne important caveat: The device must be reset after updating the UICR bytes. This is very fast and can be done from software so it doesn't require user intervention, but it does need to occur.\n\nFor example, you might include this in your firmware:\n\n```cpp\n#include \"NFC_UICR_RK.h\"\n\nSYSTEM_MODE(SEMI_AUTOMATIC);\n\n// System thread defaults to on in 6.2.0 and later and this line is not required\n#ifndef SYSTEM_VERSION_v620\nSYSTEM_THREAD(ENABLED);\n#endif\n\nSerialLogHandler logHandler(LOG_LEVEL_INFO);\n\nvoid setup() {\n    // Checks the NFC status in the UICR bytes and disables it if enabled.\n    // You should use this with SYSTEM_THREAD(ENABLED) and SEMI_AUTOMATIC mode so the device\n    // won't attempt to connect to the cloud before doing this!\n    NFC_UICR_RK::disableNFC();\n\n    // Can be any time after disableNFC() returns\n    Particle.connect();\n}\n\nvoid loop() {\n\n}\n```\n\nOf note:\n\n- Be sure you use `SYSTEM_MODE(SEMI_AUTOMATIC)` so the device will not attempt to connect to the cloud before checking the UICR bytes.\n- `SYSTEM_THREAD(ENABLED)` is always recommended in all firmware.\n- Add a call to `NFC_UICR_RK::disableNFC()` at the beginning of `setup()`.\n- Do not enable BLE before updating the UICR bytes.\n- It's safe to call `Particle.connect()` and time after checking the UICR bytes.\n\nIf the UICR bytes indicate that NFC is already disabled, the function returns immediately.\n\nIf the UICR bytes need updating, they will be updated and the device reset, so the lines after `NFC_UICR_RK::disableNFC()` will not be executed until after reset.\n\nOne potential issue is that if the updating failed, the device would enter a rolling reboot and would never fully boot. This is unlikely, but cannot be ruled out as a remote possibility. Once the UICR bytes are set once, this should never be an issue.\n\nNote that you cannot turn NFC back on without chip erasing the device using a SWD/JTAG programmer, so make sure you don't turn it off if you may need to use it again and you don't have the appropriate SWD/JTAG programming hardware!\n\n## Release history\n\n### 0.0.1 (2025-04-28)\n\n- Initial version\n",
  "allVersions": [
    "0.0.1"
  ]
}
{
  "items": [
    {
      "title": "Introduction",
      "dir": "introduction",
      "collapse": true,
      "subsections": [
        {
          "title": "Getting started - Introduction",
          "dir": "introduction",
          "file": "getting-started"
        },
        {
          "title": "Navigation - Introduction",
          "dir": "introduction",
          "file": "navigation"
        }
      ]
    },
    {
      "title": "Asset OTA",
      "dir": "asset-ota",
      "collapse": true,
      "subsections": [
        {
          "title": "Asset OTA",
          "dir": "asset-ota",
          "file": "asset-ota"
        },
        {
          "title": "ApplicationAsset - Asset OTA",
          "dir": "asset-ota",
          "file": "applicationasset",
          "subsections": [
            {
              "anchor": "name-applicationasset",
              "title": "name() - ApplicationAsset"
            },
            {
              "anchor": "hash-applicationasset",
              "title": "hash() - ApplicationAsset"
            },
            {
              "anchor": "size-applicationasset",
              "title": "size() - ApplicationAsset"
            },
            {
              "anchor": "storagesize-applicationasset",
              "title": "storageSize() - ApplicationAsset"
            },
            {
              "anchor": "isvalid-applicationasset",
              "title": "isValid() - ApplicationAsset"
            },
            {
              "anchor": "isreadable-applicationasset",
              "title": "isReadable() - ApplicationAsset"
            },
            {
              "anchor": "available-applicationasset",
              "title": "available() - ApplicationAsset"
            },
            {
              "anchor": "read-applicationasset",
              "title": "read() - ApplicationAsset"
            },
            {
              "anchor": "peek-applicationasset",
              "title": "peek() - ApplicationAsset"
            },
            {
              "anchor": "skip-applicationasset",
              "title": "skip() - ApplicationAsset"
            },
            {
              "anchor": "reset-applicationasset",
              "title": "reset() - ApplicationAsset"
            }
          ]
        },
        {
          "title": "AssetHash - Asset OTA",
          "dir": "asset-ota",
          "file": "assethash",
          "subsections": [
            {
              "anchor": "constructor-assethash",
              "title": "Constructor - AssetHash"
            },
            {
              "anchor": "type-assethash",
              "title": "type() - AssetHash"
            },
            {
              "anchor": "hash-assethash",
              "title": "hash() - AssetHash"
            },
            {
              "anchor": "isvalid-assethash",
              "title": "isValid() - AssetHash"
            },
            {
              "anchor": "tostring-assethash",
              "title": "toString() - AssetHash"
            },
            {
              "anchor": "operator-assethash",
              "title": "operator==() - AssetHash"
            },
            {
              "anchor": "operator-assethash",
              "title": "operator!=() - AssetHash"
            }
          ]
        }
      ]
    },
    {
      "title": "Battery voltage",
      "dir": "battery-voltage",
      "collapse": true,
      "subsections": [
        {
          "title": "Battery Voltage - Photon 2 - Battery voltage",
          "dir": "battery-voltage",
          "file": "battery-voltage-photon-2"
        },
        {
          "title": "Battery Voltage - Argon - Battery voltage",
          "dir": "battery-voltage",
          "file": "battery-voltage-argon"
        }
      ]
    },
    {
      "title": "Bluetooth LE (BLE)",
      "dir": "bluetooth-le-ble",
      "collapse": true,
      "subsections": [
        {
          "title": "Bluetooth LE (BLE)",
          "dir": "bluetooth-le-ble",
          "file": "bluetooth-le-ble"
        },
        {
          "title": "BLE Class - Bluetooth LE (BLE)",
          "dir": "bluetooth-le-ble",
          "file": "ble-class",
          "subsections": [
            {
              "anchor": "ble-advertise-",
              "title": "BLE.advertise()"
            },
            {
              "anchor": "ble-advertise-ibeacon-",
              "title": "BLE.advertise(iBeacon)"
            },
            {
              "anchor": "ble-advertise-",
              "title": "BLE.advertise()"
            },
            {
              "anchor": "ble-stopadvertising-",
              "title": "BLE.stopAdvertising()"
            },
            {
              "anchor": "ble-advertising-",
              "title": "BLE.advertising()"
            },
            {
              "anchor": "ble-getadvertisingdata-",
              "title": "BLE.getAdvertisingData()"
            },
            {
              "anchor": "ble-setadvertisingdata-",
              "title": "BLE.setAdvertisingData()"
            },
            {
              "anchor": "ble-setadvertisinginterval-",
              "title": "BLE.setAdvertisingInterval()"
            },
            {
              "anchor": "ble-setadvertisingtimeout-",
              "title": "BLE.setAdvertisingTimeout()"
            },
            {
              "anchor": "ble-setadvertisingtype-",
              "title": "BLE.setAdvertisingType()"
            },
            {
              "anchor": "ble-getadvertisingparameters-",
              "title": "BLE.getAdvertisingParameters()"
            },
            {
              "anchor": "ble-setadvertisingparameters-",
              "title": "BLE.setAdvertisingParameters()"
            },
            {
              "anchor": "ble-setadvertisingparameters-bleadvertisingparams-",
              "title": "BLE.setAdvertisingParameters(BleAdvertisingParams)"
            },
            {
              "anchor": "ble-setadvertisingphy-",
              "title": "BLE.setAdvertisingPhy()"
            },
            {
              "anchor": "ble-getscanresponsedata-",
              "title": "BLE.getScanResponseData()"
            },
            {
              "anchor": "ble-setscanresponsedata-",
              "title": "BLE.setScanResponseData()"
            },
            {
              "anchor": "ble-addcharacteristic-characteristic-",
              "title": "BLE.addCharacteristic(characteristic)"
            },
            {
              "anchor": "ble-addcharacteristic-parameters-",
              "title": "BLE.addCharacteristic(parameters)"
            },
            {
              "anchor": "ble-scan-array-",
              "title": "BLE.scan(array)"
            },
            {
              "anchor": "ble-scan-vector-",
              "title": "BLE.scan(Vector)"
            },
            {
              "anchor": "ble-scan-callback-",
              "title": "BLE.scan(callback)"
            },
            {
              "anchor": "ble-scanwithfilter-",
              "title": "BLE.scanWithFilter()"
            },
            {
              "anchor": "ble-stopscanning-",
              "title": "BLE.stopScanning()"
            },
            {
              "anchor": "ble-setscantimeout-",
              "title": "BLE.setScanTimeout()"
            },
            {
              "anchor": "ble-getscanparameters-",
              "title": "BLE.getScanParameters()"
            },
            {
              "anchor": "ble-setscanparameters-",
              "title": "BLE.setScanParameters()"
            },
            {
              "anchor": "ble-setscanphy-",
              "title": "BLE.setScanPhy()"
            },
            {
              "anchor": "ble-connect-",
              "title": "BLE.connect()"
            },
            {
              "anchor": "ble-connect-options-",
              "title": "BLE.connect(options)"
            },
            {
              "anchor": "ble-setppcp-",
              "title": "BLE.setPPCP()"
            },
            {
              "anchor": "ble-connected-",
              "title": "BLE.connected()"
            },
            {
              "anchor": "ble-disconnect-",
              "title": "BLE.disconnect()"
            },
            {
              "anchor": "ble-disconnect-peripheral-",
              "title": "BLE.disconnect(peripheral)"
            },
            {
              "anchor": "ble-on-",
              "title": "BLE.on()"
            },
            {
              "anchor": "ble-off-",
              "title": "BLE.off()"
            },
            {
              "anchor": "ble-begin-",
              "title": "BLE.begin()"
            },
            {
              "anchor": "ble-end-",
              "title": "BLE.end()"
            },
            {
              "anchor": "ble-onconnected-",
              "title": "BLE.onConnected()"
            },
            {
              "anchor": "ble-ondisconnected-",
              "title": "BLE.onDisconnected()"
            },
            {
              "anchor": "ble-settxpower-",
              "title": "BLE.setTxPower()"
            },
            {
              "anchor": "ble-txpower-",
              "title": "BLE.txPower()"
            },
            {
              "anchor": "ble-address-",
              "title": "BLE.address()"
            },
            {
              "anchor": "ble-selectantenna-",
              "title": "BLE.selectAntenna()"
            },
            {
              "anchor": "ble-setpairingiocaps-",
              "title": "BLE.setPairingIoCaps()"
            },
            {
              "anchor": "ble-setpairingalgorithm-",
              "title": "BLE.setPairingAlgorithm()"
            },
            {
              "anchor": "ble-startpairing-",
              "title": "BLE.startPairing()"
            },
            {
              "anchor": "ble-rejectpairing-",
              "title": "BLE.rejectPairing()"
            },
            {
              "anchor": "ble-setpairingnumericcomparison-",
              "title": "BLE.setPairingNumericComparison()"
            },
            {
              "anchor": "ble-setpairingpasskey-",
              "title": "BLE.setPairingPasskey()"
            },
            {
              "anchor": "ble-ispairing-",
              "title": "BLE.isPairing()"
            },
            {
              "anchor": "ble-ispaired-",
              "title": "BLE.isPaired()"
            },
            {
              "anchor": "ble-onpairingevent-",
              "title": "BLE.onPairingEvent()",
              "subsections": [
                {
                  "anchor": "blepairingevent",
                  "title": "BLEPairingEvent"
                },
                {
                  "anchor": "blepairingeventpayload",
                  "title": "BlePairingEventPayload"
                },
                {
                  "anchor": "blepairingstatus",
                  "title": "BlePairingStatus"
                }
              ]
            },
            {
              "anchor": "ble-setprovisioningsvcuuid",
              "title": "BLE.setProvisioningSvcUuid"
            },
            {
              "anchor": "ble-setprovisioningtxuuid",
              "title": "BLE.setProvisioningTxUuid"
            },
            {
              "anchor": "ble-setprovisioningrxuuid",
              "title": "BLE.setProvisioningRxUuid"
            },
            {
              "anchor": "ble-setprovisioningveruuid",
              "title": "BLE.setProvisioningVerUuid"
            },
            {
              "anchor": "ble-setdevicename",
              "title": "BLE.setDeviceName"
            },
            {
              "anchor": "ble-getdevicename",
              "title": "BLE.getDeviceName"
            },
            {
              "anchor": "ble-setprovisioningcompanyid",
              "title": "BLE.setProvisioningCompanyId"
            },
            {
              "anchor": "ble-provisioningmode",
              "title": "BLE.provisioningMode"
            },
            {
              "anchor": "ble-getprovisioningstatus",
              "title": "BLE.getProvisioningStatus"
            }
          ]
        },
        {
          "title": "BLEScanFilter - Bluetooth LE (BLE)",
          "dir": "bluetooth-le-ble",
          "file": "blescanfilter",
          "subsections": [
            {
              "anchor": "devicename-blescanfilter-",
              "title": "deviceName (BLEScanFilter)"
            },
            {
              "anchor": "serviceuuid-blescanfilter-",
              "title": "serviceUUID (BLEScanFilter)"
            },
            {
              "anchor": "address-blescanfilter-",
              "title": "address (BleScanFilter)"
            },
            {
              "anchor": "appearance-blescanfilter-",
              "title": "appearance (BleScanFilter)"
            },
            {
              "anchor": "rssi-blescanfilter-",
              "title": "rssi (BleScanFilter)"
            },
            {
              "anchor": "customdata-blescanfilter-",
              "title": "customData (BleScanFilter)"
            }
          ]
        },
        {
          "title": "BLE Services - Bluetooth LE (BLE)",
          "dir": "bluetooth-le-ble",
          "file": "ble-services"
        },
        {
          "title": "BleCharacteristic - Bluetooth LE (BLE)",
          "dir": "bluetooth-le-ble",
          "file": "blecharacteristic",
          "subsections": [
            {
              "anchor": "blecharacteristic-",
              "title": "BleCharacteristic()"
            },
            {
              "anchor": "blecharacteristic-peripheral-",
              "title": "BleCharacteristic (peripheral)"
            },
            {
              "anchor": "blecharacteristic-peripheral-with-data-received-",
              "title": "BleCharacteristic (peripheral with data received)"
            },
            {
              "anchor": "uuid-",
              "title": "UUID()"
            },
            {
              "anchor": "properties-",
              "title": "properties()"
            },
            {
              "anchor": "getvalue-buf-len-",
              "title": "getValue(buf, len)"
            },
            {
              "anchor": "getvalue-string-",
              "title": "getValue(String)"
            },
            {
              "anchor": "getvalue-pointer-",
              "title": "getValue(pointer)"
            },
            {
              "anchor": "setvalue-buf-len-",
              "title": "setValue(buf, len)"
            },
            {
              "anchor": "setvalue-string-",
              "title": "setValue(string)"
            },
            {
              "anchor": "setvalue-pointer-",
              "title": "setValue(pointer)"
            },
            {
              "anchor": "ondatareceived-",
              "title": "onDataReceived()"
            }
          ]
        },
        {
          "title": "BleCharacteristicProperty - Bluetooth LE (BLE)",
          "dir": "bluetooth-le-ble",
          "file": "blecharacteristicproperty"
        },
        {
          "title": "BleUuid - Bluetooth LE (BLE)",
          "dir": "bluetooth-le-ble",
          "file": "bleuuid",
          "subsections": [
            {
              "anchor": "type-",
              "title": "type()"
            },
            {
              "anchor": "isvalid-",
              "title": "isValid()"
            },
            {
              "anchor": "equality",
              "title": "equality"
            },
            {
              "anchor": "rawbytes",
              "title": "rawBytes"
            },
            {
              "anchor": "operator-",
              "title": "operator[]"
            },
            {
              "anchor": "constructors",
              "title": "Constructors"
            },
            {
              "anchor": "setters",
              "title": "Setters"
            }
          ]
        },
        {
          "title": "BleAdvertisingData - Bluetooth LE (BLE)",
          "dir": "bluetooth-le-ble",
          "file": "bleadvertisingdata",
          "subsections": [
            {
              "anchor": "bleadvertisingdata-",
              "title": "BleAdvertisingData()"
            },
            {
              "anchor": "append-",
              "title": "append()"
            },
            {
              "anchor": "appendcustomdata",
              "title": "appendCustomData"
            },
            {
              "anchor": "appendlocalname-",
              "title": "appendLocalName()"
            },
            {
              "anchor": "appendserviceuuid-",
              "title": "appendServiceUUID()"
            },
            {
              "anchor": "clear-",
              "title": "clear()"
            },
            {
              "anchor": "remove-",
              "title": "remove()"
            },
            {
              "anchor": "set-",
              "title": "set()"
            },
            {
              "anchor": "get-type-buffer-",
              "title": "get(type, buffer)"
            },
            {
              "anchor": "get-buffer-",
              "title": "get(buffer)"
            },
            {
              "anchor": "length-",
              "title": "length()"
            },
            {
              "anchor": "operator-",
              "title": "operator[]"
            },
            {
              "anchor": "devicename-",
              "title": "deviceName()"
            },
            {
              "anchor": "devicename-buf-",
              "title": "deviceName(buf)"
            },
            {
              "anchor": "serviceuuid-",
              "title": "serviceUUID()"
            },
            {
              "anchor": "customdata-",
              "title": "customData()"
            },
            {
              "anchor": "contains-",
              "title": "contains()"
            }
          ]
        },
        {
          "title": "BleAdvertisingDataType - Bluetooth LE (BLE)",
          "dir": "bluetooth-le-ble",
          "file": "bleadvertisingdatatype"
        },
        {
          "title": "BleAdvertisingDataType::FLAGS - Bluetooth LE (BLE)",
          "dir": "bluetooth-le-ble",
          "file": "bleadvertisingdatatype-flags"
        },
        {
          "title": "BlePeerDevice - Bluetooth LE (BLE)",
          "dir": "bluetooth-le-ble",
          "file": "blepeerdevice",
          "subsections": [
            {
              "anchor": "connected-",
              "title": "connected()"
            },
            {
              "anchor": "address-",
              "title": "address()"
            },
            {
              "anchor": "getcharacteristicbyuuid-",
              "title": "getCharacteristicByUUID()"
            },
            {
              "anchor": "getcharacteristicbydescription-",
              "title": "getCharacteristicByDescription()"
            },
            {
              "anchor": "blescanresult",
              "title": "BleScanResult"
            },
            {
              "anchor": "discoverallcharacteristics",
              "title": "discoverAllCharacteristics"
            }
          ]
        },
        {
          "title": "BleAddress - Bluetooth LE (BLE)",
          "dir": "bluetooth-le-ble",
          "file": "bleaddress",
          "subsections": [
            {
              "anchor": "copy-bleaddress-",
              "title": "copy (BleAddress)"
            },
            {
              "anchor": "address-byte-bleaddress-",
              "title": "address byte (BleAddress)"
            },
            {
              "anchor": "tostring-bleaddress-",
              "title": "toString (BleAddress)"
            },
            {
              "anchor": "equality-bleaddress-",
              "title": "equality (BleAddress)"
            },
            {
              "anchor": "valid-bleaddress-",
              "title": "valid (BleAddress)"
            },
            {
              "anchor": "getters",
              "title": "Getters"
            },
            {
              "anchor": "constructor-",
              "title": "Constructor"
            },
            {
              "anchor": "setters",
              "title": "Setters"
            }
          ]
        },
        {
          "title": "BleAddressType - Bluetooth LE (BLE)",
          "dir": "bluetooth-le-ble",
          "file": "bleaddresstype"
        },
        {
          "title": "BleAdvertisingEventType - Bluetooth LE (BLE)",
          "dir": "bluetooth-le-ble",
          "file": "bleadvertisingeventtype"
        },
        {
          "title": "BleAdvertisingParams - Bluetooth LE (BLE)",
          "dir": "bluetooth-le-ble",
          "file": "bleadvertisingparams"
        },
        {
          "title": "BleScanParams - Bluetooth LE (BLE)",
          "dir": "bluetooth-le-ble",
          "file": "blescanparams"
        },
        {
          "title": "iBeacon - Bluetooth LE (BLE)",
          "dir": "bluetooth-le-ble",
          "file": "ibeacon"
        }
      ]
    },
    {
      "title": "CAN (canbus)",
      "dir": "can-canbus",
      "collapse": true,
      "subsections": [
        {
          "title": "CAN (canbus)",
          "dir": "can-canbus",
          "file": "can-canbus"
        },
        {
          "title": "CANMessage - CAN (canbus)",
          "dir": "can-canbus",
          "file": "canmessage"
        },
        {
          "title": "CANChannel - CAN (canbus)",
          "dir": "can-canbus",
          "file": "canchannel"
        },
        {
          "title": "begin() - CAN (canbus)",
          "dir": "can-canbus",
          "file": "begin"
        },
        {
          "title": "end() - CAN (canbus)",
          "dir": "can-canbus",
          "file": "end"
        },
        {
          "title": "available() - CAN (canbus)",
          "dir": "can-canbus",
          "file": "available"
        },
        {
          "title": "receive() - CAN (canbus)",
          "dir": "can-canbus",
          "file": "receive"
        },
        {
          "title": "transmit() - CAN (canbus)",
          "dir": "can-canbus",
          "file": "transmit"
        },
        {
          "title": "addFilter() - CAN (canbus)",
          "dir": "can-canbus",
          "file": "addfilter"
        },
        {
          "title": "clearFilters() - CAN (canbus)",
          "dir": "can-canbus",
          "file": "clearfilters"
        },
        {
          "title": "isEnabled() - CAN (canbus)",
          "dir": "can-canbus",
          "file": "isenabled"
        },
        {
          "title": "errorStatus() - CAN (canbus)",
          "dir": "can-canbus",
          "file": "errorstatus"
        }
      ]
    },
    {
      "title": "Cellular",
      "dir": "cellular",
      "collapse": true,
      "subsections": [
        {
          "title": "Cellular",
          "dir": "cellular",
          "file": "cellular"
        },
        {
          "title": "on() - Cellular",
          "dir": "cellular",
          "file": "on"
        },
        {
          "title": "off() - Cellular",
          "dir": "cellular",
          "file": "off"
        },
        {
          "title": "isOn() - Cellular",
          "dir": "cellular",
          "file": "ison"
        },
        {
          "title": "isOff() - Cellular",
          "dir": "cellular",
          "file": "isoff"
        },
        {
          "title": "connect() - Cellular",
          "dir": "cellular",
          "file": "connect"
        },
        {
          "title": "disconnect() - Cellular",
          "dir": "cellular",
          "file": "disconnect"
        },
        {
          "title": "connecting() - Cellular",
          "dir": "cellular",
          "file": "connecting"
        },
        {
          "title": "ready() - Cellular",
          "dir": "cellular",
          "file": "ready"
        },
        {
          "title": "prefer() [Cellular] - Cellular",
          "dir": "cellular",
          "file": "prefer-cellular"
        },
        {
          "title": "isPreferred() [Cellular] - Cellular",
          "dir": "cellular",
          "file": "ispreferred-cellular"
        },
        {
          "title": "listen() - Cellular",
          "dir": "cellular",
          "file": "listen"
        },
        {
          "title": "listening() - Cellular",
          "dir": "cellular",
          "file": "listening"
        },
        {
          "title": "setListenTimeout() - Cellular",
          "dir": "cellular",
          "file": "setlistentimeout"
        },
        {
          "title": "getListenTimeout() - Cellular",
          "dir": "cellular",
          "file": "getlistentimeout"
        },
        {
          "title": "lock() - Cellular",
          "dir": "cellular",
          "file": "lock"
        },
        {
          "title": "unlock() - Cellular",
          "dir": "cellular",
          "file": "unlock"
        },
        {
          "title": "setCredentials() - Cellular",
          "dir": "cellular",
          "file": "setcredentials"
        },
        {
          "title": "clearCredentials() - Cellular",
          "dir": "cellular",
          "file": "clearcredentials"
        },
        {
          "title": "setActiveSim() - Cellular",
          "dir": "cellular",
          "file": "setactivesim"
        },
        {
          "title": "getActiveSim() - Cellular",
          "dir": "cellular",
          "file": "getactivesim"
        },
        {
          "title": "getDataUsage() - Cellular",
          "dir": "cellular",
          "file": "getdatausage"
        },
        {
          "title": "setDataUsage() - Cellular",
          "dir": "cellular",
          "file": "setdatausage"
        },
        {
          "title": "resetDataUsage() - Cellular",
          "dir": "cellular",
          "file": "resetdatausage"
        },
        {
          "title": "RSSI() - Cellular",
          "dir": "cellular",
          "file": "rssi"
        },
        {
          "title": "CellularSignal Class - Cellular",
          "dir": "cellular",
          "file": "cellularsignal-class",
          "subsections": [
            {
              "anchor": "getaccesstechnology-",
              "title": "getAccessTechnology()"
            },
            {
              "anchor": "getstrength-",
              "title": "getStrength()"
            },
            {
              "anchor": "getquality-",
              "title": "getQuality()"
            },
            {
              "anchor": "getstrengthvalue-",
              "title": "getStrengthValue()"
            },
            {
              "anchor": "getqualityvalue-",
              "title": "getQualityValue()"
            }
          ]
        },
        {
          "title": "getBandAvailable() - Cellular",
          "dir": "cellular",
          "file": "getbandavailable"
        },
        {
          "title": "getBandSelect() - Cellular",
          "dir": "cellular",
          "file": "getbandselect"
        },
        {
          "title": "setBandSelect() - Cellular",
          "dir": "cellular",
          "file": "setbandselect"
        },
        {
          "title": "resolve() - Cellular",
          "dir": "cellular",
          "file": "resolve"
        },
        {
          "title": "localIP() - Cellular",
          "dir": "cellular",
          "file": "localip"
        },
        {
          "title": "command() - Cellular",
          "dir": "cellular",
          "file": "command"
        }
      ]
    },
    {
      "title": "Checking for features",
      "dir": "checking-for-features",
      "collapse": true,
      "subsections": [
        {
          "title": "Checking for features",
          "dir": "checking-for-features",
          "file": "checking-for-features"
        },
        {
          "title": "Checking Device OS Version - Checking for features",
          "dir": "checking-for-features",
          "file": "checking-device-os-version"
        },
        {
          "title": "Checking Platform ID - Checking for features",
          "dir": "checking-for-features",
          "file": "checking-platform-id"
        }
      ]
    },
    {
      "title": "Chrono Literals",
      "dir": "chrono-literals",
      "collapse": true,
      "subsections": [
        {
          "title": "Chrono Literals",
          "dir": "chrono-literals",
          "file": "chrono-literals"
        }
      ]
    },
    {
      "title": "Cloud functions",
      "dir": "cloud-functions",
      "collapse": true,
      "subsections": [
        {
          "title": "Overview of API field limits - Cloud functions",
          "dir": "cloud-functions",
          "file": "overview-of-api-field-limits"
        },
        {
          "title": "Particle.variable() - Cloud functions",
          "dir": "cloud-functions",
          "file": "particle-variable"
        },
        {
          "title": "Particle.variable() - calculated - Cloud functions",
          "dir": "cloud-functions",
          "file": "particle-variable-calculated"
        },
        {
          "title": "Particle.function() - Cloud functions",
          "dir": "cloud-functions",
          "file": "particle-function"
        },
        {
          "title": "Particle.publish() - Cloud functions",
          "dir": "cloud-functions",
          "file": "particle-publish"
        },
        {
          "title": "Particle.subscribe() - Cloud functions",
          "dir": "cloud-functions",
          "file": "particle-subscribe"
        },
        {
          "title": "Particle.unsubscribe() - Cloud functions",
          "dir": "cloud-functions",
          "file": "particle-unsubscribe"
        },
        {
          "title": "Particle.ledger - Cloud functions",
          "dir": "cloud-functions",
          "file": "particle-ledger"
        },
        {
          "title": "Particle.maxEventDataSize() - Cloud functions",
          "dir": "cloud-functions",
          "file": "particle-maxeventdatasize"
        },
        {
          "title": "Particle.maxVariableValueSize() - Cloud functions",
          "dir": "cloud-functions",
          "file": "particle-maxvariablevaluesize"
        },
        {
          "title": "Particle.maxFunctionArgumentSize() - Cloud functions",
          "dir": "cloud-functions",
          "file": "particle-maxfunctionargumentsize"
        },
        {
          "title": "Particle.publishVitals() - Cloud functions",
          "dir": "cloud-functions",
          "file": "particle-publishvitals"
        },
        {
          "title": "Particle.connect() - Cloud functions",
          "dir": "cloud-functions",
          "file": "particle-connect"
        },
        {
          "title": "Particle.connectionInterface() - Cloud functions",
          "dir": "cloud-functions",
          "file": "particle-connectioninterface"
        },
        {
          "title": "Particle.disconnect() - Cloud functions",
          "dir": "cloud-functions",
          "file": "particle-disconnect"
        },
        {
          "title": "Clear session - Cloud functions",
          "dir": "cloud-functions",
          "file": "clear-session"
        },
        {
          "title": "Particle.connected() - Cloud functions",
          "dir": "cloud-functions",
          "file": "particle-connected"
        },
        {
          "title": "Particle.disconnected() - Cloud functions",
          "dir": "cloud-functions",
          "file": "particle-disconnected"
        },
        {
          "title": "Particle.setDisconnectOptions() - Cloud functions",
          "dir": "cloud-functions",
          "file": "particle-setdisconnectoptions"
        },
        {
          "title": "Particle.keepAlive() - Cloud functions",
          "dir": "cloud-functions",
          "file": "particle-keepalive"
        },
        {
          "title": "Particle.process() - Cloud functions",
          "dir": "cloud-functions",
          "file": "particle-process"
        },
        {
          "title": "Particle.syncTime() - Cloud functions",
          "dir": "cloud-functions",
          "file": "particle-synctime"
        },
        {
          "title": "Particle.syncTimeDone() - Cloud functions",
          "dir": "cloud-functions",
          "file": "particle-synctimedone"
        },
        {
          "title": "Particle.syncTimePending() - Cloud functions",
          "dir": "cloud-functions",
          "file": "particle-synctimepending"
        },
        {
          "title": "Particle.timeSyncedLast() - Cloud functions",
          "dir": "cloud-functions",
          "file": "particle-timesyncedlast"
        },
        {
          "title": "Get public IP - Cloud functions",
          "dir": "cloud-functions",
          "file": "get-public-ip"
        },
        {
          "title": "Get device name - Cloud functions",
          "dir": "cloud-functions",
          "file": "get-device-name"
        },
        {
          "title": "Get random seed - Cloud functions",
          "dir": "cloud-functions",
          "file": "get-random-seed"
        }
      ]
    },
    {
      "title": "Debugging",
      "dir": "debugging",
      "collapse": true,
      "subsections": [
        {
          "title": "Debugging",
          "dir": "debugging",
          "file": "debugging"
        },
        {
          "title": "Using a serial terminal - Debugging",
          "dir": "debugging",
          "file": "using-a-serial-terminal"
        },
        {
          "title": "Serial.print vs. Log.info - Debugging",
          "dir": "debugging",
          "file": "serial-print-vs-log-info"
        },
        {
          "title": "Waiting for serial - Debugging",
          "dir": "debugging",
          "file": "waiting-for-serial"
        },
        {
          "title": "comm.protocol errors - Debugging",
          "dir": "debugging",
          "file": "comm-protocol-errors"
        },
        {
          "title": "System errors - Debugging",
          "dir": "debugging",
          "file": "system-errors"
        }
      ]
    },
    {
      "title": "Device identifiers",
      "dir": "device-identifiers",
      "collapse": true,
      "subsections": [
        {
          "title": "Device identifiers",
          "dir": "device-identifiers",
          "file": "device-identifiers"
        },
        {
          "title": "Device ID - Device identifiers",
          "dir": "device-identifiers",
          "file": "device-id"
        },
        {
          "title": "Serial number - Device identifiers",
          "dir": "device-identifiers",
          "file": "serial-number"
        },
        {
          "title": "Data matrix sticker - Device identifiers",
          "dir": "device-identifiers",
          "file": "data-matrix-sticker"
        },
        {
          "title": "ICCID - Device identifiers",
          "dir": "device-identifiers",
          "file": "iccid"
        },
        {
          "title": "IMEI - Device identifiers",
          "dir": "device-identifiers",
          "file": "imei"
        },
        {
          "title": "IMSI - Device identifiers",
          "dir": "device-identifiers",
          "file": "imsi"
        },
        {
          "title": "Mobile secret - Device identifiers",
          "dir": "device-identifiers",
          "file": "mobile-secret"
        },
        {
          "title": "Device name - Device identifiers",
          "dir": "device-identifiers",
          "file": "device-name"
        },
        {
          "title": "MAC address - Device identifiers",
          "dir": "device-identifiers",
          "file": "mac-address"
        }
      ]
    },
    {
      "title": "EEPROM",
      "dir": "eeprom",
      "collapse": true,
      "subsections": [
        {
          "title": "EEPROM",
          "dir": "eeprom",
          "file": "eeprom"
        },
        {
          "title": "length() - EEPROM",
          "dir": "eeprom",
          "file": "length"
        },
        {
          "title": "put() - EEPROM",
          "dir": "eeprom",
          "file": "put"
        },
        {
          "title": "get() - EEPROM",
          "dir": "eeprom",
          "file": "get"
        },
        {
          "title": "read() - EEPROM",
          "dir": "eeprom",
          "file": "read"
        },
        {
          "title": "write() - EEPROM",
          "dir": "eeprom",
          "file": "write"
        },
        {
          "title": "clear() - EEPROM",
          "dir": "eeprom",
          "file": "clear"
        },
        {
          "title": "hasPendingErase() - EEPROM",
          "dir": "eeprom",
          "file": "haspendingerase"
        },
        {
          "title": "performPendingErase() - EEPROM",
          "dir": "eeprom",
          "file": "performpendingerase"
        }
      ]
    },
    {
      "title": "Ethernet",
      "dir": "ethernet",
      "collapse": true,
      "subsections": [
        {
          "title": "Ethernet",
          "dir": "ethernet",
          "file": "ethernet"
        },
        {
          "title": "Pin configuration - Ethernet - Ethernet",
          "dir": "ethernet",
          "file": "pin-configuration-ethernet"
        },
        {
          "title": "on() - Ethernet",
          "dir": "ethernet",
          "file": "on"
        },
        {
          "title": "off() - Ethernet",
          "dir": "ethernet",
          "file": "off"
        },
        {
          "title": "connect() - Ethernet",
          "dir": "ethernet",
          "file": "connect"
        },
        {
          "title": "disconnect() - Ethernet",
          "dir": "ethernet",
          "file": "disconnect"
        },
        {
          "title": "connecting() - Ethernet",
          "dir": "ethernet",
          "file": "connecting"
        },
        {
          "title": "ready() - Ethernet",
          "dir": "ethernet",
          "file": "ready"
        },
        {
          "title": "setConfig() [Ethernet] - Ethernet",
          "dir": "ethernet",
          "file": "setconfig-ethernet"
        },
        {
          "title": "getConfig() [Ethernet] - Ethernet",
          "dir": "ethernet",
          "file": "getconfig-ethernet"
        },
        {
          "title": "prefer() [Ethernet] - Ethernet",
          "dir": "ethernet",
          "file": "prefer-ethernet"
        },
        {
          "title": "isPreferred() [Ethernet] - Ethernet",
          "dir": "ethernet",
          "file": "ispreferred-ethernet"
        },
        {
          "title": "listen() - Ethernet",
          "dir": "ethernet",
          "file": "listen"
        },
        {
          "title": "listening() - Ethernet",
          "dir": "ethernet",
          "file": "listening"
        },
        {
          "title": "setListenTimeout() - Ethernet",
          "dir": "ethernet",
          "file": "setlistentimeout"
        },
        {
          "title": "getListenTimeout() - Ethernet",
          "dir": "ethernet",
          "file": "getlistentimeout"
        },
        {
          "title": "macAddress() - Ethernet",
          "dir": "ethernet",
          "file": "macaddress"
        },
        {
          "title": "localIP() - Ethernet",
          "dir": "ethernet",
          "file": "localip"
        },
        {
          "title": "subnetMask() - Ethernet",
          "dir": "ethernet",
          "file": "subnetmask"
        },
        {
          "title": "gatewayIP() - Ethernet",
          "dir": "ethernet",
          "file": "gatewayip"
        },
        {
          "title": "dnsServerIP() - Ethernet",
          "dir": "ethernet",
          "file": "dnsserverip"
        },
        {
          "title": "dhcpServerIP() - Ethernet",
          "dir": "ethernet",
          "file": "dhcpserverip"
        }
      ]
    },
    {
      "title": "File system",
      "dir": "file-system",
      "collapse": true,
      "subsections": [
        {
          "title": "File system",
          "dir": "file-system",
          "file": "file-system"
        },
        {
          "title": "File system open - File system",
          "dir": "file-system",
          "file": "file-system-open"
        },
        {
          "title": "File system write - File system",
          "dir": "file-system",
          "file": "file-system-write"
        },
        {
          "title": "File system read - File system",
          "dir": "file-system",
          "file": "file-system-read"
        },
        {
          "title": "File system lseek - File system",
          "dir": "file-system",
          "file": "file-system-lseek"
        },
        {
          "title": "File system close - File system",
          "dir": "file-system",
          "file": "file-system-close"
        },
        {
          "title": "File system fsync - File system",
          "dir": "file-system",
          "file": "file-system-fsync"
        },
        {
          "title": "File system truncate - File system",
          "dir": "file-system",
          "file": "file-system-truncate"
        },
        {
          "title": "File system ftruncate - File system",
          "dir": "file-system",
          "file": "file-system-ftruncate"
        },
        {
          "title": "File system fstat - File system",
          "dir": "file-system",
          "file": "file-system-fstat"
        },
        {
          "title": "File system stat - File system",
          "dir": "file-system",
          "file": "file-system-stat"
        },
        {
          "title": "File system mkdir - File system",
          "dir": "file-system",
          "file": "file-system-mkdir"
        },
        {
          "title": "File system rmdir - File system",
          "dir": "file-system",
          "file": "file-system-rmdir"
        },
        {
          "title": "File system unlink - File system",
          "dir": "file-system",
          "file": "file-system-unlink"
        },
        {
          "title": "File system rename - File system",
          "dir": "file-system",
          "file": "file-system-rename"
        },
        {
          "title": "File system opendir - File system",
          "dir": "file-system",
          "file": "file-system-opendir"
        },
        {
          "title": "File system readdir - File system",
          "dir": "file-system",
          "file": "file-system-readdir"
        },
        {
          "title": "File system telldir - File system",
          "dir": "file-system",
          "file": "file-system-telldir"
        },
        {
          "title": "File system seekdir - File system",
          "dir": "file-system",
          "file": "file-system-seekdir"
        },
        {
          "title": "File system rewinddir - File system",
          "dir": "file-system",
          "file": "file-system-rewinddir"
        },
        {
          "title": "File system readdir_r - File system",
          "dir": "file-system",
          "file": "file-system-readdir_r"
        },
        {
          "title": "File system closedir - File system",
          "dir": "file-system",
          "file": "file-system-closedir"
        }
      ]
    },
    {
      "title": "FuelGauge",
      "dir": "fuelgauge",
      "collapse": true,
      "subsections": [
        {
          "title": "FuelGauge",
          "dir": "fuelgauge",
          "file": "fuelgauge"
        },
        {
          "title": "getVCell() - FuelGauge",
          "dir": "fuelgauge",
          "file": "getvcell"
        },
        {
          "title": "getSoC() - FuelGauge",
          "dir": "fuelgauge",
          "file": "getsoc"
        },
        {
          "title": "getNormalizedSoC() - FuelGauge",
          "dir": "fuelgauge",
          "file": "getnormalizedsoc"
        },
        {
          "title": "getVersion() - FuelGauge",
          "dir": "fuelgauge",
          "file": "getversion"
        },
        {
          "title": "getCompensateValue() - FuelGauge",
          "dir": "fuelgauge",
          "file": "getcompensatevalue"
        },
        {
          "title": "getAlertThreshold() - FuelGauge",
          "dir": "fuelgauge",
          "file": "getalertthreshold"
        },
        {
          "title": "setAlertThreshold() - FuelGauge",
          "dir": "fuelgauge",
          "file": "setalertthreshold"
        },
        {
          "title": "getAlert() - FuelGauge",
          "dir": "fuelgauge",
          "file": "getalert"
        },
        {
          "title": "clearAlert() - FuelGauge",
          "dir": "fuelgauge",
          "file": "clearalert"
        },
        {
          "title": "reset() - FuelGauge",
          "dir": "fuelgauge",
          "file": "reset"
        },
        {
          "title": "quickStart() - FuelGauge",
          "dir": "fuelgauge",
          "file": "quickstart"
        },
        {
          "title": "sleep() - FuelGauge",
          "dir": "fuelgauge",
          "file": "sleep"
        },
        {
          "title": "wakeup() - FuelGauge",
          "dir": "fuelgauge",
          "file": "wakeup"
        }
      ]
    },
    {
      "title": "Global object constructors",
      "dir": "global-object-constructors",
      "collapse": true,
      "subsections": [
        {
          "title": "Global object constructors",
          "dir": "global-object-constructors",
          "file": "global-object-constructors"
        }
      ]
    },
    {
      "title": "Input/Output",
      "dir": "input-output",
      "collapse": true,
      "subsections": [
        {
          "title": "Input/Output",
          "dir": "input-output",
          "file": "input-output"
        },
        {
          "title": "pinMode() - Input/Output",
          "dir": "input-output",
          "file": "pinmode"
        },
        {
          "title": "getPinMode(pin) - Input/Output",
          "dir": "input-output",
          "file": "getpinmode-pin"
        },
        {
          "title": "digitalWrite() - Input/Output",
          "dir": "input-output",
          "file": "digitalwrite"
        },
        {
          "title": "digitalRead() - Input/Output",
          "dir": "input-output",
          "file": "digitalread"
        },
        {
          "title": "pinSetDriveStrength() - Input/Output",
          "dir": "input-output",
          "file": "pinsetdrivestrength"
        },
        {
          "title": "analogWrite() (PWM) - Input/Output",
          "dir": "input-output",
          "file": "analogwrite-pwm"
        },
        {
          "title": "analogWriteResolution() (PWM) - Input/Output",
          "dir": "input-output",
          "file": "analogwriteresolution-pwm"
        },
        {
          "title": "analogWriteMaxFrequency() (PWM) - Input/Output",
          "dir": "input-output",
          "file": "analogwritemaxfrequency-pwm"
        },
        {
          "title": "Analog Output (DAC) - Input/Output",
          "dir": "input-output",
          "file": "analog-output-dac"
        },
        {
          "title": "analogRead() (ADC) - Input/Output",
          "dir": "input-output",
          "file": "analogread-adc"
        },
        {
          "title": "setADCSampleTime() - Input/Output",
          "dir": "input-output",
          "file": "setadcsampletime"
        },
        {
          "title": "analogSetReference - Input/Output",
          "dir": "input-output",
          "file": "analogsetreference"
        },
        {
          "title": "analogGetReference - Input/Output",
          "dir": "input-output",
          "file": "analoggetreference"
        }
      ]
    },
    {
      "title": "Input/Output - Advanced",
      "dir": "input-output-advanced",
      "collapse": true,
      "subsections": [
        {
          "title": "tone() - Input/Output - Advanced",
          "dir": "input-output-advanced",
          "file": "tone"
        },
        {
          "title": "noTone() - Input/Output - Advanced",
          "dir": "input-output-advanced",
          "file": "notone"
        },
        {
          "title": "shiftOut() - Input/Output - Advanced",
          "dir": "input-output-advanced",
          "file": "shiftout"
        },
        {
          "title": "shiftIn() - Input/Output - Advanced",
          "dir": "input-output-advanced",
          "file": "shiftin"
        },
        {
          "title": "pulseIn() - Input/Output - Advanced",
          "dir": "input-output-advanced",
          "file": "pulsein"
        }
      ]
    },
    {
      "title": "Interrupts",
      "dir": "interrupts",
      "collapse": true,
      "subsections": [
        {
          "title": "Interrupts",
          "dir": "interrupts",
          "file": "interrupts"
        },
        {
          "title": "attachInterrupt() - Interrupts",
          "dir": "interrupts",
          "file": "attachinterrupt"
        },
        {
          "title": "detachInterrupt() - Interrupts",
          "dir": "interrupts",
          "file": "detachinterrupt"
        },
        {
          "title": "interrupts() - Interrupts",
          "dir": "interrupts",
          "file": "interrupts"
        },
        {
          "title": "noInterrupts() - Interrupts",
          "dir": "interrupts",
          "file": "nointerrupts"
        }
      ]
    },
    {
      "title": "IPAddress",
      "dir": "ipaddress",
      "collapse": true,
      "subsections": [
        {
          "title": "IPAddress",
          "dir": "ipaddress",
          "file": "ipaddress"
        }
      ]
    },
    {
      "title": "JSON",
      "dir": "json",
      "collapse": true,
      "subsections": [
        {
          "title": "JSON",
          "dir": "json",
          "file": "json"
        },
        {
          "title": "JSONWriter - JSON",
          "dir": "json",
          "file": "jsonwriter",
          "subsections": [
            {
              "anchor": "jsonwriter-beginarray-",
              "title": "JSONWriter::beginArray()"
            },
            {
              "anchor": "jsonwriter-endarray-",
              "title": "JSONWriter::endArray()"
            },
            {
              "anchor": "jsonwriter-beginobject-",
              "title": "JSONWriter::beginObject()"
            },
            {
              "anchor": "jsonwriter-endobject-",
              "title": "JSONWriter::endObject()"
            },
            {
              "anchor": "jsonwriter-name-const-char-name-",
              "title": "JSONWriter::name(const char *name)"
            },
            {
              "anchor": "jsonwriter-name-const-char-name-size_t-size-",
              "title": "JSONWriter::name(const char *name, size_t size)"
            },
            {
              "anchor": "jsonwriter-name-const-string-amp-name-",
              "title": "JSONWriter::name(const String &name)"
            },
            {
              "anchor": "jsonwriter-value-bool-val-",
              "title": "JsonWriter::value(bool val)"
            },
            {
              "anchor": "jsonwriter-value-int-val-",
              "title": "JsonWriter::value(int val)"
            },
            {
              "anchor": "jsonwriter-value-unsigned-val-",
              "title": "JsonWriter::value(unsigned val)"
            },
            {
              "anchor": "jsonwriter-value-double-val-int-precision-",
              "title": "JsonWriter::value(double val, int precision)"
            },
            {
              "anchor": "jsonwriter-value-double-val-",
              "title": "JsonWriter::value(double val)"
            },
            {
              "anchor": "jsonwriter-value-const-char-val-",
              "title": "JsonWriter::value(const char *val)"
            },
            {
              "anchor": "jsonwriter-value-const-char-val-size_t-size-",
              "title": "JsonWriter::value(const char *val, size_t size)"
            },
            {
              "anchor": "jsonwriter-value-const-string-amp-val-",
              "title": "JsonWriter::value(const String &val)"
            },
            {
              "anchor": "jsonwriter-nullvalue-",
              "title": "JsonWriter::nullValue()"
            }
          ]
        },
        {
          "title": "JSONBufferWriter - JSON",
          "dir": "json",
          "file": "jsonbufferwriter",
          "subsections": [
            {
              "anchor": "jsonbufferwriter-jsonbufferwriter-char-buf-size_t-size-",
              "title": "JSONBufferWriter::JSONBufferWriter(char *buf, size_t size)"
            },
            {
              "anchor": "jsonbufferwriter-buffer-",
              "title": "JSONBufferWriter::buffer()"
            },
            {
              "anchor": "jsonbufferwriter-buffersize-",
              "title": "JSONBufferWriter::bufferSize()"
            },
            {
              "anchor": "jsonbufferwriter-datasize-",
              "title": "JSONBufferWriter::dataSize()"
            }
          ]
        },
        {
          "title": "JSONStreamWriter - JSON",
          "dir": "json",
          "file": "jsonstreamwriter",
          "subsections": [
            {
              "anchor": "jsonstreamwriter-jsonstreamwriter-print-amp-stream-",
              "title": "JSONStreamWriter::JSONStreamWriter(Print &stream)"
            },
            {
              "anchor": "jsonstreamwriter-stream-",
              "title": "JSONStreamWriter::stream()"
            }
          ]
        },
        {
          "title": "Parsing - JSON",
          "dir": "json",
          "file": "parsing"
        },
        {
          "title": "JSONValue - JSON",
          "dir": "json",
          "file": "jsonvalue",
          "subsections": [
            {
              "anchor": "jsonvalue-isnull-",
              "title": "JSONValue::isNull()"
            },
            {
              "anchor": "jsonvalue-isbool-",
              "title": "JSONValue::isBool()"
            },
            {
              "anchor": "jsonvalue-isnumber-",
              "title": "JSONValue::isNumber()"
            },
            {
              "anchor": "jsonvalue-isstring-",
              "title": "JSONValue::isString()"
            },
            {
              "anchor": "jsonvalue-isarray-",
              "title": "JSONValue::isArray()"
            },
            {
              "anchor": "jsonvalue-isobject-",
              "title": "JSONValue::isObject()"
            },
            {
              "anchor": "jsonvalue-type-",
              "title": "JSONValue::type()"
            },
            {
              "anchor": "jsonvalue-tobool-",
              "title": "JSONValue::toBool()"
            },
            {
              "anchor": "jsonvalue-toint-",
              "title": "JSONValue::toInt()"
            },
            {
              "anchor": "jsonvalue-todouble-",
              "title": "JSONValue::toDouble()"
            },
            {
              "anchor": "jsonvalue-tostring-",
              "title": "JSONValue::toString()"
            },
            {
              "anchor": "jsonvalue-isvalid-",
              "title": "JSONValue::isValid()"
            }
          ]
        },
        {
          "title": "JSONString - JSON",
          "dir": "json",
          "file": "jsonstring",
          "subsections": [
            {
              "anchor": "jsonstring-jsonstring-const-jsonvalue-amp-value-",
              "title": "JSONString::JSONString(const JSONValue &value);"
            },
            {
              "anchor": "jsonstring-data-",
              "title": "JSONString::data()"
            },
            {
              "anchor": "jsonstring-operator-const-char-",
              "title": "JSONString::operator const char *()"
            },
            {
              "anchor": "jsonstring-operator-string-",
              "title": "JSONString::operator String()"
            },
            {
              "anchor": "jsonstring-size-",
              "title": "JSONString::size()"
            },
            {
              "anchor": "jsonstring-isempty-",
              "title": "JSONString::isEmpty()"
            },
            {
              "anchor": "jsonstring-operator-",
              "title": "JSONString::operator==()"
            },
            {
              "anchor": "jsonstring-operator-",
              "title": "JSONString::operator!=()"
            }
          ]
        },
        {
          "title": "JSONObjectIterator - JSON",
          "dir": "json",
          "file": "jsonobjectiterator",
          "subsections": [
            {
              "anchor": "jsonobjectiterator-jsonobjectiterator-const-jsonvalue-amp-value-",
              "title": "JSONObjectIterator::JSONObjectIterator(const JSONValue &value)"
            },
            {
              "anchor": "jsonobjectiterator-next-",
              "title": "JSONObjectIterator::next()"
            },
            {
              "anchor": "jsonobjectiterator-name-",
              "title": "JSONObjectIterator::name()"
            },
            {
              "anchor": "jsonobjectiterator-value-",
              "title": "JSONObjectIterator::value()"
            },
            {
              "anchor": "jsonobjectiterator-count-",
              "title": "JSONObjectIterator::count()"
            }
          ]
        },
        {
          "title": "JSONArrayIterator - JSON",
          "dir": "json",
          "file": "jsonarrayiterator",
          "subsections": [
            {
              "anchor": "jsonarrayiterator-jsonarrayiterator-const-jsonvalue-amp-value-",
              "title": "JSONArrayIterator::JSONArrayIterator(const JSONValue &value)"
            },
            {
              "anchor": "jsonarrayiterator-next-",
              "title": "JSONArrayIterator::next()"
            },
            {
              "anchor": "jsonarrayiterator-value-",
              "title": "JSONArrayIterator::value()"
            },
            {
              "anchor": "jsonarrayiterator-count-",
              "title": "JSONArrayIterator::count()"
            }
          ]
        }
      ]
    },
    {
      "title": "Keyboard",
      "dir": "keyboard",
      "collapse": true,
      "subsections": [
        {
          "title": "Keyboard",
          "dir": "keyboard",
          "file": "keyboard"
        },
        {
          "title": "begin() - Keyboard",
          "dir": "keyboard",
          "file": "begin"
        },
        {
          "title": "end() - Keyboard",
          "dir": "keyboard",
          "file": "end"
        },
        {
          "title": "write() - Keyboard",
          "dir": "keyboard",
          "file": "write"
        },
        {
          "title": "click() - Keyboard",
          "dir": "keyboard",
          "file": "click"
        },
        {
          "title": "press() - Keyboard",
          "dir": "keyboard",
          "file": "press"
        },
        {
          "title": "release() - Keyboard",
          "dir": "keyboard",
          "file": "release"
        },
        {
          "title": "releaseAll() - Keyboard",
          "dir": "keyboard",
          "file": "releaseall"
        },
        {
          "title": "print() - Keyboard",
          "dir": "keyboard",
          "file": "print"
        },
        {
          "title": "println() - Keyboard",
          "dir": "keyboard",
          "file": "println"
        },
        {
          "title": "printf() - Keyboard",
          "dir": "keyboard",
          "file": "printf"
        },
        {
          "title": "printlnf() - Keyboard",
          "dir": "keyboard",
          "file": "printlnf"
        }
      ]
    },
    {
      "title": "Language - Arduino Compatibility",
      "dir": "language-arduino-compatibility",
      "collapse": true,
      "subsections": [
        {
          "title": "Language - Arduino Compatibility",
          "dir": "language-arduino-compatibility",
          "file": "language-arduino-compatibility"
        },
        {
          "title": "Enabling extended Arduino SDK compatibility - Language - Arduino Compatibility",
          "dir": "language-arduino-compatibility",
          "file": "enabling-extended-arduino-sdk-compatibility"
        },
        {
          "title": "Arduino APIs added by firmware version - Language - Arduino Compatibility",
          "dir": "language-arduino-compatibility",
          "file": "arduino-apis-added-by-firmware-version"
        },
        {
          "title": "Adding Arduino symbols to applications and libraries - Language - Arduino Compatibility",
          "dir": "language-arduino-compatibility",
          "file": "adding-arduino-symbols-to-applications-and-libraries"
        }
      ]
    },
    {
      "title": "Language syntax",
      "dir": "language-syntax",
      "collapse": true,
      "subsections": [
        {
          "title": "Language syntax",
          "dir": "language-syntax",
          "file": "language-syntax"
        },
        {
          "title": "Structure - Language syntax",
          "dir": "language-syntax",
          "file": "structure",
          "subsections": [
            {
              "anchor": "setup-",
              "title": "setup()"
            },
            {
              "anchor": "loop-",
              "title": "loop()"
            }
          ]
        },
        {
          "title": "Control structures - Language syntax",
          "dir": "language-syntax",
          "file": "control-structures",
          "subsections": [
            {
              "anchor": "if",
              "title": "if"
            },
            {
              "anchor": "comparison-operators",
              "title": "Comparison operators"
            },
            {
              "anchor": "if-else",
              "title": "if...else"
            },
            {
              "anchor": "for",
              "title": "for"
            },
            {
              "anchor": "switch-case",
              "title": "switch case"
            },
            {
              "anchor": "while",
              "title": "while"
            },
            {
              "anchor": "do-while",
              "title": "do... while"
            },
            {
              "anchor": "break",
              "title": "break"
            },
            {
              "anchor": "continue",
              "title": "continue"
            },
            {
              "anchor": "return",
              "title": "return"
            },
            {
              "anchor": "goto",
              "title": "goto"
            }
          ]
        },
        {
          "title": "Further syntax - Language syntax",
          "dir": "language-syntax",
          "file": "further-syntax",
          "subsections": [
            {
              "anchor": "-semicolon-",
              "title": "; (semicolon)"
            },
            {
              "anchor": "-curly-braces-",
              "title": "{} (curly braces)"
            },
            {
              "anchor": "-single-line-comment-",
              "title": "// (single line comment)"
            },
            {
              "anchor": "-multi-line-comment-",
              "title": "/\\* \\*/ (multi-line comment)"
            },
            {
              "anchor": "-define",
              "title": "#define"
            },
            {
              "anchor": "-include",
              "title": "#include"
            }
          ]
        },
        {
          "title": "Arithmetic operators - Language syntax",
          "dir": "language-syntax",
          "file": "arithmetic-operators",
          "subsections": [
            {
              "anchor": "-assignment-operator-",
              "title": "= (assignment operator)"
            },
            {
              "anchor": "-addition-subtraction-multiplication-division-",
              "title": "+ - * / (addition subtraction multiplication division)"
            },
            {
              "anchor": "-modulo-",
              "title": "% (modulo)"
            }
          ]
        },
        {
          "title": "Boolean operators - Language syntax",
          "dir": "language-syntax",
          "file": "boolean-operators",
          "subsections": [
            {
              "anchor": "-amp-amp-and-",
              "title": "&& (and)"
            },
            {
              "anchor": "-or-",
              "title": "|| (or)"
            },
            {
              "anchor": "-not-",
              "title": "! (not)"
            }
          ]
        },
        {
          "title": "Bitwise operators - Language syntax",
          "dir": "language-syntax",
          "file": "bitwise-operators",
          "subsections": [
            {
              "anchor": "-amp-bitwise-and-",
              "title": "& (bitwise and)"
            },
            {
              "anchor": "-bitwise-or-",
              "title": "| (bitwise or)"
            },
            {
              "anchor": "-bitwise-xor-",
              "title": "^ (bitwise xor)"
            },
            {
              "anchor": "-bitwise-not-",
              "title": "~ (bitwise not)"
            },
            {
              "anchor": "bitwise-shift",
              "title": "bitwise shift"
            }
          ]
        },
        {
          "title": "Compound operators - Language syntax",
          "dir": "language-syntax",
          "file": "compound-operators",
          "subsections": [
            {
              "anchor": "-increment-decrement-",
              "title": "++ (increment), -- (decrement)"
            },
            {
              "anchor": "compound-arithmetic",
              "title": "compound arithmetic"
            },
            {
              "anchor": "-amp-compound-bitwise-and-",
              "title": "&= (compound bitwise and)"
            },
            {
              "anchor": "-compound-bitwise-or-",
              "title": "|= (compound bitwise or)"
            }
          ]
        },
        {
          "title": "Variables - Language syntax",
          "dir": "language-syntax",
          "file": "variables",
          "subsections": [
            {
              "anchor": "high-low",
              "title": "HIGH | LOW"
            },
            {
              "anchor": "input-output-input_pullup-input_pulldown",
              "title": "INPUT, OUTPUT, INPUT_PULLUP, INPUT_PULLDOWN"
            },
            {
              "anchor": "true-false",
              "title": "true | false"
            }
          ]
        },
        {
          "title": "Data types - Language syntax",
          "dir": "language-syntax",
          "file": "data-types",
          "subsections": [
            {
              "anchor": "void",
              "title": "void"
            },
            {
              "anchor": "boolean",
              "title": "boolean"
            },
            {
              "anchor": "char",
              "title": "char"
            },
            {
              "anchor": "unsigned-char",
              "title": "unsigned char"
            },
            {
              "anchor": "byte",
              "title": "byte"
            },
            {
              "anchor": "int",
              "title": "int"
            },
            {
              "anchor": "unsigned-int",
              "title": "unsigned int"
            },
            {
              "anchor": "word",
              "title": "word"
            },
            {
              "anchor": "long",
              "title": "long"
            },
            {
              "anchor": "unsigned-long",
              "title": "unsigned long"
            },
            {
              "anchor": "short",
              "title": "short"
            },
            {
              "anchor": "float",
              "title": "float"
            },
            {
              "anchor": "double",
              "title": "double"
            },
            {
              "anchor": "string-char-array",
              "title": "string - char array"
            },
            {
              "anchor": "string-object",
              "title": "String - object"
            },
            {
              "anchor": "array",
              "title": "array"
            }
          ]
        },
        {
          "title": "Exceptions - Language syntax",
          "dir": "language-syntax",
          "file": "exceptions"
        }
      ]
    },
    {
      "title": "LED Signaling",
      "dir": "led-signaling",
      "collapse": true,
      "subsections": [
        {
          "title": "LED Signaling",
          "dir": "led-signaling",
          "file": "led-signaling"
        },
        {
          "title": "LEDStatus Class - LED Signaling",
          "dir": "led-signaling",
          "file": "ledstatus-class",
          "subsections": [
            {
              "anchor": "ledstatus-",
              "title": "LEDStatus()"
            },
            {
              "anchor": "setcolor-",
              "title": "setColor()"
            },
            {
              "anchor": "color-",
              "title": "color()"
            },
            {
              "anchor": "setpattern-",
              "title": "setPattern()"
            },
            {
              "anchor": "pattern-",
              "title": "pattern()"
            },
            {
              "anchor": "setspeed-",
              "title": "setSpeed()"
            },
            {
              "anchor": "setperiod-",
              "title": "setPeriod()"
            },
            {
              "anchor": "period-",
              "title": "period()"
            },
            {
              "anchor": "setpriority-",
              "title": "setPriority()"
            },
            {
              "anchor": "priority-",
              "title": "priority()"
            },
            {
              "anchor": "on-",
              "title": "on()"
            },
            {
              "anchor": "off-",
              "title": "off()"
            },
            {
              "anchor": "toggle-",
              "title": "toggle()"
            },
            {
              "anchor": "ison-",
              "title": "isOn()"
            },
            {
              "anchor": "isoff-",
              "title": "isOff()"
            },
            {
              "anchor": "setactive-",
              "title": "setActive()"
            },
            {
              "anchor": "isactive-",
              "title": "isActive()"
            },
            {
              "anchor": "custom-patterns",
              "title": "Custom patterns"
            }
          ]
        },
        {
          "title": "LEDSystemTheme Class - LED Signaling",
          "dir": "led-signaling",
          "file": "ledsystemtheme-class",
          "subsections": [
            {
              "anchor": "ledsystemtheme-",
              "title": "LEDSystemTheme()"
            },
            {
              "anchor": "setcolor-",
              "title": "setColor()"
            },
            {
              "anchor": "color-",
              "title": "color()"
            },
            {
              "anchor": "setpattern-",
              "title": "setPattern()"
            },
            {
              "anchor": "pattern-",
              "title": "pattern()"
            },
            {
              "anchor": "setspeed-",
              "title": "setSpeed()"
            },
            {
              "anchor": "setperiod-",
              "title": "setPeriod()"
            },
            {
              "anchor": "period-",
              "title": "period()"
            },
            {
              "anchor": "setsignal-",
              "title": "setSignal()"
            },
            {
              "anchor": "apply-",
              "title": "apply()"
            },
            {
              "anchor": "restoredefault-",
              "title": "restoreDefault()"
            }
          ]
        },
        {
          "title": "LEDSignal Enum - LED Signaling",
          "dir": "led-signaling",
          "file": "ledsignal-enum"
        },
        {
          "title": "LEDPriority enum - LED Signaling",
          "dir": "led-signaling",
          "file": "ledpriority-enum"
        },
        {
          "title": "LEDPattern enum - LED Signaling",
          "dir": "led-signaling",
          "file": "ledpattern-enum"
        },
        {
          "title": "LEDSpeed enum - LED Signaling",
          "dir": "led-signaling",
          "file": "ledspeed-enum"
        },
        {
          "title": "RGB Colors - LED Signaling",
          "dir": "led-signaling",
          "file": "rgb-colors"
        }
      ]
    },
    {
      "title": "Ledger",
      "dir": "ledger",
      "collapse": true,
      "subsections": [
        {
          "title": "Ledger",
          "dir": "ledger",
          "file": "ledger"
        },
        {
          "title": "set() [Ledger class] - Ledger",
          "dir": "ledger",
          "file": "set-ledger-class"
        },
        {
          "title": "SetMode [Ledger class] - Ledger",
          "dir": "ledger",
          "file": "setmode-ledger-class"
        },
        {
          "title": "Ledger synchronization - Ledger",
          "dir": "ledger",
          "file": "ledger-synchronization"
        },
        {
          "title": "get() [Ledger class] - Ledger",
          "dir": "ledger",
          "file": "get-ledger-class"
        },
        {
          "title": "lastUpdated() [Ledger class] - Ledger",
          "dir": "ledger",
          "file": "lastupdated-ledger-class"
        },
        {
          "title": "lastSynced() [Ledger class] - Ledger",
          "dir": "ledger",
          "file": "lastsynced-ledger-class"
        },
        {
          "title": "dataSize [Ledger class] - Ledger",
          "dir": "ledger",
          "file": "datasize-ledger-class"
        },
        {
          "title": "name() [Ledger class] - Ledger",
          "dir": "ledger",
          "file": "name-ledger-class"
        },
        {
          "title": "scope() [Ledger class] - Ledger",
          "dir": "ledger",
          "file": "scope-ledger-class"
        },
        {
          "title": "LedgerScope [Ledger class] - Ledger",
          "dir": "ledger",
          "file": "ledgerscope-ledger-class"
        },
        {
          "title": "isWritable() [Ledger class] - Ledger",
          "dir": "ledger",
          "file": "iswritable-ledger-class"
        },
        {
          "title": "onSync(OnSyncCallback) [Ledger class] - Ledger",
          "dir": "ledger",
          "file": "onsync-onsynccallback-ledger-class"
        },
        {
          "title": "onSync(OnSyncFunction) [Ledger class] - Ledger",
          "dir": "ledger",
          "file": "onsync-onsyncfunction-ledger-class"
        },
        {
          "title": "remove() [Ledger class] - Ledger",
          "dir": "ledger",
          "file": "remove-ledger-class"
        },
        {
          "title": "removeAll() [Ledger class] - Ledger",
          "dir": "ledger",
          "file": "removeall-ledger-class"
        }
      ]
    },
    {
      "title": "LedgerData",
      "dir": "ledgerdata",
      "collapse": true,
      "subsections": [
        {
          "title": "LedgerData",
          "dir": "ledgerdata",
          "file": "ledgerdata"
        },
        {
          "title": "constructor (Variant) [LedgerData class] - LedgerData",
          "dir": "ledgerdata",
          "file": "constructor-variant-ledgerdata-class"
        },
        {
          "title": "constructor (std::initializer_list<Entry>) [LedgerData class] - LedgerData",
          "dir": "ledgerdata",
          "file": "constructor-std-initializer_list-ledgerdata-class"
        },
        {
          "title": "set() [LedgerData class] - LedgerData",
          "dir": "ledgerdata",
          "file": "set-ledgerdata-class"
        },
        {
          "title": "remove() [LedgerData class] - LedgerData",
          "dir": "ledgerdata",
          "file": "remove-ledgerdata-class"
        },
        {
          "title": "get() [LedgerData class] - LedgerData",
          "dir": "ledgerdata",
          "file": "get-ledgerdata-class"
        },
        {
          "title": "operator[name] [LedgerData class] - LedgerData",
          "dir": "ledgerdata",
          "file": "operator-name-ledgerdata-class"
        },
        {
          "title": "has() [LedgerData class] - LedgerData",
          "dir": "ledgerdata",
          "file": "has-ledgerdata-class"
        },
        {
          "title": "isEmpty() [LedgerData class] - LedgerData",
          "dir": "ledgerdata",
          "file": "isempty-ledgerdata-class"
        }
      ]
    },
    {
      "title": "Logging",
      "dir": "logging",
      "collapse": true,
      "subsections": [
        {
          "title": "Logging",
          "dir": "logging",
          "file": "logging"
        },
        {
          "title": "Logging levels - Logging",
          "dir": "logging",
          "file": "logging-levels"
        },
        {
          "title": "Logging categories - Logging",
          "dir": "logging",
          "file": "logging-categories"
        },
        {
          "title": "Additional attributes - Logging",
          "dir": "logging",
          "file": "additional-attributes"
        },
        {
          "title": "Log handlers - Logging",
          "dir": "logging",
          "file": "log-handlers",
          "subsections": [
            {
              "anchor": "community-log-handlers",
              "title": "Community log handlers"
            }
          ]
        },
        {
          "title": "Logger class - Logging",
          "dir": "logging",
          "file": "logger-class"
        }
      ]
    },
    {
      "title": "Low level input/output",
      "dir": "low-level-input-output",
      "collapse": true,
      "subsections": [
        {
          "title": "Low level input/output",
          "dir": "low-level-input-output",
          "file": "low-level-input-output"
        },
        {
          "title": "pinSetFast() - Low level input/output",
          "dir": "low-level-input-output",
          "file": "pinsetfast"
        },
        {
          "title": "pinResetFast() - Low level input/output",
          "dir": "low-level-input-output",
          "file": "pinresetfast"
        },
        {
          "title": "digitalWriteFast() - Low level input/output",
          "dir": "low-level-input-output",
          "file": "digitalwritefast"
        },
        {
          "title": "pinReadFast() - Low level input/output",
          "dir": "low-level-input-output",
          "file": "pinreadfast"
        }
      ]
    },
    {
      "title": "Macros",
      "dir": "macros",
      "collapse": true,
      "subsections": [
        {
          "title": "STARTUP() - Macros",
          "dir": "macros",
          "file": "startup"
        },
        {
          "title": "PRODUCT_VERSION() - Macros",
          "dir": "macros",
          "file": "product_version"
        },
        {
          "title": "PRODUCT_ID() - Macros",
          "dir": "macros",
          "file": "product_id",
          "subsections": [
            {
              "anchor": "device-os-4-0-and-later",
              "title": "Device OS 4.0 and later"
            },
            {
              "anchor": "device-os-before-3-x-and-earlier",
              "title": "Device OS before 3.x and earlier"
            },
            {
              "anchor": "device-os-1-5-3-to-3-x-wildcard",
              "title": "Device OS 1.5.3 to 3.x Wildcard"
            }
          ]
        }
      ]
    },
    {
      "title": "Map",
      "dir": "map",
      "collapse": true,
      "subsections": [
        {
          "title": "Map",
          "dir": "map",
          "file": "map"
        },
        {
          "title": "Map() [Map template] - Map",
          "dir": "map",
          "file": "map-map-template"
        },
        {
          "title": "Map(std::initializer_list<Entry> entries) [Map template] - Map",
          "dir": "map",
          "file": "map-std-initializer_list-entries-map-template"
        },
        {
          "title": "Map(const Map&amp; map) [Map template] - Map",
          "dir": "map",
          "file": "map-const-map-amp-map-map-template"
        },
        {
          "title": "set(const T&amp; key, ValueT val) [Map template] - Map",
          "dir": "map",
          "file": "set-const-t-amp-key-valuet-val-map-template"
        },
        {
          "title": "get(const T&amp; key) [Map template] - Map",
          "dir": "map",
          "file": "get-const-t-amp-key-map-template"
        },
        {
          "title": "get(const T&amp; key, const ValueT&amp; defaultVal) [Map template] - Map",
          "dir": "map",
          "file": "get-const-t-amp-key-const-valuet-amp-defaultval-map-template"
        },
        {
          "title": "has(const T&amp; key) [Map template] - Map",
          "dir": "map",
          "file": "has-const-t-amp-key-map-template"
        },
        {
          "title": "find(const T&amp; key) [Map template] - Map",
          "dir": "map",
          "file": "find-const-t-amp-key-map-template"
        },
        {
          "title": "begin() [Map template] - Map",
          "dir": "map",
          "file": "begin-map-template"
        },
        {
          "title": "end() [Map template] - Map",
          "dir": "map",
          "file": "end-map-template"
        },
        {
          "title": "erase(ConstIterator pos) [Map template] - Map",
          "dir": "map",
          "file": "erase-constiterator-pos-map-template"
        },
        {
          "title": "remove(const T&amp; key) [Map template] - Map",
          "dir": "map",
          "file": "remove-const-t-amp-key-map-template"
        },
        {
          "title": "clear() [Map template] - Map",
          "dir": "map",
          "file": "clear-map-template"
        },
        {
          "title": "size() [Map template] - Map",
          "dir": "map",
          "file": "size-map-template"
        },
        {
          "title": "isEmpty() [Map template] - Map",
          "dir": "map",
          "file": "isempty-map-template"
        },
        {
          "title": "operator[] (key) [Map template] - Map",
          "dir": "map",
          "file": "operator-key-map-template"
        }
      ]
    },
    {
      "title": "Math",
      "dir": "math",
      "collapse": true,
      "subsections": [
        {
          "title": "Math",
          "dir": "math",
          "file": "math"
        },
        {
          "title": "min() - Math",
          "dir": "math",
          "file": "min"
        },
        {
          "title": "max() - Math",
          "dir": "math",
          "file": "max"
        },
        {
          "title": "abs() - Math",
          "dir": "math",
          "file": "abs"
        },
        {
          "title": "constrain() - Math",
          "dir": "math",
          "file": "constrain"
        },
        {
          "title": "map() [value tranformation] - Math",
          "dir": "math",
          "file": "map-value-tranformation"
        },
        {
          "title": "pow() - Math",
          "dir": "math",
          "file": "pow"
        },
        {
          "title": "sqrt() - Math",
          "dir": "math",
          "file": "sqrt"
        }
      ]
    },
    {
      "title": "Memory",
      "dir": "memory",
      "collapse": true,
      "subsections": [
        {
          "title": "Memory",
          "dir": "memory",
          "file": "memory"
        },
        {
          "title": "Stack - Memory",
          "dir": "memory",
          "file": "stack"
        }
      ]
    },
    {
      "title": "Mouse",
      "dir": "mouse",
      "collapse": true,
      "subsections": [
        {
          "title": "Mouse",
          "dir": "mouse",
          "file": "mouse"
        },
        {
          "title": "begin() - Mouse",
          "dir": "mouse",
          "file": "begin"
        },
        {
          "title": "end() - Mouse",
          "dir": "mouse",
          "file": "end"
        },
        {
          "title": "move() - Mouse",
          "dir": "mouse",
          "file": "move"
        },
        {
          "title": "moveTo() - Mouse",
          "dir": "mouse",
          "file": "moveto"
        },
        {
          "title": "scroll() - Mouse",
          "dir": "mouse",
          "file": "scroll"
        },
        {
          "title": "click() - Mouse",
          "dir": "mouse",
          "file": "click"
        },
        {
          "title": "press() - Mouse",
          "dir": "mouse",
          "file": "press"
        },
        {
          "title": "release() - Mouse",
          "dir": "mouse",
          "file": "release"
        },
        {
          "title": "isPressed() - Mouse",
          "dir": "mouse",
          "file": "ispressed"
        },
        {
          "title": "screenSize() - Mouse",
          "dir": "mouse",
          "file": "screensize"
        },
        {
          "title": "enableMoveTo() - Mouse",
          "dir": "mouse",
          "file": "enablemoveto"
        }
      ]
    },
    {
      "title": "Network",
      "dir": "network",
      "collapse": true,
      "subsections": [
        {
          "title": "Network",
          "dir": "network",
          "file": "network"
        },
        {
          "title": "on() [Network] - Network",
          "dir": "network",
          "file": "on-network"
        },
        {
          "title": "off() [Network] - Network",
          "dir": "network",
          "file": "off-network"
        },
        {
          "title": "connect() [Network] - Network",
          "dir": "network",
          "file": "connect-network"
        },
        {
          "title": "disconnect() [Network] - Network",
          "dir": "network",
          "file": "disconnect-network"
        },
        {
          "title": "connecting() [Network] - Network",
          "dir": "network",
          "file": "connecting-network"
        },
        {
          "title": "ready() [Network] - Network",
          "dir": "network",
          "file": "ready-network"
        },
        {
          "title": "setConfig() [Network] - Network",
          "dir": "network",
          "file": "setconfig-network"
        },
        {
          "title": "getConfig() [Network] - Network",
          "dir": "network",
          "file": "getconfig-network"
        },
        {
          "title": "prefer() [Network] - Network",
          "dir": "network",
          "file": "prefer-network"
        },
        {
          "title": "isPreferred() [Network] - Network",
          "dir": "network",
          "file": "ispreferred-network"
        },
        {
          "title": "listen() [Network] - Network",
          "dir": "network",
          "file": "listen-network"
        },
        {
          "title": "listening() [Network] - Network",
          "dir": "network",
          "file": "listening-network"
        },
        {
          "title": "setListenTimeout() [Network] - Network",
          "dir": "network",
          "file": "setlistentimeout-network"
        },
        {
          "title": "getListenTimeout() [Network] - Network",
          "dir": "network",
          "file": "getlistentimeout-network"
        },
        {
          "title": "NetworkInterfaceConfig - Network",
          "dir": "network",
          "file": "networkinterfaceconfig",
          "subsections": [
            {
              "anchor": "networkinterfaceconfig-source",
              "title": "NetworkInterfaceConfig::source"
            },
            {
              "anchor": "networkinterfaceconfig-address",
              "title": "NetworkInterfaceConfig::address"
            },
            {
              "anchor": "networkinterfaceconfig-gateway",
              "title": "NetworkInterfaceConfig::gateway"
            },
            {
              "anchor": "networkinterfaceconfig-dns",
              "title": "NetworkInterfaceConfig::dns"
            }
          ]
        }
      ]
    },
    {
      "title": "NFC",
      "dir": "nfc",
      "collapse": true,
      "subsections": [
        {
          "title": "NFC",
          "dir": "nfc",
          "file": "nfc"
        },
        {
          "title": "Example app - NFC",
          "dir": "nfc",
          "file": "example-app"
        },
        {
          "title": "NFC.on() - NFC",
          "dir": "nfc",
          "file": "nfc-on"
        },
        {
          "title": "NFC.off() - NFC",
          "dir": "nfc",
          "file": "nfc-off"
        },
        {
          "title": "NFC.update() - NFC",
          "dir": "nfc",
          "file": "nfc-update"
        },
        {
          "title": "NFC.setText() - NFC",
          "dir": "nfc",
          "file": "nfc-settext"
        },
        {
          "title": "NFC.setUri() - NFC",
          "dir": "nfc",
          "file": "nfc-seturi"
        },
        {
          "title": "NFC.setLaunchApp() - NFC",
          "dir": "nfc",
          "file": "nfc-setlaunchapp"
        },
        {
          "title": "NFC.setCustomData() - NFC",
          "dir": "nfc",
          "file": "nfc-setcustomdata"
        },
        {
          "title": "Record (NFC) - NFC",
          "dir": "nfc",
          "file": "record-nfc",
          "subsections": [
            {
              "anchor": "settnf-",
              "title": "setTnf();"
            },
            {
              "anchor": "settype-",
              "title": "setType()"
            },
            {
              "anchor": "setid-",
              "title": "setId()"
            },
            {
              "anchor": "setpayload-",
              "title": "setPayload()"
            }
          ]
        }
      ]
    },
    {
      "title": "OTA Updates",
      "dir": "ota-updates",
      "collapse": true,
      "subsections": [
        {
          "title": "OTA Updates",
          "dir": "ota-updates",
          "file": "ota-updates"
        },
        {
          "title": "Controlling OTA availability - OTA Updates",
          "dir": "ota-updates",
          "file": "controlling-ota-availability"
        },
        {
          "title": "System.disableUpdates() - OTA Updates",
          "dir": "ota-updates",
          "file": "system-disableupdates"
        },
        {
          "title": "System.enableUpdates() - OTA Updates",
          "dir": "ota-updates",
          "file": "system-enableupdates"
        },
        {
          "title": "System.updatesEnabled() - OTA Updates",
          "dir": "ota-updates",
          "file": "system-updatesenabled"
        },
        {
          "title": "System.updatesPending() - OTA Updates",
          "dir": "ota-updates",
          "file": "system-updatespending"
        },
        {
          "title": "System.updatesForced() - OTA Updates",
          "dir": "ota-updates",
          "file": "system-updatesforced"
        }
      ]
    },
    {
      "title": "Other functions",
      "dir": "other-functions",
      "collapse": true,
      "subsections": [
        {
          "title": "Other functions",
          "dir": "other-functions",
          "file": "other-functions"
        },
        {
          "title": "sprintf - Other functions",
          "dir": "other-functions",
          "file": "sprintf"
        },
        {
          "title": "sscanf - Other functions",
          "dir": "other-functions",
          "file": "sscanf"
        }
      ]
    },
    {
      "title": "Persistent settings",
      "dir": "persistent-settings",
      "collapse": true,
      "subsections": [
        {
          "title": "Persistent settings",
          "dir": "persistent-settings",
          "file": "persistent-settings"
        }
      ]
    },
    {
      "title": "PMIC (Power Management IC)",
      "dir": "pmic-power-management-ic",
      "collapse": true,
      "subsections": [
        {
          "title": "PMIC (Power Management IC)",
          "dir": "pmic-power-management-ic",
          "file": "pmic-power-management-ic"
        },
        {
          "title": "PMIC() constructor - PMIC (Power Management IC)",
          "dir": "pmic-power-management-ic",
          "file": "pmic-constructor"
        },
        {
          "title": "begin() - PMIC (Power Management IC)",
          "dir": "pmic-power-management-ic",
          "file": "begin"
        },
        {
          "title": "getVersion() - PMIC (Power Management IC)",
          "dir": "pmic-power-management-ic",
          "file": "getversion"
        },
        {
          "title": "getSystemStatus() - PMIC (Power Management IC)",
          "dir": "pmic-power-management-ic",
          "file": "getsystemstatus"
        },
        {
          "title": "getFault() - PMIC (Power Management IC)",
          "dir": "pmic-power-management-ic",
          "file": "getfault"
        },
        {
          "title": "lock() - PMIC (Power Management IC)",
          "dir": "pmic-power-management-ic",
          "file": "lock"
        },
        {
          "title": "unlock() - PMIC (Power Management IC)",
          "dir": "pmic-power-management-ic",
          "file": "unlock"
        },
        {
          "title": "Input source control register - PMIC (Power Management IC)",
          "dir": "pmic-power-management-ic",
          "file": "input-source-control-register",
          "subsections": [
            {
              "anchor": "readinputsourceregister-",
              "title": "readInputSourceRegister()"
            },
            {
              "anchor": "enablebuck-",
              "title": "enableBuck()"
            },
            {
              "anchor": "disablebuck-",
              "title": "disableBuck()"
            },
            {
              "anchor": "setinputcurrentlimit-",
              "title": "setInputCurrentLimit()"
            },
            {
              "anchor": "getinputcurrentlimit-",
              "title": "getInputCurrentLimit()"
            },
            {
              "anchor": "setinputvoltagelimit-",
              "title": "setInputVoltageLimit()"
            },
            {
              "anchor": "getinputvoltagelimit-",
              "title": "getInputVoltageLimit()"
            }
          ]
        },
        {
          "title": "Power on configuration reg - PMIC (Power Management IC)",
          "dir": "pmic-power-management-ic",
          "file": "power-on-configuration-reg",
          "subsections": [
            {
              "anchor": "enablecharging-",
              "title": "enableCharging()"
            },
            {
              "anchor": "disablecharging-",
              "title": "disableCharging()"
            },
            {
              "anchor": "enableotg-",
              "title": "enableOTG()"
            },
            {
              "anchor": "disableotg-",
              "title": "disableOTG()"
            },
            {
              "anchor": "resetwatchdog-",
              "title": "resetWatchdog()"
            },
            {
              "anchor": "setminimumsystemvoltage-",
              "title": "setMinimumSystemVoltage()"
            },
            {
              "anchor": "getminimumsystemvoltage-",
              "title": "getMinimumSystemVoltage()"
            },
            {
              "anchor": "readpoweronregister-",
              "title": "readPowerONRegister()"
            }
          ]
        },
        {
          "title": "Charge current control reg - PMIC (Power Management IC)",
          "dir": "pmic-power-management-ic",
          "file": "charge-current-control-reg",
          "subsections": [
            {
              "anchor": "setchargecurrent-",
              "title": "setChargeCurrent()"
            },
            {
              "anchor": "getchargecurrent-",
              "title": "getChargeCurrent()"
            }
          ]
        },
        {
          "title": "Precharge/termination current control reg - PMIC (Power Management IC)",
          "dir": "pmic-power-management-ic",
          "file": "precharge-termination-current-control-reg",
          "subsections": [
            {
              "anchor": "setprechargecurrent-",
              "title": "setPreChargeCurrent()"
            },
            {
              "anchor": "getprechargecurrent-",
              "title": "getPreChargeCurrent()"
            },
            {
              "anchor": "settermchargecurrent-",
              "title": "setTermChargeCurrent()"
            },
            {
              "anchor": "gettermchargecurrent-",
              "title": "getTermChargeCurrent()"
            }
          ]
        },
        {
          "title": "Charge voltage control reg - PMIC (Power Management IC)",
          "dir": "pmic-power-management-ic",
          "file": "charge-voltage-control-reg",
          "subsections": [
            {
              "anchor": "setchargevoltage-",
              "title": "setChargeVoltage()"
            },
            {
              "anchor": "getchargevoltagevalue-",
              "title": "getChargeVoltageValue()"
            },
            {
              "anchor": "getchargevoltage-",
              "title": "getChargeVoltage()"
            }
          ]
        },
        {
          "title": "Charge timer control reg - PMIC (Power Management IC)",
          "dir": "pmic-power-management-ic",
          "file": "charge-timer-control-reg",
          "subsections": [
            {
              "anchor": "readchargetermregister-",
              "title": "readChargeTermRegister()"
            },
            {
              "anchor": "disablewatchdog-",
              "title": "disableWatchdog()"
            },
            {
              "anchor": "setwatchdog-",
              "title": "setWatchdog()"
            }
          ]
        },
        {
          "title": "Thermal regulation control reg - PMIC (Power Management IC)",
          "dir": "pmic-power-management-ic",
          "file": "thermal-regulation-control-reg",
          "subsections": [
            {
              "anchor": "setthermalregulation-",
              "title": "setThermalRegulation()"
            },
            {
              "anchor": "getthermalregulation-",
              "title": "getThermalRegulation()"
            }
          ]
        },
        {
          "title": "Misc operation control reg - PMIC (Power Management IC)",
          "dir": "pmic-power-management-ic",
          "file": "misc-operation-control-reg",
          "subsections": [
            {
              "anchor": "readopcontrolregister-",
              "title": "readOpControlRegister()"
            },
            {
              "anchor": "enabledpdm-",
              "title": "enableDPDM()"
            },
            {
              "anchor": "disabledpdm-",
              "title": "disableDPDM()"
            },
            {
              "anchor": "enablebatfet-",
              "title": "enableBATFET()"
            },
            {
              "anchor": "disablebatfet-",
              "title": "disableBATFET()"
            },
            {
              "anchor": "safetytimer-",
              "title": "safetyTimer()"
            },
            {
              "anchor": "enablechargefaultint-",
              "title": "enableChargeFaultINT()"
            },
            {
              "anchor": "disablechargefaultint-",
              "title": "disableChargeFaultINT()"
            },
            {
              "anchor": "enablebatfaultint-",
              "title": "enableBatFaultINT()"
            },
            {
              "anchor": "disablebatfaultint-",
              "title": "disableBatFaultINT()"
            }
          ]
        },
        {
          "title": "System status register - PMIC (Power Management IC)",
          "dir": "pmic-power-management-ic",
          "file": "system-status-register",
          "subsections": [
            {
              "anchor": "getvbusstat-",
              "title": "getVbusStat()"
            },
            {
              "anchor": "getchargingstat-",
              "title": "getChargingStat()"
            },
            {
              "anchor": "getdpmstat-",
              "title": "getDPMStat()"
            },
            {
              "anchor": "ispowergood-",
              "title": "isPowerGood()"
            },
            {
              "anchor": "ishot-",
              "title": "isHot()"
            },
            {
              "anchor": "getvsysstat-",
              "title": "getVsysStat()"
            }
          ]
        }
      ]
    },
    {
      "title": "Power manager",
      "dir": "power-manager",
      "collapse": true,
      "subsections": [
        {
          "title": "Power manager",
          "dir": "power-manager",
          "file": "power-manager"
        },
        {
          "title": "powerSourceMaxCurrent - Power manager",
          "dir": "power-manager",
          "file": "powersourcemaxcurrent"
        },
        {
          "title": "powerSourceMinVoltage - Power manager",
          "dir": "power-manager",
          "file": "powersourceminvoltage"
        },
        {
          "title": "batteryChargeCurrent - Power manager",
          "dir": "power-manager",
          "file": "batterychargecurrent"
        },
        {
          "title": "batteryChargeVoltage - Power manager",
          "dir": "power-manager",
          "file": "batterychargevoltage"
        },
        {
          "title": "SystemPowerFeature - Power manager",
          "dir": "power-manager",
          "file": "systempowerfeature",
          "subsections": [
            {
              "anchor": "systempowerfeature-pmic_detection",
              "title": "SystemPowerFeature::PMIC_DETECTION"
            },
            {
              "anchor": "systempowerfeature-use_vin_settings_with_usb_host",
              "title": "SystemPowerFeature::USE_VIN_SETTINGS_WITH_USB_HOST"
            },
            {
              "anchor": "systempowerfeature-disable_charging",
              "title": "SystemPowerFeature::DISABLE_CHARGING"
            },
            {
              "anchor": "systempowerfeature-disable",
              "title": "SystemPowerFeature::DISABLE"
            }
          ]
        },
        {
          "title": "B-Series SoM - Power manager",
          "dir": "power-manager",
          "file": "b-series-som"
        }
      ]
    },
    {
      "title": "Preprocessor",
      "dir": "preprocessor",
      "collapse": true,
      "subsections": [
        {
          "title": "Preprocessor",
          "dir": "preprocessor",
          "file": "preprocessor"
        }
      ]
    },
    {
      "title": "Random numbers",
      "dir": "random-numbers",
      "collapse": true,
      "subsections": [
        {
          "title": "Random numbers",
          "dir": "random-numbers",
          "file": "random-numbers"
        },
        {
          "title": "random() - Random numbers",
          "dir": "random-numbers",
          "file": "random"
        },
        {
          "title": "randomSeed() - Random numbers",
          "dir": "random-numbers",
          "file": "randomseed"
        },
        {
          "title": "HAL_RNG_GetRandomNumber() - Random numbers",
          "dir": "random-numbers",
          "file": "hal_rng_getrandomnumber"
        }
      ]
    },
    {
      "title": "Retained memory",
      "dir": "retained-memory",
      "collapse": true,
      "subsections": [
        {
          "title": "Retained memory",
          "dir": "retained-memory",
          "file": "retained-memory"
        },
        {
          "title": "Storing data in Backup RAM (SRAM) - Retained memory",
          "dir": "retained-memory",
          "file": "storing-data-in-backup-ram-sram"
        },
        {
          "title": "Dynamically allocated objects - Retained memory",
          "dir": "retained-memory",
          "file": "dynamically-allocated-objects"
        },
        {
          "title": "Retained data validation - Retained memory",
          "dir": "retained-memory",
          "file": "retained-data-validation"
        },
        {
          "title": "Enabling backup RAM (SRAM) - Retained memory",
          "dir": "retained-memory",
          "file": "enabling-backup-ram-sram"
        }
      ]
    },
    {
      "title": "RGB",
      "dir": "rgb",
      "collapse": true,
      "subsections": [
        {
          "title": "RGB",
          "dir": "rgb",
          "file": "rgb"
        },
        {
          "title": "control(user_control) - RGB",
          "dir": "rgb",
          "file": "control-user_control"
        },
        {
          "title": "controlled() - RGB",
          "dir": "rgb",
          "file": "controlled"
        },
        {
          "title": "color(red, green, blue) - RGB",
          "dir": "rgb",
          "file": "color-red-green-blue"
        },
        {
          "title": "brightness(val) - RGB",
          "dir": "rgb",
          "file": "brightness-val"
        },
        {
          "title": "brightness() - RGB",
          "dir": "rgb",
          "file": "brightness"
        },
        {
          "title": "onChange(handler) - RGB",
          "dir": "rgb",
          "file": "onchange-handler"
        },
        {
          "title": "mirrorTo() - RGB",
          "dir": "rgb",
          "file": "mirrorto"
        },
        {
          "title": "mirrorDisable() - RGB",
          "dir": "rgb",
          "file": "mirrordisable"
        }
      ]
    },
    {
      "title": "Serial",
      "dir": "serial",
      "collapse": true,
      "subsections": [
        {
          "title": "Serial",
          "dir": "serial",
          "file": "serial"
        },
        {
          "title": "begin() - Serial",
          "dir": "serial",
          "file": "begin"
        },
        {
          "title": "end() - Serial",
          "dir": "serial",
          "file": "end"
        },
        {
          "title": "available() - Serial",
          "dir": "serial",
          "file": "available"
        },
        {
          "title": "availableForWrite() - Serial",
          "dir": "serial",
          "file": "availableforwrite"
        },
        {
          "title": "acquireSerialBuffer() - Serial",
          "dir": "serial",
          "file": "acquireserialbuffer"
        },
        {
          "title": "acquireSerial1Buffer() - Serial",
          "dir": "serial",
          "file": "acquireserial1buffer"
        },
        {
          "title": "blockOnOverrun() - Serial",
          "dir": "serial",
          "file": "blockonoverrun"
        },
        {
          "title": "serialEvent() - Serial",
          "dir": "serial",
          "file": "serialevent"
        },
        {
          "title": "peek() - Serial",
          "dir": "serial",
          "file": "peek"
        },
        {
          "title": "write() - Serial",
          "dir": "serial",
          "file": "write"
        },
        {
          "title": "read() - Serial",
          "dir": "serial",
          "file": "read"
        },
        {
          "title": "print() - Serial",
          "dir": "serial",
          "file": "print"
        },
        {
          "title": "println() - Serial",
          "dir": "serial",
          "file": "println"
        },
        {
          "title": "printf() - Serial",
          "dir": "serial",
          "file": "printf"
        },
        {
          "title": "printlnf() - Serial",
          "dir": "serial",
          "file": "printlnf"
        },
        {
          "title": "flush() - Serial",
          "dir": "serial",
          "file": "flush"
        },
        {
          "title": "halfduplex() - Serial",
          "dir": "serial",
          "file": "halfduplex"
        },
        {
          "title": "isConnected() - Serial",
          "dir": "serial",
          "file": "isconnected"
        },
        {
          "title": "lock() - Serial",
          "dir": "serial",
          "file": "lock"
        },
        {
          "title": "unlock() - Serial",
          "dir": "serial",
          "file": "unlock"
        }
      ]
    },
    {
      "title": "Servo",
      "dir": "servo",
      "collapse": true,
      "subsections": [
        {
          "title": "Servo",
          "dir": "servo",
          "file": "servo"
        },
        {
          "title": "attach() - Servo",
          "dir": "servo",
          "file": "attach"
        },
        {
          "title": "write() - Servo",
          "dir": "servo",
          "file": "write"
        },
        {
          "title": "writeMicroseconds() - Servo",
          "dir": "servo",
          "file": "writemicroseconds"
        },
        {
          "title": "read() - Servo",
          "dir": "servo",
          "file": "read"
        },
        {
          "title": "attached() - Servo",
          "dir": "servo",
          "file": "attached"
        },
        {
          "title": "detach() - Servo",
          "dir": "servo",
          "file": "detach"
        },
        {
          "title": "setTrim() - Servo",
          "dir": "servo",
          "file": "settrim"
        }
      ]
    },
    {
      "title": "sleep() [ Classic API ]",
      "dir": "sleep-classic-api",
      "collapse": true,
      "subsections": [
        {
          "title": "sleep() [ Classic API ]",
          "dir": "sleep-classic-api",
          "file": "sleep-classic-api"
        },
        {
          "title": "Sleep [transitioning from classic API] - sleep() [ Classic API ]",
          "dir": "sleep-classic-api",
          "file": "sleep-transitioning-from-classic-api"
        },
        {
          "title": "SleepResult class - sleep() [ Classic API ]",
          "dir": "sleep-classic-api",
          "file": "sleepresult-class",
          "subsections": [
            {
              "anchor": "reason-",
              "title": "reason()"
            },
            {
              "anchor": "wokenupbypin-",
              "title": "wokenUpByPin()"
            },
            {
              "anchor": "wokenupbyrtc-",
              "title": "wokenUpByRtc()"
            },
            {
              "anchor": "rtc-",
              "title": "rtc()"
            },
            {
              "anchor": "pin-",
              "title": "pin()"
            },
            {
              "anchor": "error-",
              "title": "error()"
            }
          ]
        },
        {
          "title": "sleepResult() - sleep() [ Classic API ]",
          "dir": "sleep-classic-api",
          "file": "sleepresult"
        },
        {
          "title": "wakeUpReason() - sleep() [ Classic API ]",
          "dir": "sleep-classic-api",
          "file": "wakeupreason"
        },
        {
          "title": "wokenUpByPin() - sleep() [ Classic API ]",
          "dir": "sleep-classic-api",
          "file": "wokenupbypin"
        },
        {
          "title": "wokenUpByRtc() - sleep() [ Classic API ]",
          "dir": "sleep-classic-api",
          "file": "wokenupbyrtc"
        },
        {
          "title": "wakeUpPin() - sleep() [ Classic API ]",
          "dir": "sleep-classic-api",
          "file": "wakeuppin"
        },
        {
          "title": "sleepError() - sleep() [ Classic API ]",
          "dir": "sleep-classic-api",
          "file": "sleeperror"
        }
      ]
    },
    {
      "title": "sleep() [ Sleep ]",
      "dir": "sleep-sleep",
      "collapse": true,
      "subsections": [
        {
          "title": "sleep() [ Sleep ]",
          "dir": "sleep-sleep",
          "file": "sleep-sleep"
        },
        {
          "title": "mode() (SystemSleepConfiguration) - sleep() [ Sleep ]",
          "dir": "sleep-sleep",
          "file": "mode-systemsleepconfiguration"
        },
        {
          "title": "STOP (SystemSleepMode) - sleep() [ Sleep ]",
          "dir": "sleep-sleep",
          "file": "stop-systemsleepmode"
        },
        {
          "title": "ULTRA_LOW_POWER (SystemSleepMode) - sleep() [ Sleep ]",
          "dir": "sleep-sleep",
          "file": "ultra_low_power-systemsleepmode"
        },
        {
          "title": "HIBERNATE (SystemSleepMode) - sleep() [ Sleep ]",
          "dir": "sleep-sleep",
          "file": "hibernate-systemsleepmode"
        },
        {
          "title": "duration() (SystemSleepConfiguration) - sleep() [ Sleep ]",
          "dir": "sleep-sleep",
          "file": "duration-systemsleepconfiguration"
        },
        {
          "title": "gpio() (SystemSleepConfiguration) - sleep() [ Sleep ]",
          "dir": "sleep-sleep",
          "file": "gpio-systemsleepconfiguration"
        },
        {
          "title": "flag() (SystemSleepConfiguration) - sleep() [ Sleep ]",
          "dir": "sleep-sleep",
          "file": "flag-systemsleepconfiguration"
        },
        {
          "title": "network() (SystemSleepConfiguration) - sleep() [ Sleep ]",
          "dir": "sleep-sleep",
          "file": "network-systemsleepconfiguration"
        },
        {
          "title": "analog() (SystemSleepConfiguration) - sleep() [ Sleep ]",
          "dir": "sleep-sleep",
          "file": "analog-systemsleepconfiguration"
        },
        {
          "title": "usart (SystemSleepConfiguration) - sleep() [ Sleep ]",
          "dir": "sleep-sleep",
          "file": "usart-systemsleepconfiguration"
        },
        {
          "title": "ble() (SystemSleepConfiguration) - sleep() [ Sleep ]",
          "dir": "sleep-sleep",
          "file": "ble-systemsleepconfiguration"
        },
        {
          "title": "SystemSleepResult class - sleep() [ Sleep ]",
          "dir": "sleep-sleep",
          "file": "systemsleepresult-class",
          "subsections": [
            {
              "anchor": "wakeupreason-systemsleepresult-",
              "title": "wakeupReason() (SystemSleepResult)"
            },
            {
              "anchor": "wakeuppin-systemsleepresult-",
              "title": "wakeupPin() (SystemSleepResult)"
            },
            {
              "anchor": "error-systemsleepresult-",
              "title": "error() (SystemSleepResult)"
            },
            {
              "anchor": "tosleepresult-systemsleepresult-",
              "title": "toSleepResult() (SystemSleepResult)"
            }
          ]
        },
        {
          "title": "Sleep and GPIO outputs - sleep() [ Sleep ]",
          "dir": "sleep-sleep",
          "file": "sleep-and-gpio-outputs"
        }
      ]
    },
    {
      "title": "SoftAP HTTP pages",
      "dir": "softap-http-pages",
      "collapse": true,
      "subsections": [
        {
          "title": "SoftAP HTTP pages",
          "dir": "softap-http-pages",
          "file": "softap-http-pages"
        },
        {
          "title": "The page callback function - SoftAP HTTP pages",
          "dir": "softap-http-pages",
          "file": "the-page-callback-function"
        },
        {
          "title": "Retrieving the request data - SoftAP HTTP pages",
          "dir": "softap-http-pages",
          "file": "retrieving-the-request-data"
        },
        {
          "title": "Sending a response - SoftAP HTTP pages",
          "dir": "softap-http-pages",
          "file": "sending-a-response"
        },
        {
          "title": "The default page - SoftAP HTTP pages",
          "dir": "softap-http-pages",
          "file": "the-default-page"
        },
        {
          "title": "Sending a redirect - SoftAP HTTP pages",
          "dir": "softap-http-pages",
          "file": "sending-a-redirect"
        },
        {
          "title": "Complete example - SoftAP HTTP pages",
          "dir": "softap-http-pages",
          "file": "complete-example"
        }
      ]
    },
    {
      "title": "Software timers",
      "dir": "software-timers",
      "collapse": true,
      "subsections": [
        {
          "title": "Software timers",
          "dir": "software-timers",
          "file": "software-timers"
        },
        {
          "title": "Class member callbacks - Software timers",
          "dir": "software-timers",
          "file": "class-member-callbacks"
        },
        {
          "title": "start() - Software timers",
          "dir": "software-timers",
          "file": "start"
        },
        {
          "title": "stop() - Software timers",
          "dir": "software-timers",
          "file": "stop"
        },
        {
          "title": "changePeriod() - Software timers",
          "dir": "software-timers",
          "file": "changeperiod"
        },
        {
          "title": "reset() - Software timers",
          "dir": "software-timers",
          "file": "reset"
        },
        {
          "title": "startFromISR() - Software timers",
          "dir": "software-timers",
          "file": "startfromisr"
        },
        {
          "title": "stopFromISR() - Software timers",
          "dir": "software-timers",
          "file": "stopfromisr"
        },
        {
          "title": "resetFromISR() - Software timers",
          "dir": "software-timers",
          "file": "resetfromisr"
        },
        {
          "title": "changePeriodFromISR() - Software timers",
          "dir": "software-timers",
          "file": "changeperiodfromisr"
        },
        {
          "title": "dispose() - Software timers",
          "dir": "software-timers",
          "file": "dispose"
        },
        {
          "title": "isActive() - Software timers",
          "dir": "software-timers",
          "file": "isactive"
        }
      ]
    },
    {
      "title": "SPI",
      "dir": "spi",
      "collapse": true,
      "subsections": [
        {
          "title": "SPI",
          "dir": "spi",
          "file": "spi"
        },
        {
          "title": "begin() - SPI",
          "dir": "spi",
          "file": "begin"
        },
        {
          "title": "begin(SPI_Mode, uint16_t) - SPI",
          "dir": "spi",
          "file": "begin-spi_mode-uint16_t"
        },
        {
          "title": "end() - SPI",
          "dir": "spi",
          "file": "end"
        },
        {
          "title": "setBitOrder() - SPI",
          "dir": "spi",
          "file": "setbitorder"
        },
        {
          "title": "setClockSpeed - SPI",
          "dir": "spi",
          "file": "setclockspeed"
        },
        {
          "title": "setClockDividerReference - SPI",
          "dir": "spi",
          "file": "setclockdividerreference"
        },
        {
          "title": "setClockDivider() - SPI",
          "dir": "spi",
          "file": "setclockdivider"
        },
        {
          "title": "setDataMode() - SPI",
          "dir": "spi",
          "file": "setdatamode"
        },
        {
          "title": "transfer() - SPI",
          "dir": "spi",
          "file": "transfer"
        },
        {
          "title": "transfer(void\\*, void\\*, size_t, std::function) - SPI",
          "dir": "spi",
          "file": "transfer-void-void-size_t-std-function"
        },
        {
          "title": "transferCancel() - SPI",
          "dir": "spi",
          "file": "transfercancel"
        },
        {
          "title": "onSelect() - SPI",
          "dir": "spi",
          "file": "onselect"
        },
        {
          "title": "available() - SPI",
          "dir": "spi",
          "file": "available"
        },
        {
          "title": "SPISettings - SPI",
          "dir": "spi",
          "file": "spisettings"
        },
        {
          "title": "beginTransaction() - SPI",
          "dir": "spi",
          "file": "begintransaction"
        },
        {
          "title": "endTransaction() - SPI",
          "dir": "spi",
          "file": "endtransaction"
        }
      ]
    },
    {
      "title": "Stream class",
      "dir": "stream-class",
      "collapse": true,
      "subsections": [
        {
          "title": "Stream class",
          "dir": "stream-class",
          "file": "stream-class"
        },
        {
          "title": "setTimeout() - Stream class",
          "dir": "stream-class",
          "file": "settimeout"
        },
        {
          "title": "find() - Stream class",
          "dir": "stream-class",
          "file": "find"
        },
        {
          "title": "findUntil() - Stream class",
          "dir": "stream-class",
          "file": "finduntil"
        },
        {
          "title": "readBytes() - Stream class",
          "dir": "stream-class",
          "file": "readbytes"
        },
        {
          "title": "readBytesUntil() - Stream class",
          "dir": "stream-class",
          "file": "readbytesuntil"
        },
        {
          "title": "readString() - Stream class",
          "dir": "stream-class",
          "file": "readstring"
        },
        {
          "title": "readStringUntil() - Stream class",
          "dir": "stream-class",
          "file": "readstringuntil"
        },
        {
          "title": "parseInt() - Stream class",
          "dir": "stream-class",
          "file": "parseint"
        },
        {
          "title": "parseFloat() - Stream class",
          "dir": "stream-class",
          "file": "parsefloat"
        }
      ]
    },
    {
      "title": "String class",
      "dir": "string-class",
      "collapse": true,
      "subsections": [
        {
          "title": "String class",
          "dir": "string-class",
          "file": "string-class"
        },
        {
          "title": "String() - String class",
          "dir": "string-class",
          "file": "string"
        },
        {
          "title": "charAt() - String class",
          "dir": "string-class",
          "file": "charat"
        },
        {
          "title": "compareTo() - String class",
          "dir": "string-class",
          "file": "compareto"
        },
        {
          "title": "comparison operators (String) - String class",
          "dir": "string-class",
          "file": "comparison-operators-string"
        },
        {
          "title": "concat() - String class",
          "dir": "string-class",
          "file": "concat"
        },
        {
          "title": "Concatenation operators (String) - String class",
          "dir": "string-class",
          "file": "concatenation-operators-string"
        },
        {
          "title": "endsWith() - String class",
          "dir": "string-class",
          "file": "endswith"
        },
        {
          "title": "equals() - String class",
          "dir": "string-class",
          "file": "equals"
        },
        {
          "title": "Equality operators (String) - String class",
          "dir": "string-class",
          "file": "equality-operators-string"
        },
        {
          "title": "equalsIgnoreCase() - String class",
          "dir": "string-class",
          "file": "equalsignorecase"
        },
        {
          "title": "format() - String class",
          "dir": "string-class",
          "file": "format"
        },
        {
          "title": "getBytes() - String class",
          "dir": "string-class",
          "file": "getbytes"
        },
        {
          "title": "c_str() - String class",
          "dir": "string-class",
          "file": "c_str"
        },
        {
          "title": "indexOf() - String class",
          "dir": "string-class",
          "file": "indexof"
        },
        {
          "title": "lastIndexOf() - String class",
          "dir": "string-class",
          "file": "lastindexof"
        },
        {
          "title": "length() - String class",
          "dir": "string-class",
          "file": "length"
        },
        {
          "title": "remove() - String class",
          "dir": "string-class",
          "file": "remove"
        },
        {
          "title": "replace() - String class",
          "dir": "string-class",
          "file": "replace"
        },
        {
          "title": "reserve() - String class",
          "dir": "string-class",
          "file": "reserve"
        },
        {
          "title": "setCharAt() - String class",
          "dir": "string-class",
          "file": "setcharat"
        },
        {
          "title": "startsWith() - String class",
          "dir": "string-class",
          "file": "startswith"
        },
        {
          "title": "substring() - String class",
          "dir": "string-class",
          "file": "substring"
        },
        {
          "title": "toCharArray() - String class",
          "dir": "string-class",
          "file": "tochararray"
        },
        {
          "title": "toFloat() - String class",
          "dir": "string-class",
          "file": "tofloat"
        },
        {
          "title": "toInt() - String class",
          "dir": "string-class",
          "file": "toint"
        },
        {
          "title": "toLowerCase() - String class",
          "dir": "string-class",
          "file": "tolowercase"
        },
        {
          "title": "toUpperCase() - String class",
          "dir": "string-class",
          "file": "touppercase"
        },
        {
          "title": "trim() - String class",
          "dir": "string-class",
          "file": "trim"
        }
      ]
    },
    {
      "title": "System calls",
      "dir": "system-calls",
      "collapse": true,
      "subsections": [
        {
          "title": "version() - System calls",
          "dir": "system-calls",
          "file": "version"
        },
        {
          "title": "versionNumber() - System calls",
          "dir": "system-calls",
          "file": "versionnumber"
        },
        {
          "title": "buttonPushed() - System calls",
          "dir": "system-calls",
          "file": "buttonpushed"
        },
        {
          "title": "System cycle counter - System calls",
          "dir": "system-calls",
          "file": "system-cycle-counter",
          "subsections": [
            {
              "anchor": "ticks-",
              "title": "ticks()"
            },
            {
              "anchor": "tickspermicrosecond-",
              "title": "ticksPerMicrosecond();"
            },
            {
              "anchor": "ticksdelay-",
              "title": "ticksDelay()"
            }
          ]
        },
        {
          "title": "freeMemory() - System calls",
          "dir": "system-calls",
          "file": "freememory"
        },
        {
          "title": "reset() - System calls",
          "dir": "system-calls",
          "file": "reset"
        },
        {
          "title": "dfu() - System calls",
          "dir": "system-calls",
          "file": "dfu"
        },
        {
          "title": "enterSafeMode() - System calls",
          "dir": "system-calls",
          "file": "entersafemode"
        },
        {
          "title": "deviceID() - System calls",
          "dir": "system-calls",
          "file": "deviceid"
        },
        {
          "title": "System.millis() - System calls",
          "dir": "system-calls",
          "file": "system-millis"
        },
        {
          "title": "System.uptime() - System calls",
          "dir": "system-calls",
          "file": "system-uptime"
        },
        {
          "title": "powerSource() - System calls",
          "dir": "system-calls",
          "file": "powersource"
        },
        {
          "title": "batteryState() - System calls",
          "dir": "system-calls",
          "file": "batterystate"
        },
        {
          "title": "batteryCharge() - System calls",
          "dir": "system-calls",
          "file": "batterycharge"
        },
        {
          "title": "onAssetOta - System - System calls",
          "dir": "system-calls",
          "file": "onassetota-system"
        },
        {
          "title": "assetsHandled - System - System calls",
          "dir": "system-calls",
          "file": "assetshandled-system"
        },
        {
          "title": "assetsAvailable - System - System calls",
          "dir": "system-calls",
          "file": "assetsavailable-system"
        },
        {
          "title": "disableReset() - System calls",
          "dir": "system-calls",
          "file": "disablereset"
        },
        {
          "title": "enableReset() - System calls",
          "dir": "system-calls",
          "file": "enablereset"
        },
        {
          "title": "resetPending() - System calls",
          "dir": "system-calls",
          "file": "resetpending"
        },
        {
          "title": "Reset reason - System calls",
          "dir": "system-calls",
          "file": "reset-reason"
        },
        {
          "title": "backupRamSync - System calls",
          "dir": "system-calls",
          "file": "backupramsync"
        },
        {
          "title": "System config [ set ] - System calls",
          "dir": "system-calls",
          "file": "system-config-set"
        },
        {
          "title": "System flags [ disable ] - System calls",
          "dir": "system-calls",
          "file": "system-flags-disable"
        },
        {
          "title": "System.enableFeature - System calls",
          "dir": "system-calls",
          "file": "system-enablefeature"
        },
        {
          "title": "System.disableFeature - System calls",
          "dir": "system-calls",
          "file": "system-disablefeature"
        },
        {
          "title": "System.featureEnabled - System calls",
          "dir": "system-calls",
          "file": "system-featureenabled",
          "subsections": [
            {
              "anchor": "feature_disable_listening_mode",
              "title": "FEATURE_DISABLE_LISTENING_MODE"
            }
          ]
        },
        {
          "title": "System.setControlRequestFilter - System calls",
          "dir": "system-calls",
          "file": "system-setcontrolrequestfilter",
          "subsections": [
            {
              "anchor": "systemcontrolrequestaclaction",
              "title": "SystemControlRequestAclAction"
            },
            {
              "anchor": "systemcontrolrequestacl",
              "title": "SystemControlRequestAcl"
            },
            {
              "anchor": "ctrl_request_type",
              "title": "ctrl_request_type"
            }
          ]
        }
      ]
    },
    {
      "title": "System events",
      "dir": "system-events",
      "collapse": true,
      "subsections": [
        {
          "title": "System events",
          "dir": "system-events",
          "file": "system-events"
        },
        {
          "title": "System events overview - System events",
          "dir": "system-events",
          "file": "system-events-overview",
          "subsections": [
            {
              "anchor": "registering-multiple-events-with-the-same-handler",
              "title": "Registering multiple events with the same handler"
            }
          ]
        },
        {
          "title": "System events reference - System events",
          "dir": "system-events",
          "file": "system-events-reference",
          "subsections": [
            {
              "anchor": "network_credentials-16-param-values",
              "title": "network_credentials (16) param values"
            },
            {
              "anchor": "network_status-32-param-values",
              "title": "network_status (32) param values"
            },
            {
              "anchor": "cloud_status-64-parameter-values",
              "title": "cloud_status (64) parameter values"
            }
          ]
        },
        {
          "title": "firmware_update (256) parameter values - System events",
          "dir": "system-events",
          "file": "firmware_update-256-parameter-values",
          "subsections": [
            {
              "anchor": "time_changed-16384-param-values-param-values",
              "title": "time_changed (16384) param values param values"
            },
            {
              "anchor": "ble_prov_mode-param-values",
              "title": "ble_prov_mode param values"
            }
          ]
        }
      ]
    },
    {
      "title": "System interrupts",
      "dir": "system-interrupts",
      "collapse": true,
      "subsections": [
        {
          "title": "System interrupts",
          "dir": "system-interrupts",
          "file": "system-interrupts"
        },
        {
          "title": "attachSystemInterrupt() - System interrupts",
          "dir": "system-interrupts",
          "file": "attachsysteminterrupt"
        },
        {
          "title": "detachSystemInterrupt() - System interrupts",
          "dir": "system-interrupts",
          "file": "detachsysteminterrupt"
        },
        {
          "title": "attachInteruptDirect() - System interrupts",
          "dir": "system-interrupts",
          "file": "attachinteruptdirect"
        },
        {
          "title": "detachInterruptDirect() - System interrupts",
          "dir": "system-interrupts",
          "file": "detachinterruptdirect"
        },
        {
          "title": "buttonMirror() - System interrupts",
          "dir": "system-interrupts",
          "file": "buttonmirror"
        },
        {
          "title": "disableButtonMirror() - System interrupts",
          "dir": "system-interrupts",
          "file": "disablebuttonmirror"
        },
        {
          "title": "System features - System interrupts",
          "dir": "system-interrupts",
          "file": "system-features",
          "subsections": [
            {
              "anchor": "feature_retained_memory",
              "title": "FEATURE_RETAINED_MEMORY"
            },
            {
              "anchor": "feature_wifi_powersave_clock",
              "title": "FEATURE_WIFI_POWERSAVE_CLOCK"
            }
          ]
        }
      ]
    },
    {
      "title": "System modes",
      "dir": "system-modes",
      "collapse": true,
      "subsections": [
        {
          "title": "System modes",
          "dir": "system-modes",
          "file": "system-modes"
        },
        {
          "title": "Automatic mode - System modes",
          "dir": "system-modes",
          "file": "automatic-mode"
        },
        {
          "title": "Automatic mode (threading enabled) - System modes",
          "dir": "system-modes",
          "file": "automatic-mode-threading-enabled"
        },
        {
          "title": "Semi-automatic mode - System modes",
          "dir": "system-modes",
          "file": "semi-automatic-mode"
        },
        {
          "title": "Manual mode - System modes",
          "dir": "system-modes",
          "file": "manual-mode"
        }
      ]
    },
    {
      "title": "System thread",
      "dir": "system-thread",
      "collapse": true,
      "subsections": [
        {
          "title": "System thread",
          "dir": "system-thread",
          "file": "system-thread"
        },
        {
          "title": "System threading behavior - System thread",
          "dir": "system-thread",
          "file": "system-threading-behavior"
        },
        {
          "title": "System functions - System thread",
          "dir": "system-thread",
          "file": "system-functions"
        },
        {
          "title": "Task switching - System thread",
          "dir": "system-thread",
          "file": "task-switching"
        },
        {
          "title": "SINGLE_THREADED_BLOCK() - System thread",
          "dir": "system-thread",
          "file": "single_threaded_block"
        },
        {
          "title": "ATOMIC_BLOCK() - System thread",
          "dir": "system-thread",
          "file": "atomic_block"
        },
        {
          "title": "Synchronizing access to shared system resources - System thread",
          "dir": "system-thread",
          "file": "synchronizing-access-to-shared-system-resources"
        },
        {
          "title": "Waiting for the system - System thread",
          "dir": "system-thread",
          "file": "waiting-for-the-system",
          "subsections": [
            {
              "anchor": "waituntil-",
              "title": "waitUntil()"
            },
            {
              "anchor": "waituntilnot-",
              "title": "waitUntilNot()"
            },
            {
              "anchor": "waitfor-",
              "title": "waitFor()"
            },
            {
              "anchor": "waitfornot-",
              "title": "waitForNot()"
            }
          ]
        }
      ]
    },
    {
      "title": "TCPClient",
      "dir": "tcpclient",
      "collapse": true,
      "subsections": [
        {
          "title": "TCPClient",
          "dir": "tcpclient",
          "file": "tcpclient"
        },
        {
          "title": "connected() - TCPClient",
          "dir": "tcpclient",
          "file": "connected"
        },
        {
          "title": "status() - TCPClient",
          "dir": "tcpclient",
          "file": "status"
        },
        {
          "title": "connect() - TCPClient",
          "dir": "tcpclient",
          "file": "connect"
        },
        {
          "title": "write() - TCPClient",
          "dir": "tcpclient",
          "file": "write"
        },
        {
          "title": "print() - TCPClient",
          "dir": "tcpclient",
          "file": "print"
        },
        {
          "title": "println() - TCPClient",
          "dir": "tcpclient",
          "file": "println"
        },
        {
          "title": "available() - TCPClient",
          "dir": "tcpclient",
          "file": "available"
        },
        {
          "title": "read() - TCPClient",
          "dir": "tcpclient",
          "file": "read"
        },
        {
          "title": "flush() - TCPClient",
          "dir": "tcpclient",
          "file": "flush"
        },
        {
          "title": "remoteIP() - TCPClient",
          "dir": "tcpclient",
          "file": "remoteip"
        },
        {
          "title": "stop() - TCPClient",
          "dir": "tcpclient",
          "file": "stop"
        },
        {
          "title": "getWriteError() - TCPClient",
          "dir": "tcpclient",
          "file": "getwriteerror"
        },
        {
          "title": "clearWriteError() - TCPClient",
          "dir": "tcpclient",
          "file": "clearwriteerror"
        }
      ]
    },
    {
      "title": "TCPServer",
      "dir": "tcpserver",
      "collapse": true,
      "subsections": [
        {
          "title": "TCPServer",
          "dir": "tcpserver",
          "file": "tcpserver"
        },
        {
          "title": "begin() - TCPServer",
          "dir": "tcpserver",
          "file": "begin"
        },
        {
          "title": "available() - TCPServer",
          "dir": "tcpserver",
          "file": "available"
        },
        {
          "title": "write() - TCPServer",
          "dir": "tcpserver",
          "file": "write"
        },
        {
          "title": "print() - TCPServer",
          "dir": "tcpserver",
          "file": "print"
        },
        {
          "title": "println() - TCPServer",
          "dir": "tcpserver",
          "file": "println"
        },
        {
          "title": "getWriteError() - TCPServer",
          "dir": "tcpserver",
          "file": "getwriteerror"
        },
        {
          "title": "clearWriteError() - TCPServer",
          "dir": "tcpserver",
          "file": "clearwriteerror"
        }
      ]
    },
    {
      "title": "Threading",
      "dir": "threading",
      "collapse": true,
      "subsections": [
        {
          "title": "Threading",
          "dir": "threading",
          "file": "threading"
        },
        {
          "title": "os_thread_prio_t - Threading - Threading",
          "dir": "threading",
          "file": "os_thread_prio_t-threading"
        },
        {
          "title": "Thread stack size - Threading - Threading",
          "dir": "threading",
          "file": "thread-stack-size-threading"
        },
        {
          "title": "Thread functions - Threading - Threading",
          "dir": "threading",
          "file": "thread-functions-threading"
        },
        {
          "title": "Yielding to other threds - Threading - Threading",
          "dir": "threading",
          "file": "yielding-to-other-threds-threading"
        },
        {
          "title": "Thread class - Threading - Threading",
          "dir": "threading",
          "file": "thread-class-threading",
          "subsections": [
            {
              "anchor": "thread-constructor-os_thread_fn_t-threading",
              "title": "Thread constructor os_thread_fn_t - Threading"
            },
            {
              "anchor": "thread-constructor-wiring_thread_fn_t-threading",
              "title": "Thread constructor wiring_thread_fn_t - Threading"
            }
          ]
        },
        {
          "title": "Thread::dispose - Threading - Threading",
          "dir": "threading",
          "file": "thread-dispose-threading"
        },
        {
          "title": "Thread::isValid - Threading - Threading",
          "dir": "threading",
          "file": "thread-isvalid-threading"
        },
        {
          "title": "Thread::isCurrent - Threading - Threading",
          "dir": "threading",
          "file": "thread-iscurrent-threading"
        },
        {
          "title": "Thread::isRunning - Threading - Threading",
          "dir": "threading",
          "file": "thread-isrunning-threading"
        },
        {
          "title": "Mutex class - Threading - Threading",
          "dir": "threading",
          "file": "mutex-class-threading",
          "subsections": [
            {
              "anchor": "mutex-constructor-threading",
              "title": "Mutex constructor - Threading"
            },
            {
              "anchor": "mutex-lock-threading",
              "title": "Mutex::lock - Threading"
            },
            {
              "anchor": "mutex-trylock-threading",
              "title": "Mutex::trylock - Threading"
            },
            {
              "anchor": "mutex-unlock-threading",
              "title": "Mutex::unlock - Threading"
            }
          ]
        },
        {
          "title": "RecursiveMutex class - Threading - Threading",
          "dir": "threading",
          "file": "recursivemutex-class-threading",
          "subsections": [
            {
              "anchor": "recursivemutex-constructor-threading",
              "title": "RecursiveMutex constructor - Threading"
            },
            {
              "anchor": "recursivemutex-lock-threading",
              "title": "RecursiveMutex::lock - Threading"
            },
            {
              "anchor": "recursivemutex-trylock-threading",
              "title": "RecursiveMutex::trylock - Threading"
            },
            {
              "anchor": "recursivemutexmutex-unlock-threading",
              "title": "RecursiveMutexMutex::unlock - Threading"
            }
          ]
        },
        {
          "title": "Locking - Threading - Threading",
          "dir": "threading",
          "file": "locking-threading"
        },
        {
          "title": "Serial debugging - Threading - Threading",
          "dir": "threading",
          "file": "serial-debugging-threading"
        }
      ]
    },
    {
      "title": "Time",
      "dir": "time",
      "collapse": true,
      "subsections": [
        {
          "title": "Time",
          "dir": "time",
          "file": "time"
        },
        {
          "title": "millis() - Time",
          "dir": "time",
          "file": "millis"
        },
        {
          "title": "micros() - Time",
          "dir": "time",
          "file": "micros"
        },
        {
          "title": "delay() - Time",
          "dir": "time",
          "file": "delay"
        },
        {
          "title": "delayMicroseconds() - Time",
          "dir": "time",
          "file": "delaymicroseconds"
        },
        {
          "title": "hour() - Time",
          "dir": "time",
          "file": "hour"
        },
        {
          "title": "hourFormat12() - Time",
          "dir": "time",
          "file": "hourformat12"
        },
        {
          "title": "isAM() - Time",
          "dir": "time",
          "file": "isam"
        },
        {
          "title": "isPM() - Time",
          "dir": "time",
          "file": "ispm"
        },
        {
          "title": "minute() - Time",
          "dir": "time",
          "file": "minute"
        },
        {
          "title": "second() - Time",
          "dir": "time",
          "file": "second"
        },
        {
          "title": "day() - Time",
          "dir": "time",
          "file": "day"
        },
        {
          "title": "weekday() - Time",
          "dir": "time",
          "file": "weekday"
        },
        {
          "title": "month() - Time",
          "dir": "time",
          "file": "month"
        },
        {
          "title": "year() - Time",
          "dir": "time",
          "file": "year"
        },
        {
          "title": "now() - Time",
          "dir": "time",
          "file": "now"
        },
        {
          "title": "local() - Time",
          "dir": "time",
          "file": "local"
        },
        {
          "title": "zone() - Time",
          "dir": "time",
          "file": "zone"
        },
        {
          "title": "isDST() - Time",
          "dir": "time",
          "file": "isdst"
        },
        {
          "title": "getDSTOffset() - Time",
          "dir": "time",
          "file": "getdstoffset"
        },
        {
          "title": "setDSTOffset() - Time",
          "dir": "time",
          "file": "setdstoffset"
        },
        {
          "title": "beginDST() - Time",
          "dir": "time",
          "file": "begindst"
        },
        {
          "title": "endDST() - Time",
          "dir": "time",
          "file": "enddst"
        },
        {
          "title": "setTime() - Time",
          "dir": "time",
          "file": "settime"
        },
        {
          "title": "timeStr() - Time",
          "dir": "time",
          "file": "timestr"
        },
        {
          "title": "format() - Time",
          "dir": "time",
          "file": "format"
        },
        {
          "title": "setFormat() - Time",
          "dir": "time",
          "file": "setformat"
        },
        {
          "title": "getFormat() - Time",
          "dir": "time",
          "file": "getformat"
        },
        {
          "title": "isValid() - Time",
          "dir": "time",
          "file": "isvalid"
        },
        {
          "title": "Advanced - Time",
          "dir": "time",
          "file": "advanced"
        }
      ]
    },
    {
      "title": "UDP",
      "dir": "udp",
      "collapse": true,
      "subsections": [
        {
          "title": "UDP",
          "dir": "udp",
          "file": "udp"
        },
        {
          "title": "begin() - UDP",
          "dir": "udp",
          "file": "begin"
        },
        {
          "title": "available() - UDP",
          "dir": "udp",
          "file": "available"
        },
        {
          "title": "beginPacket() - UDP",
          "dir": "udp",
          "file": "beginpacket"
        },
        {
          "title": "endPacket() - UDP",
          "dir": "udp",
          "file": "endpacket"
        },
        {
          "title": "write() - UDP",
          "dir": "udp",
          "file": "write"
        },
        {
          "title": "receivePacket() - UDP",
          "dir": "udp",
          "file": "receivepacket"
        },
        {
          "title": "parsePacket() - UDP",
          "dir": "udp",
          "file": "parsepacket"
        },
        {
          "title": "read() - UDP",
          "dir": "udp",
          "file": "read"
        },
        {
          "title": "flush() - UDP",
          "dir": "udp",
          "file": "flush"
        },
        {
          "title": "stop() - UDP",
          "dir": "udp",
          "file": "stop"
        },
        {
          "title": "remoteIP() - UDP",
          "dir": "udp",
          "file": "remoteip"
        },
        {
          "title": "remotePort() - UDP",
          "dir": "udp",
          "file": "remoteport"
        },
        {
          "title": "setBuffer() - UDP",
          "dir": "udp",
          "file": "setbuffer"
        },
        {
          "title": "releaseBuffer() - UDP",
          "dir": "udp",
          "file": "releasebuffer"
        },
        {
          "title": "sendPacket() - UDP",
          "dir": "udp",
          "file": "sendpacket"
        },
        {
          "title": "joinMulticast() - UDP",
          "dir": "udp",
          "file": "joinmulticast"
        },
        {
          "title": "leaveMulticast() - UDP",
          "dir": "udp",
          "file": "leavemulticast"
        }
      ]
    },
    {
      "title": "Variant",
      "dir": "variant",
      "collapse": true,
      "subsections": [
        {
          "title": "Variant",
          "dir": "variant",
          "file": "variant"
        },
        {
          "title": "set() [Variant class] - Variant",
          "dir": "variant",
          "file": "set-variant-class"
        },
        {
          "title": "Variant::Type - Variant",
          "dir": "variant",
          "file": "variant-type"
        },
        {
          "title": "constructor [Variant class] - Variant",
          "dir": "variant",
          "file": "constructor-variant-class"
        },
        {
          "title": "value() [Variant class] - Variant",
          "dir": "variant",
          "file": "value-variant-class"
        },
        {
          "title": "value, as, and to [Variant class] - Variant",
          "dir": "variant",
          "file": "value-as-and-to-variant-class"
        },
        {
          "title": "type() [Variant class] - Variant",
          "dir": "variant",
          "file": "type-variant-class"
        },
        {
          "title": "isXXX() [Variant class] - Variant",
          "dir": "variant",
          "file": "isxxx-variant-class"
        },
        {
          "title": "toBool() [Variant class] - Variant",
          "dir": "variant",
          "file": "tobool-variant-class"
        },
        {
          "title": "asBool() [Variant class] - Variant",
          "dir": "variant",
          "file": "asbool-variant-class"
        },
        {
          "title": "toInt() [Variant class] - Variant",
          "dir": "variant",
          "file": "toint-variant-class"
        },
        {
          "title": "asInt() [Variant class] - Variant",
          "dir": "variant",
          "file": "asint-variant-class"
        },
        {
          "title": "toUInt() [Variant class] - Variant",
          "dir": "variant",
          "file": "touint-variant-class"
        },
        {
          "title": "asUInt() [Variant class] - Variant",
          "dir": "variant",
          "file": "asuint-variant-class"
        },
        {
          "title": "toInt64() [Variant class] - Variant",
          "dir": "variant",
          "file": "toint64-variant-class"
        },
        {
          "title": "asInt64() [Variant class] - Variant",
          "dir": "variant",
          "file": "asint64-variant-class"
        },
        {
          "title": "toUInt64() [Variant class] - Variant",
          "dir": "variant",
          "file": "touint64-variant-class"
        },
        {
          "title": "asUInt64() [Variant class] - Variant",
          "dir": "variant",
          "file": "asuint64-variant-class"
        },
        {
          "title": "toDouble() [Variant class] - Variant",
          "dir": "variant",
          "file": "todouble-variant-class"
        },
        {
          "title": "asDouble() [Variant class] - Variant",
          "dir": "variant",
          "file": "asdouble-variant-class"
        },
        {
          "title": "toString() [Variant class] - Variant",
          "dir": "variant",
          "file": "tostring-variant-class"
        },
        {
          "title": "asString() [Variant class] - Variant",
          "dir": "variant",
          "file": "asstring-variant-class"
        },
        {
          "title": "toArray() [Variant class] - Variant",
          "dir": "variant",
          "file": "toarray-variant-class"
        },
        {
          "title": "asArray() [Variant class] - Variant",
          "dir": "variant",
          "file": "asarray-variant-class"
        },
        {
          "title": "toMap() [Variant class] - Variant",
          "dir": "variant",
          "file": "tomap-variant-class"
        },
        {
          "title": "asMap() [Variant class] - Variant",
          "dir": "variant",
          "file": "asmap-variant-class"
        },
        {
          "title": "toJSON [Variant class] - Variant",
          "dir": "variant",
          "file": "tojson-variant-class"
        },
        {
          "title": "fromJSON [Variant class] - Variant",
          "dir": "variant",
          "file": "fromjson-variant-class"
        }
      ]
    },
    {
      "title": "VariantArray",
      "dir": "variantarray",
      "collapse": true,
      "subsections": [
        {
          "title": "VariantArray",
          "dir": "variantarray",
          "file": "variantarray"
        },
        {
          "title": "append() [VariantArray] - VariantArray",
          "dir": "variantarray",
          "file": "append-variantarray"
        },
        {
          "title": "prepend() [VariantArray] - VariantArray",
          "dir": "variantarray",
          "file": "prepend-variantarray"
        },
        {
          "title": "insertAt() [VariantArray] - VariantArray",
          "dir": "variantarray",
          "file": "insertat-variantarray"
        },
        {
          "title": "removeAt() [VariantArray] - VariantArray",
          "dir": "variantarray",
          "file": "removeat-variantarray"
        },
        {
          "title": "at() [VariantArray] - VariantArray",
          "dir": "variantarray",
          "file": "at-variantarray"
        }
      ]
    },
    {
      "title": "VariantMap",
      "dir": "variantmap",
      "collapse": true,
      "subsections": [
        {
          "title": "VariantMap",
          "dir": "variantmap",
          "file": "variantmap"
        },
        {
          "title": "set() [VariantMap] - VariantMap",
          "dir": "variantmap",
          "file": "set-variantmap"
        },
        {
          "title": "remove() [VariantMap] - VariantMap",
          "dir": "variantmap",
          "file": "remove-variantmap"
        },
        {
          "title": "get() [VariantMap] - VariantMap",
          "dir": "variantmap",
          "file": "get-variantmap"
        },
        {
          "title": "has() [VariantMap] - VariantMap",
          "dir": "variantmap",
          "file": "has-variantmap"
        }
      ]
    },
    {
      "title": "Vector",
      "dir": "vector",
      "collapse": true,
      "subsections": [
        {
          "title": "Vector",
          "dir": "vector",
          "file": "vector"
        },
        {
          "title": "Vector() [Vector template] - Vector",
          "dir": "vector",
          "file": "vector-vector-template"
        },
        {
          "title": "Vector(int n) [Vector template] - Vector",
          "dir": "vector",
          "file": "vector-int-n-vector-template"
        },
        {
          "title": "Vector(int n, const T&amp; value) [Vector template] - Vector",
          "dir": "vector",
          "file": "vector-int-n-const-t-amp-value-vector-template"
        },
        {
          "title": "Vector(std::initializer_list<T> values) [Vector template] - Vector",
          "dir": "vector",
          "file": "vector-std-initializer_list-values-vector-template"
        },
        {
          "title": "Vector(const Vector<T, AllocatorT>&amp; vector) [Vector template] - Vector",
          "dir": "vector",
          "file": "vector-const-vector-amp-vector-vector-template"
        },
        {
          "title": "append(T value) [Vector template] - Vector",
          "dir": "vector",
          "file": "append-t-value-vector-template"
        },
        {
          "title": "append(int n, const T&amp; value) [Vector template] - Vector",
          "dir": "vector",
          "file": "append-int-n-const-t-amp-value-vector-template"
        },
        {
          "title": "append(const T* values, int n) [Vector template] - Vector",
          "dir": "vector",
          "file": "append-const-t-values-int-n-vector-template"
        },
        {
          "title": "append(const Vector<T, AllocatorT>&amp; vecto) [Vector template] - Vector",
          "dir": "vector",
          "file": "append-const-vector-amp-vecto-vector-template"
        },
        {
          "title": "prepend(T value) [Vector template] - Vector",
          "dir": "vector",
          "file": "prepend-t-value-vector-template"
        },
        {
          "title": "prepend(int n, const T&amp; value) [Vector template] - Vector",
          "dir": "vector",
          "file": "prepend-int-n-const-t-amp-value-vector-template"
        },
        {
          "title": "prepend(const T* values, int n) [Vector template] - Vector",
          "dir": "vector",
          "file": "prepend-const-t-values-int-n-vector-template"
        },
        {
          "title": "prepend(const Vector<T, AllocatorT>&amp; vector) [Vector template] - Vector",
          "dir": "vector",
          "file": "prepend-const-vector-amp-vector-vector-template"
        },
        {
          "title": "insert(int i, T value) [Vector template] - Vector",
          "dir": "vector",
          "file": "insert-int-i-t-value-vector-template"
        },
        {
          "title": "insert(int i, int n, const T&amp; value) [Vector template] - Vector",
          "dir": "vector",
          "file": "insert-int-i-int-n-const-t-amp-value-vector-template"
        },
        {
          "title": "insert(int i, const T* values, int n) [Vector template] - Vector",
          "dir": "vector",
          "file": "insert-int-i-const-t-values-int-n-vector-template"
        },
        {
          "title": "insert(const Vector<T, AllocatorT>&amp; vector) [Vector template] - Vector",
          "dir": "vector",
          "file": "insert-const-vector-amp-vector-vector-template"
        },
        {
          "title": "removeAt(removeAt(int i, int n = 1) [Vector template] - Vector",
          "dir": "vector",
          "file": "removeat-removeat-int-i-int-n-1-vector-template"
        },
        {
          "title": "bool removeOne(const T&amp; value) [Vector template] - Vector",
          "dir": "vector",
          "file": "bool-removeone-const-t-amp-value-vector-template"
        },
        {
          "title": "bool removeAll(const T&amp; value) [Vector template] - Vector",
          "dir": "vector",
          "file": "bool-removeall-const-t-amp-value-vector-template"
        },
        {
          "title": "T takeFirst() [Vector template] - Vector",
          "dir": "vector",
          "file": "t-takefirst-vector-template"
        },
        {
          "title": "T takeLast() [Vector template] - Vector",
          "dir": "vector",
          "file": "t-takelast-vector-template"
        },
        {
          "title": "T takeAt(int i) [Vector template] - Vector",
          "dir": "vector",
          "file": "t-takeat-int-i-vector-template"
        },
        {
          "title": "T first() [Vector template] - Vector",
          "dir": "vector",
          "file": "t-first-vector-template"
        },
        {
          "title": "T last() [Vector template] - Vector",
          "dir": "vector",
          "file": "t-last-vector-template"
        },
        {
          "title": "T at(int i) [Vector template] - Vector",
          "dir": "vector",
          "file": "t-at-int-i-vector-template"
        },
        {
          "title": "operator[] (int i) [Vector template] - Vector",
          "dir": "vector",
          "file": "operator-int-i-vector-template"
        },
        {
          "title": "indexOf(const T&amp; value, int i = 0) [Vector template] - Vector",
          "dir": "vector",
          "file": "indexof-const-t-amp-value-int-i-0-vector-template"
        },
        {
          "title": "lastIndexOf(const T&amp; value) [Vector template] - Vector",
          "dir": "vector",
          "file": "lastindexof-const-t-amp-value-vector-template"
        },
        {
          "title": "lastIndexOf(const T&amp; value, int i) [Vector template] - Vector",
          "dir": "vector",
          "file": "lastindexof-const-t-amp-value-int-i-vector-template"
        },
        {
          "title": "contains(const T&amp; value) [Vector template] - Vector",
          "dir": "vector",
          "file": "contains-const-t-amp-value-vector-template"
        },
        {
          "title": "size() [Vector template] - Vector",
          "dir": "vector",
          "file": "size-vector-template"
        },
        {
          "title": "isEmpty() [Vector template] - Vector",
          "dir": "vector",
          "file": "isempty-vector-template"
        },
        {
          "title": "isEmpty() [Vector template] - Vector",
          "dir": "vector",
          "file": "isempty-vector-template"
        },
        {
          "title": "begin() [Vector template] - Vector",
          "dir": "vector",
          "file": "begin-vector-template"
        },
        {
          "title": "end() [Vector template] - Vector",
          "dir": "vector",
          "file": "end-vector-template"
        },
        {
          "title": "insert(ConstIterator pos, T value) [Vector template] - Vector",
          "dir": "vector",
          "file": "insert-constiterator-pos-t-value-vector-template"
        },
        {
          "title": "insert(ConstIterator pos, T value) [Vector template] - Vector",
          "dir": "vector",
          "file": "insert-constiterator-pos-t-value-vector-template"
        }
      ]
    },
    {
      "title": "Watchdog - Application",
      "dir": "watchdog-application",
      "collapse": true,
      "subsections": [
        {
          "title": "Watchdog - Application",
          "dir": "watchdog-application",
          "file": "watchdog-application"
        }
      ]
    },
    {
      "title": "Watchdog - Hardware",
      "dir": "watchdog-hardware",
      "collapse": true,
      "subsections": [
        {
          "title": "Watchdog - Hardware",
          "dir": "watchdog-hardware",
          "file": "watchdog-hardware"
        },
        {
          "title": "Sleep considerations - Watchdog - Hardware",
          "dir": "watchdog-hardware",
          "file": "sleep-considerations",
          "subsections": [
            {
              "anchor": "watchdog-capabilities",
              "title": "Watchdog capabilities"
            }
          ]
        },
        {
          "title": "Watchdog.init - Watchdog - Hardware",
          "dir": "watchdog-hardware",
          "file": "watchdog-init"
        },
        {
          "title": "Watchdog.start - Watchdog - Hardware",
          "dir": "watchdog-hardware",
          "file": "watchdog-start"
        },
        {
          "title": "Watchdog.stop - Watchdog - Hardware",
          "dir": "watchdog-hardware",
          "file": "watchdog-stop"
        },
        {
          "title": "Watchdog.refresh - Watchdog - Hardware",
          "dir": "watchdog-hardware",
          "file": "watchdog-refresh",
          "subsections": [
            {
              "anchor": "watchdog-sleep_running",
              "title": "Watchdog SLEEP_RUNNING"
            }
          ]
        },
        {
          "title": "Watchdog.onExpired - Watchdog - Hardware",
          "dir": "watchdog-hardware",
          "file": "watchdog-onexpired"
        }
      ]
    },
    {
      "title": "WiFi",
      "dir": "wifi",
      "collapse": true,
      "subsections": [
        {
          "title": "WiFi",
          "dir": "wifi",
          "file": "wifi"
        },
        {
          "title": "on() - WiFi",
          "dir": "wifi",
          "file": "on"
        },
        {
          "title": "off() - WiFi",
          "dir": "wifi",
          "file": "off"
        },
        {
          "title": "connect() - WiFi",
          "dir": "wifi",
          "file": "connect"
        },
        {
          "title": "disconnect() - WiFi",
          "dir": "wifi",
          "file": "disconnect"
        },
        {
          "title": "connecting() - WiFi",
          "dir": "wifi",
          "file": "connecting"
        },
        {
          "title": "ready() - WiFi",
          "dir": "wifi",
          "file": "ready"
        },
        {
          "title": "setConfig() [WiFi] - WiFi",
          "dir": "wifi",
          "file": "setconfig-wifi"
        },
        {
          "title": "getConfig() [WiFi] - WiFi",
          "dir": "wifi",
          "file": "getconfig-wifi"
        },
        {
          "title": "selectAntenna() [antenna] - WiFi",
          "dir": "wifi",
          "file": "selectantenna-antenna"
        },
        {
          "title": "getAntenna() - WiFi",
          "dir": "wifi",
          "file": "getantenna"
        },
        {
          "title": "prefer() [WiFi] - WiFi",
          "dir": "wifi",
          "file": "prefer-wifi"
        },
        {
          "title": "isPreferred() [WiFi] - WiFi",
          "dir": "wifi",
          "file": "ispreferred-wifi"
        },
        {
          "title": "listen() - WiFi",
          "dir": "wifi",
          "file": "listen"
        },
        {
          "title": "listening() - WiFi",
          "dir": "wifi",
          "file": "listening"
        },
        {
          "title": "setListenTimeout() - WiFi",
          "dir": "wifi",
          "file": "setlistentimeout"
        },
        {
          "title": "getListenTimeout() - WiFi",
          "dir": "wifi",
          "file": "getlistentimeout"
        },
        {
          "title": "setCredentials() - WiFi",
          "dir": "wifi",
          "file": "setcredentials"
        },
        {
          "title": "getCredentials() - WiFi",
          "dir": "wifi",
          "file": "getcredentials"
        },
        {
          "title": "clearCredentials() - WiFi",
          "dir": "wifi",
          "file": "clearcredentials"
        },
        {
          "title": "hasCredentials() - WiFi",
          "dir": "wifi",
          "file": "hascredentials"
        },
        {
          "title": "macAddress() - WiFi",
          "dir": "wifi",
          "file": "macaddress"
        },
        {
          "title": "SSID() - WiFi",
          "dir": "wifi",
          "file": "ssid"
        },
        {
          "title": "BSSID() - WiFi",
          "dir": "wifi",
          "file": "bssid"
        },
        {
          "title": "RSSI() - WiFi",
          "dir": "wifi",
          "file": "rssi"
        },
        {
          "title": "WiFiSignal Class - WiFi",
          "dir": "wifi",
          "file": "wifisignal-class",
          "subsections": [
            {
              "anchor": "getstrength-",
              "title": "getStrength()"
            },
            {
              "anchor": "getquality-",
              "title": "getQuality()"
            },
            {
              "anchor": "getstrengthvalue-",
              "title": "getStrengthValue()"
            },
            {
              "anchor": "getqualityvalue-",
              "title": "getQualityValue()"
            }
          ]
        },
        {
          "title": "ping() - WiFi",
          "dir": "wifi",
          "file": "ping"
        },
        {
          "title": "scan() - WiFi",
          "dir": "wifi",
          "file": "scan"
        },
        {
          "title": "resolve() - WiFi",
          "dir": "wifi",
          "file": "resolve"
        },
        {
          "title": "localIP() - WiFi",
          "dir": "wifi",
          "file": "localip"
        },
        {
          "title": "subnetMask() - WiFi",
          "dir": "wifi",
          "file": "subnetmask"
        },
        {
          "title": "gatewayIP() - WiFi",
          "dir": "wifi",
          "file": "gatewayip"
        },
        {
          "title": "dnsServerIP() - WiFi",
          "dir": "wifi",
          "file": "dnsserverip"
        },
        {
          "title": "dhcpServerIP() - WiFi",
          "dir": "wifi",
          "file": "dhcpserverip"
        },
        {
          "title": "setStaticIP() - WiFi",
          "dir": "wifi",
          "file": "setstaticip"
        },
        {
          "title": "useStaticIP() - WiFi",
          "dir": "wifi",
          "file": "usestaticip"
        },
        {
          "title": "useDynamicIP() - WiFi",
          "dir": "wifi",
          "file": "usedynamicip"
        },
        {
          "title": "setHostname() - WiFi",
          "dir": "wifi",
          "file": "sethostname"
        },
        {
          "title": "hostname() - WiFi",
          "dir": "wifi",
          "file": "hostname"
        },
        {
          "title": "wlan_get_country_code - WiFi",
          "dir": "wifi",
          "file": "wlan_get_country_code"
        },
        {
          "title": "wlan_set_country_code - WiFi",
          "dir": "wifi",
          "file": "wlan_set_country_code"
        },
        {
          "title": "WiFiCredentials class - WiFi",
          "dir": "wifi",
          "file": "wificredentials-class",
          "subsections": [
            {
              "anchor": "wificredentials-",
              "title": "WiFiCredentials()"
            },
            {
              "anchor": "setssid-",
              "title": "setSsid()"
            },
            {
              "anchor": "setsecurity-",
              "title": "setSecurity()"
            },
            {
              "anchor": "setcipher-",
              "title": "setCipher()"
            },
            {
              "anchor": "setpassword-",
              "title": "setPassword()"
            },
            {
              "anchor": "sethidden-",
              "title": "setHidden()"
            },
            {
              "anchor": "setvalidate-",
              "title": "setValidate()"
            },
            {
              "anchor": "setchannel-",
              "title": "setChannel()"
            },
            {
              "anchor": "seteaptype-",
              "title": "setEapType()"
            },
            {
              "anchor": "setidentity-",
              "title": "setIdentity()"
            },
            {
              "anchor": "setouteridentity-",
              "title": "setOuterIdentity()"
            },
            {
              "anchor": "setclientcertificate-",
              "title": "setClientCertificate()"
            },
            {
              "anchor": "setprivatekey-",
              "title": "setPrivateKey()"
            },
            {
              "anchor": "setrootcertificate-",
              "title": "setRootCertificate()"
            }
          ]
        },
        {
          "title": "WLanEapType Enum - WiFi",
          "dir": "wifi",
          "file": "wlaneaptype-enum"
        },
        {
          "title": "SecurityType Enum - WiFi",
          "dir": "wifi",
          "file": "securitytype-enum"
        },
        {
          "title": "WLanSecurityCipher Enum - WiFi",
          "dir": "wifi",
          "file": "wlansecuritycipher-enum"
        }
      ]
    },
    {
      "title": "Wire (I2C)",
      "dir": "wire-i2c",
      "collapse": true,
      "subsections": [
        {
          "title": "Wire (I2C)",
          "dir": "wire-i2c",
          "file": "wire-i2c"
        },
        {
          "title": "Pull-up resistors (I2C) - Wire (I2C)",
          "dir": "wire-i2c",
          "file": "pull-up-resistors-i2c"
        },
        {
          "title": "Pins (I2C) - Wire (I2C)",
          "dir": "wire-i2c",
          "file": "pins-i2c"
        },
        {
          "title": "setSpeed() - Wire (I2C)",
          "dir": "wire-i2c",
          "file": "setspeed"
        },
        {
          "title": "stretchClock() - Wire (I2C)",
          "dir": "wire-i2c",
          "file": "stretchclock"
        },
        {
          "title": "begin() - Wire (I2C)",
          "dir": "wire-i2c",
          "file": "begin"
        },
        {
          "title": "Slave mode (I2C) - Wire (I2C)",
          "dir": "wire-i2c",
          "file": "slave-mode-i2c"
        },
        {
          "title": "end() - Wire (I2C)",
          "dir": "wire-i2c",
          "file": "end"
        },
        {
          "title": "isEnabled() - Wire (I2C)",
          "dir": "wire-i2c",
          "file": "isenabled"
        },
        {
          "title": "requestFrom() - Wire (I2C)",
          "dir": "wire-i2c",
          "file": "requestfrom"
        },
        {
          "title": "reset() - Wire (I2C)",
          "dir": "wire-i2c",
          "file": "reset"
        },
        {
          "title": "beginTransmission() - Wire (I2C)",
          "dir": "wire-i2c",
          "file": "begintransmission"
        },
        {
          "title": "endTransmission() - Wire (I2C)",
          "dir": "wire-i2c",
          "file": "endtransmission"
        },
        {
          "title": "write() - Wire (I2C)",
          "dir": "wire-i2c",
          "file": "write"
        },
        {
          "title": "available() - Wire (I2C)",
          "dir": "wire-i2c",
          "file": "available"
        },
        {
          "title": "read() - Wire (I2C)",
          "dir": "wire-i2c",
          "file": "read"
        },
        {
          "title": "peek() - Wire (I2C)",
          "dir": "wire-i2c",
          "file": "peek"
        },
        {
          "title": "lock() - Wire (I2C)",
          "dir": "wire-i2c",
          "file": "lock"
        },
        {
          "title": "unlock() - Wire (I2C)",
          "dir": "wire-i2c",
          "file": "unlock"
        },
        {
          "title": "onReceive() - Wire (I2C)",
          "dir": "wire-i2c",
          "file": "onreceive"
        },
        {
          "title": "onRequest() - Wire (I2C)",
          "dir": "wire-i2c",
          "file": "onrequest"
        },
        {
          "title": "acquireWireBuffer - Wire (I2C)",
          "dir": "wire-i2c",
          "file": "acquirewirebuffer"
        }
      ]
    }
  ]
}